(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("CL", [], factory);
	else if(typeof exports === 'object')
		exports["CL"] = factory();
	else
		root["CL"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"cl-components": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	var jsonpArray = this["webpackJsonpCL"] = this["webpackJsonpCL"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./public/src/index.js","vendors~cl-components"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/components/data_table/datatable.scss":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/components/data_table/datatable.scss ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".noir {\n  color: #d2d8e7;\n  letter-spacing: 0.5px; }\n  .noir .fixedDataTableRowLayout_fixedColumnsDivider {\n    border-left: 1px solid rgba(252, 253, 255, 0.06) !important; }\n  .noir .public_fixedDataTable_topShadow {\n    background-image: linear-gradient(180deg, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0)); }\n  .noir .public_fixedDataTable_bottomShadow {\n    background-image: linear-gradient(0deg, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0)); }\n  .noir .fixedDataTableRowLayout_columnsRightShadow {\n    background-image: linear-gradient(90deg, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0)); }\n  .noir .fixedDataTableRowLayout_columnsShadow {\n    background-image: linear-gradient(90deg, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0)); }\n  .noir .headerFilterWrapper {\n    background-color: #151C2B; }\n    .noir .headerFilterWrapper .filterSearchTitle {\n      text-align: left;\n      margin-bottom: 10px; }\n    .noir .headerFilterWrapper .filterSearchWrapper {\n      border-color: #6279ac;\n      margin-bottom: 5px; }\n      .noir .headerFilterWrapper .filterSearchWrapper input {\n        color: white; }\n    .noir .headerFilterWrapper .headerFilterButtons {\n      padding-bottom: 5px; }\n      .noir .headerFilterWrapper .headerFilterButtons .material-icons {\n        margin-left: 5px; }\n  .noir .tableWrapper {\n    background-color: #1e2538; }\n  .noir .public_fixedDataTableRow_main {\n    background-color: #243042; }\n  .noir .public_fixedDataTableRow_highlighted {\n    background-color: #1e2538; }\n  .noir .public_fixedDataTable_bodyRow:hover {\n    background-color: #465366; }\n    .noir .public_fixedDataTable_bodyRow:hover .public_fixedDataTableCell_main {\n      background-color: #465366; }\n  .noir .public_fixedDataTableCell_main {\n    background-color: #243042;\n    border: none; }\n  .noir .selectAllWrapper {\n    background-color: #344363; }\n    .noir .selectAllWrapper .spanAllIndicator {\n      color: #0d91e9; }\n  .noir .public_fixedDataTableRow_highlighted .public_fixedDataTableCell_main {\n    background-color: #1D2537; }\n  .noir .public_fixedDataTable_header {\n    border-top: 1px solid rgba(252, 253, 255, 0.06) !important;\n    border-bottom: 1px solid rgba(252, 253, 255, 0.06) !important; }\n  .noir .public_fixedDataTable_header,\n  .noir .public_fixedDataTable_header .public_fixedDataTableCell_main,\n  .noir .public_fixedDataTable_scrollbarSpacer {\n    background-color: #1e2538 !important;\n    background-image: none; }\n  .noir .mdl-radio__outer-circle {\n    border-color: #fff; }\n  .noir .mdl-radio.is-checked .mdl-radio__outer-circle {\n    border-color: #0d91e9; }\n  .noir .mdl-radio__inner-circle {\n    background: #0d91e9; }\n  .noir .mdl-checkbox__box-outline {\n    border-color: #fff; }\n  .noir .fixedDataTableCellLayout_columnReorderContainer {\n    border-color: #0284ff;\n    background-color: #333c51;\n    width: 12px;\n    cursor: move; }\n    .noir .fixedDataTableCellLayout_columnReorderContainer::after {\n      top: calc(50% - 5px); }\n  .noir .dropdownWrapper {\n    background-color: #283548 !important; }\n    .noir .dropdownWrapper .columsWrapper,\n    .noir .dropdownWrapper .controllerWrapper {\n      border-bottom: 2px solid #39496d; }\n    .noir .dropdownWrapper .closeBtn {\n      color: #d2d8e7; }\n  .noir .navWrapper i {\n    color: #35a8f4; }\n  .noir .navWrapper:hover {\n    background-color: #35a8f4; }\n    .noir .navWrapper:hover i {\n      color: #fff; }\n  .noir .navWrapperSelected {\n    background-color: #0d91e9; }\n    .noir .navWrapperSelected i {\n      color: #fff; }\n  .noir .tableSearchWrapper {\n    border-color: #6279ac !important; }\n    .noir .tableSearchWrapper i {\n      color: white; }\n    .noir .tableSearchWrapper input {\n      color: white; }\n      .noir .tableSearchWrapper input::placeholder {\n        color: #9ea5b5; }\n  .noir .tableHeaderTail .editColumnsButton {\n    background-color: #6279ac !important; }\n  .noir .dropdownSelectUnderline {\n    border-color: #d2d8e7; }\n  .noir .listView .public_fixedDataTableRow_highlighted {\n    background-color: #243042; }\n  .noir .listView .public_fixedDataTableCell_main {\n    background-color: #243042; }\n\n.light .fixedDataTableRowLayout_fixedColumnsDivider {\n  border-left: 1px solid rgba(0, 0, 0, 0.06) !important; }\n\n.light .tableHead {\n  background: #f4f4f4 !important; }\n\n.light .tableWrapper {\n  background-color: #f4f4f4; }\n\n.light .tableSearchWrapper {\n  border-color: #5f5f5f !important; }\n\n.light .headerFilterWrapper {\n  background-color: #ffffff; }\n  .light .headerFilterWrapper .filterSearchWrapper {\n    border-color: #5f5f5f; }\n    .light .headerFilterWrapper .filterSearchWrapper input {\n      color: black; }\n\n.light .ScrollbarLayout_main {\n  background-color: #f4f4f4 !important; }\n\n.light .public_fixedDataTable_header {\n  border-top: 1px solid #e8e9eb !important;\n  border-bottom: 1px solid #e8e9eb !important; }\n\n.light .public_fixedDataTable_header,\n.light .public_fixedDataTable_header .public_fixedDataTableCell_main,\n.light .public_fixedDataTable_scrollbarSpacer {\n  background-color: #f4f4f4 !important;\n  background-image: none; }\n\n.light .public_fixedDataTableCell_main {\n  background-color: #ffffff; }\n\n.light .public_fixedDataTableRow_highlighted {\n  background-color: #f4f4f4; }\n\n.light .public_fixedDataTable_bodyRow:hover {\n  background-color: #e0e0e0; }\n  .light .public_fixedDataTable_bodyRow:hover .public_fixedDataTableCell_main {\n    background-color: #e0e0e0; }\n\n.light .tableHeaderTail .editColumnsButton {\n  background-color: #606060 !important; }\n\n.light .dropdownSelectUnderline {\n  border-color: #202020; }\n\n.light .fixedDataTableCellLayout_columnReorderContainer::after {\n  color: #979eaf !important; }\n\n.light .dv_table_cl .material-icons {\n  color: #606060 !important; }\n\n.light .dropdownWrapper .columsWrapper,\n.light .dropdownWrapper .controllerWrapper {\n  border-bottom: 2px solid #d2d8e7; }\n\n.light .mdl-radio__outer-circle {\n  border-color: rgba(0, 0, 0, 0.54); }\n\n.light .mdl-radio.is-checked .mdl-radio__outer-circle {\n  border-color: #0d91e9; }\n\n.light .mdl-radio__inner-circle {\n  background: #0d91e9 !important; }\n\n.light .listView .public_fixedDataTableRow_highlighted {\n  background-color: #ffffff; }\n\n.light .listView .public_fixedDataTableCell_main {\n  background-color: #ffffff; }\n\n.ScrollbarLayout_mainVertical {\n  z-index: 0 !important; }\n\n.public_fixedDataTable_horizontalScrollbar {\n  bottom: 2px !important; }\n\n.offsetError {\n  color: #fd6c6e;\n  margin-top: -21px;\n  margin-bottom: 10px; }\n\n.dv_table_cl {\n  width: 100%;\n  display: inline-block;\n  touch-action: none !important; }\n  .dv_table_cl .listView .public_fixedDataTable_bodyRow {\n    height: calc(100% - 10px) !important; }\n  .dv_table_cl .listView .moreOptionsWrapper {\n    margin-top: -2px; }\n  .dv_table_cl .listView .collapseToggler {\n    margin-top: -1px; }\n  .dv_table_cl .collapseToggler {\n    cursor: pointer;\n    font-size: 12px; }\n  .dv_table_cl .headerControllerIcon {\n    position: absolute;\n    top: 15px; }\n  .dv_table_cl .tableWrapper {\n    position: relative;\n    min-height: 30px; }\n    .dv_table_cl .tableWrapper .down {\n      transform: rotate(180deg);\n      transition: transform 300ms ease; }\n    .dv_table_cl .tableWrapper .up {\n      transform: rotate(0deg);\n      transition: transform 300ms ease; }\n    .dv_table_cl .tableWrapper .array_right {\n      transform: rotate(0deg);\n      transition: transform 300ms ease; }\n    .dv_table_cl .tableWrapper .array_right_down {\n      transform: rotate(90deg);\n      transition: transform 300ms ease; }\n    .dv_table_cl .tableWrapper .tableHead {\n      position: absolute;\n      display: inline-flex;\n      align-items: center;\n      justify-content: space-between;\n      width: 100%;\n      height: 50px; }\n      .dv_table_cl .tableWrapper .tableHead .mdl-button {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        line-height: unset; }\n      .dv_table_cl .tableWrapper .tableHead .tableHeaderHead {\n        padding-left: 30px; }\n        .dv_table_cl .tableWrapper .tableHead .tableHeaderHead .totalTitle {\n          font-size: 20px; }\n      .dv_table_cl .tableWrapper .tableHead .tableHeaderTail {\n        display: inline-flex;\n        align-items: center;\n        height: inherit; }\n        .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .clearFilterComp {\n          color: #d28c03;\n          cursor: pointer;\n          float: right;\n          margin-right: 15px; }\n        .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper {\n          float: right;\n          cursor: pointer;\n          position: relative;\n          margin-right: 15px; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .downloadBtn {\n            height: 30px;\n            display: flex;\n            align-items: center;\n            text-transform: uppercase !important;\n            background: #6279ac; }\n            .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .downloadBtn .material-icons {\n              font-size: 20px;\n              margin-left: -6px;\n              margin-right: 6px; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .mdl-button {\n            text-transform: capitalize; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .downlowOptionWrapper {\n            position: absolute;\n            top: 37px;\n            right: -128px;\n            z-index: 1000;\n            width: 200px; }\n            .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .downlowOptionWrapper .downloadContent {\n              padding: 10px;\n              background-color: #333c51;\n              position: relative;\n              padding-bottom: 40px; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .downlowOptionWrapper .downloadContent .closeBtn {\n                position: absolute;\n                right: 10px;\n                top: 7px; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .downlowOptionWrapper .downloadContent ul {\n                padding-left: 0;\n                list-style: none; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .downlowOptionWrapper .downloadContent Button {\n                position: absolute;\n                bottom: 10px;\n                right: 10px; }\n        .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper {\n          float: right;\n          margin-right: 15px; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper .totalRecordsWrapper {\n            padding-right: 15px;\n            text-align: center; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper ul {\n            padding-left: 0;\n            list-style: none;\n            width: 250px; }\n            .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper ul li {\n              list-style: none;\n              height: 30px;\n              display: inline-block; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper ul li.inActive {\n                pointer-events: none;\n                color: gray; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper ul li i {\n                cursor: pointer; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper ul li i::selection {\n                  background: none; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper ul li .info {\n                height: 30px;\n                width: 150px;\n                text-align: center;\n                position: relative; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper ul li .info .inner {\n                  position: absolute;\n                  top: 6px;\n                  width: 100%; }\n        .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper {\n          float: right;\n          position: relative;\n          margin-right: 15px; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .editColumnsButton {\n            height: 30px;\n            text-transform: none;\n            box-shadow: none; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper {\n            position: absolute;\n            top: 25px;\n            right: -15px;\n            z-index: 1000;\n            height: 430px;\n            border-radius: 4px;\n            background-color: white;\n            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12); }\n            .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent {\n              width: 620px; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .controllerWrapper {\n                height: 70px;\n                position: relative;\n                margin-bottom: 10px;\n                padding: 10px 24px 0; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .controllerWrapper .columnTitle {\n                  color: #6279ac; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .controllerWrapper .mdl-checkbox__label {\n                  font-size: inherit; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .controllerWrapper ul {\n                  padding-left: 0; }\n                  .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .controllerWrapper ul li {\n                    list-style: none;\n                    display: inline;\n                    float: left;\n                    margin-right: 20px; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .controllerWrapper .closeBtn {\n                  position: absolute;\n                  right: 0;\n                  top: 0;\n                  min-width: 36px;\n                  margin: 4px;\n                  padding: 0; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .columsWrapper {\n                height: 280px;\n                overflow: auto;\n                margin-bottom: 10px;\n                padding: 0 24px; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .columsWrapper .columnItem {\n                  position: relative;\n                  width: 200px;\n                  margin-bottom: 10px;\n                  margin-right: 5px;\n                  cursor: pointer;\n                  float: left; }\n                  .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .columsWrapper .columnItem .reorder {\n                    width: 25px;\n                    float: left; }\n                  .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .columsWrapper .columnItem .checkboxWrapper {\n                    position: relative;\n                    width: 85%;\n                    float: left; }\n                    .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .columsWrapper .columnItem .checkboxWrapper label {\n                      cursor: all-scroll; }\n                    .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .columsWrapper .columnItem .checkboxWrapper .checkboxLable {\n                      position: absolute;\n                      left: 25px;\n                      top: 0; }\n                  .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .columsWrapper .columnItem .title {\n                    width: 150px;\n                    float: left;\n                    margin-left: 30px; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .buttonsWrapper {\n                height: 50px;\n                text-align: right;\n                padding: 0 24px; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .buttonsWrapper .mdl-button {\n                  color: #6279ac;\n                  margin-left: 5px; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .buttonsWrapper .mdl-button--raised.mdl-button--colored {\n                  color: #fff; }\n        .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .tableSearchWrapper {\n          position: relative;\n          display: flex;\n          height: 30px;\n          margin-right: 15px;\n          border-bottom: 1px solid;\n          transition: border-bottom ease-in-out 300ms; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .tableSearchWrapper i {\n            width: 30px;\n            height: 30px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 21px;\n            cursor: pointer; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .tableSearchWrapper input {\n            height: 100%;\n            font-size: 14px;\n            padding: 0;\n            border: none;\n            background-color: inherit; }\n            .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .tableSearchWrapper input:focus {\n              outline: none; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .tableSearchWrapper.focused {\n            border-bottom: 2px solid #0d91e9 !important; }\n    .dv_table_cl .tableWrapper .tableBody {\n      position: absolute;\n      top: 50px; }\n    .dv_table_cl .tableWrapper .tableGlobalAll {\n      top: 90px; }\n    .dv_table_cl .tableWrapper .selectAllWrapper {\n      position: absolute;\n      top: 50px;\n      left: 0;\n      right: 0;\n      height: 40px;\n      display: flex;\n      align-items: center;\n      padding-left: 20px; }\n      .dv_table_cl .tableWrapper .selectAllWrapper .spanAllIndicator {\n        color: #0d91e9;\n        margin-left: 20px;\n        cursor: pointer; }\n  .dv_table_cl .headerWrapper {\n    position: absolute;\n    display: inline-flex;\n    font-weight: 500;\n    left: 15px;\n    right: 0; }\n    .dv_table_cl .headerWrapper .sortIconWrapper {\n      cursor: pointer;\n      padding-left: 2px; }\n      .dv_table_cl .headerWrapper .sortIconWrapper .material-icons {\n        font-size: 20px; }\n    .dv_table_cl .headerWrapper .filterIconWrapper {\n      position: absolute;\n      left: -2px;\n      cursor: pointer; }\n      .dv_table_cl .headerWrapper .filterIconWrapper .material-icons {\n        font-size: 20px; }\n    .dv_table_cl .headerWrapper .selectedFilter {\n      color: #d28c03; }\n    .dv_table_cl .headerWrapper .hoverSort {\n      opacity: 0.6; }\n    .dv_table_cl .headerWrapper .sortIconUp {\n      transition: transform 300ms ease;\n      transform: rotateZ(0deg); }\n    .dv_table_cl .headerWrapper .sortIconDown {\n      transform: rotateZ(180deg); }\n    .dv_table_cl .headerWrapper .title {\n      position: absolute;\n      left: 23px;\n      top: 5px; }\n    .dv_table_cl .headerWrapper .filterAttachPoint {\n      position: absolute;\n      left: 0;\n      top: 23px; }\n  .dv_table_cl .fixedDataTableCellLayout_columnReorderContainer::after {\n    top: calc(50% - 5px); }\n  .dv_table_cl .rowSelected .public_fixedDataTableCell_main {\n    background-color: yellow; }\n  .dv_table_cl .lightrowSelected .public_fixedDataTableCell_main {\n    background-color: yellow; }\n  .dv_table_cl .noirrowSelected {\n    background-color: #39496D; }\n    .dv_table_cl .noirrowSelected .public_fixedDataTableCell_main {\n      background-color: #39496D; }\n  .dv_table_cl .moreHook {\n    text-decoration: underline;\n    cursor: pointer;\n    margin-left: 5px;\n    width: 50px;\n    display: inline-block; }\n  .dv_table_cl .dropDownActionWrapper {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    cursor: pointer;\n    display: inline-block; }\n    .dv_table_cl .dropDownActionWrapper .title {\n      position: absolute;\n      left: 20px;\n      top: 10px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      width: calc(100% - 60px); }\n    .dv_table_cl .dropDownActionWrapper .material-icons {\n      position: absolute;\n      right: 0;\n      top: 9px; }\n    .dv_table_cl .dropDownActionWrapper .open {\n      transform: rotate(-180deg);\n      transition: transform 150ms ease; }\n    .dv_table_cl .dropDownActionWrapper .actionDropDownAttachPoint {\n      position: absolute;\n      top: 36px;\n      left: 35px; }\n    .dv_table_cl .dropDownActionWrapper .dropdownSelectUnderline {\n      position: absolute;\n      top: 20px;\n      left: 20px;\n      width: calc(100% - 27px); }\n    .dv_table_cl .dropDownActionWrapper .dropDownContent {\n      color: red;\n      font-size: 40px; }\n    .dv_table_cl .dropDownActionWrapper .hidden {\n      display: none; }\n  .dv_table_cl .dropDownActionWrapperDisabled {\n    cursor: default;\n    opacity: 0.5; }\n  .dv_table_cl .iconCallBackCellWrapper {\n    cursor: pointer; }\n  .dv_table_cl .htmlListCellWrapper {\n    position: relative; }\n\n.mdl-checkbox.is-checked .mdl-checkbox__tick-outline {\n  background-color: #2196f3; }\n\n.public_fixedDataTableCell_cellContent .htmlCell {\n  padding-left: 38px !important; }\n  .public_fixedDataTableCell_cellContent .htmlCell .list_cell {\n    padding-left: 0 !important; }\n\n.public_fixedDataTableCell_cellContent .textTooltipCell .tooltipWrapper,\n.public_fixedDataTableCell_cellContent .htmlTooltipCell .tooltipWrapper {\n  padding-left: 27px !important; }\n\n.normaFilterlWrapper {\n  width: 300px;\n  text-align: right;\n  padding: 10px 10px 0; }\n\n.headerFilerNumber .headerFilerNumberFilters {\n  display: flex;\n  align-items: center; }\n  .headerFilerNumber .headerFilerNumberFilters input {\n    width: 110px; }\n\n.dateTimePickerWrapper {\n  width: 350px;\n  padding: 20px; }\n  .dateTimePickerWrapper .headerFilerDateTime .headerFilterButtons {\n    text-align: right;\n    position: relative; }\n    .dateTimePickerWrapper .headerFilerDateTime .headerFilterButtons i {\n      margin-left: 10px;\n      cursor: pointer; }\n    .dateTimePickerWrapper .headerFilerDateTime .headerFilterButtons .hidden {\n      display: none; }\n    .dateTimePickerWrapper .headerFilerDateTime .headerFilterButtons .error {\n      color: red;\n      font-size: 12px;\n      position: absolute;\n      left: 20px;\n      top: 5px; }\n  .dateTimePickerWrapper .headerFilerDateTime .headerDateTimeFilters {\n    display: flex; }\n    .dateTimePickerWrapper .headerFilerDateTime .headerDateTimeFilters .startDTWrapper {\n      width: 50%;\n      text-align: center; }\n    .dateTimePickerWrapper .headerFilerDateTime .headerDateTimeFilters .endDTWraper {\n      width: 50%;\n      text-align: center; }\n\n.headerFilterWrapper {\n  background-color: white;\n  border-radius: 2px;\n  position: relative;\n  box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.2), 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12) !important; }\n  .headerFilterWrapper .filterSearchWrapper {\n    width: 100%;\n    display: inline-flex;\n    align-items: center;\n    margin: 2px 0;\n    border-bottom: 1px solid;\n    transition: border-bottom ease-in-out 300ms; }\n    .headerFilterWrapper .filterSearchWrapper input {\n      width: calc(100% - 20px);\n      border: none;\n      outline: none;\n      font-size: 12px;\n      padding: 4px 0;\n      background-color: inherit; }\n      .headerFilterWrapper .filterSearchWrapper input::placeholder {\n        color: #9ea5b5; }\n    .headerFilterWrapper .filterSearchWrapper i {\n      font-size: 20px;\n      height: 22px; }\n    .headerFilterWrapper .filterSearchWrapper.focused {\n      border-bottom: 2px solid #0d91e9 !important; }\n  .headerFilterWrapper .headerListWrapper {\n    margin-top: -10px; }\n    .headerFilterWrapper .headerListWrapper .headerListTitle {\n      text-align: left;\n      margin-bottom: 10px; }\n  .headerFilterWrapper .headerFilterButtons {\n    margin-bottom: -30px;\n    position: relative; }\n    .headerFilterWrapper .headerFilterButtons i {\n      cursor: pointer;\n      font-size: 20px;\n      padding-top: 5px;\n      z-index: 2; }\n  .headerFilterWrapper .headerFilterOptions {\n    margin: 20px 0;\n    color: #0d91e9; }\n    .headerFilterWrapper .headerFilterOptions .text-button {\n      cursor: pointer; }\n  .headerFilterWrapper .checkBoxRowWrapper {\n    display: inline-block;\n    width: 100%;\n    cursor: pointer; }\n    .headerFilterWrapper .checkBoxRowWrapper label {\n      width: 33px;\n      float: left; }\n    .headerFilterWrapper .checkBoxRowWrapper .title {\n      float: left; }\n\n.public_fixedDataTable_main {\n  outline: none; }\n\nselect {\n  border-radius: 0;\n  width: 100px;\n  height: 20px; }\n\n.mdl-radio__outer-circle {\n  height: 20px !important;\n  width: 20px !important; }\n\n.mdl-radio__inner-circle {\n  height: 12px !important;\n  width: 12px !important; }\n\n.navWrapper {\n  position: absolute;\n  left: 0;\n  top: 0;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center; }\n  .navWrapper:hover {\n    background-color: #ddd; }\n    .navWrapper:hover i {\n      color: #fff; }\n\n.navWrapperSelected {\n  background-color: #ccc; }\n  .navWrapperSelected i {\n    color: #fff; }\n\n.autoEllipse {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  position: absolute;\n  left: 10px;\n  right: 0; }\n\n.headerTitle {\n  position: relative;\n  cursor: pointer;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding-left: 22px; }\n\n.clickableCell {\n  cursor: pointer;\n  color: #4DA5FE; }\n  .clickableCell:hover {\n    text-decoration: underline; }\n\n.textCell {\n  /* These are technically the same, but use both */\n  overflow-wrap: break-word;\n  word-wrap: break-word;\n  -ms-word-break: break-all;\n  /* This is the dangerous one in WebKit, as it breaks things wherever */\n  word-break: break-all;\n  /* Instead use this non-standard one: */\n  word-break: break-word;\n  /* Adds a hyphen where the word breaks, if supported (No Blink) */\n  -ms-hyphens: auto;\n  -moz-hyphens: auto;\n  -webkit-hyphens: auto;\n  hyphens: auto; }\n\n.htmlCell {\n  /* These are technically the same, but use both */\n  overflow-wrap: break-word;\n  word-wrap: break-word;\n  -ms-word-break: break-all;\n  /* This is the dangerous one in WebKit, as it breaks things wherever */\n  word-break: break-all;\n  /* Instead use this non-standard one: */\n  word-break: break-word;\n  /* Adds a hyphen where the word breaks, if supported (No Blink) */\n  -ms-hyphens: auto;\n  -moz-hyphens: auto;\n  -webkit-hyphens: auto;\n  hyphens: auto; }\n\n.tooltipWrapper {\n  cursor: pointer;\n  position: absolute;\n  height: 100%;\n  display: inline-block; }\n\n.htmlListToggler {\n  top: 5px;\n  right: -60px; }\n\n.toolTipDock {\n  position: relative;\n  top: 0;\n  left: 50%; }\n\n.toolTipDockHTML {\n  float: right; }\n\n.moreOptionDock {\n  position: relative;\n  top: 0;\n  left: 7px; }\n\n.moreOptionAttachPoint {\n  top: -6px;\n  left: 33px; }\n\n.tooltipAttachPoint {\n  position: absolute;\n  /* bottom: 0px; */\n  top: 20px; }\n\n.headerTooltipAttachPoint {\n  position: absolute;\n  left: calc(50% + 22px);\n  top: 25px; }\n\n.dvClPopUpWrapper {\n  background-color: #eee;\n  border: 1px solid #ddd;\n  margin-right: 20px;\n  min-width: 125px;\n  padding: 10px;\n  border-radius: 2px;\n  word-wrap: break-word;\n  display: inline-block;\n  color: black; }\n  .dvClPopUpWrapper .closeIcon {\n    position: absolute;\n    right: 34px;\n    top: 10px;\n    cursor: pointer;\n    font-size: 14px;\n    color: black; }\n  .dvClPopUpWrapper .optionItem {\n    padding: 0 20px 0 5px; }\n  .dvClPopUpWrapper ul {\n    padding: 0;\n    margin: 0;\n    max-height: 200px;\n    overflow: auto; }\n    .dvClPopUpWrapper ul li {\n      list-style: none;\n      color: black; }\n      .dvClPopUpWrapper ul li.selectable {\n        cursor: pointer; }\n        .dvClPopUpWrapper ul li.selectable:hover {\n          background-color: #ddd; }\n        .dvClPopUpWrapper ul li.selectable.selected {\n          background-color: #ccc; }\n\n.htmlList ul li {\n  margin-bottom: 10px; }\n\n.dvTetheredToolTip {\n  pointer-events: none;\n  max-width: 50%; }\n\n.dvTooltipText {\n  word-break: break-word; }\n\n.tether-element {\n  z-index: 10000; }\n\n.cfx {\n  clear: both; }\n\n.dvClPopUpWrapper,\n.dvClPopUpWrapper.htmlList {\n  box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.2), 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12) !important; }\n  .dvClPopUpWrapper ul li,\n  .dvClPopUpWrapper.htmlList ul li {\n    padding-left: 5px; }\n  .dvClPopUpWrapper.noir,\n  .dvClPopUpWrapper.htmlList.noir {\n    background: #151C2B;\n    border: none;\n    color: #F4F6F9; }\n    .dvClPopUpWrapper.noir .closeIcon,\n    .dvClPopUpWrapper.noir ul li,\n    .dvClPopUpWrapper.htmlList.noir .closeIcon,\n    .dvClPopUpWrapper.htmlList.noir ul li {\n      color: #F4F6F9; }\n    .dvClPopUpWrapper.noir ul li:hover,\n    .dvClPopUpWrapper.htmlList.noir ul li:hover {\n      background: rgba(255, 255, 255, 0.05); }\n    .dvClPopUpWrapper.noir ul li.selectable.selected,\n    .dvClPopUpWrapper.htmlList.noir ul li.selectable.selected {\n      background: #39496D; }\n    .dvClPopUpWrapper.noir .userSummaryReviewsPopup table tr:nth-child(even),\n    .dvClPopUpWrapper.htmlList.noir .userSummaryReviewsPopup table tr:nth-child(even) {\n      background: #243042; }\n  .dvClPopUpWrapper.light,\n  .dvClPopUpWrapper.htmlList.light {\n    background: white;\n    border: none;\n    color: #283548; }\n    .dvClPopUpWrapper.light .closeIcon,\n    .dvClPopUpWrapper.light ul li,\n    .dvClPopUpWrapper.htmlList.light .closeIcon,\n    .dvClPopUpWrapper.htmlList.light ul li {\n      color: #283548; }\n    .dvClPopUpWrapper.light ul li:hover,\n    .dvClPopUpWrapper.htmlList.light ul li:hover {\n      background: rgba(0, 0, 0, 0.05); }\n    .dvClPopUpWrapper.light ul li.selectable.selected,\n    .dvClPopUpWrapper.htmlList.light ul li.selectable.selected {\n      background: #d2d8e7; }\n    .dvClPopUpWrapper.light .userSummaryReviewsPopup table tr:nth-child(even),\n    .dvClPopUpWrapper.htmlList.light .userSummaryReviewsPopup table tr:nth-child(even) {\n      background: #f4f4f4; }\n\n.clickable {\n  cursor: pointer; }\n\n.moreOptionsWrapper i {\n  cursor: pointer; }\n\n.moreOptionAttachPoint {\n  position: relative; }\n\n.moreOptionsWrapperInner {\n  position: relative; }\n  .moreOptionsWrapperInner ul li {\n    color: #F4F6F9; }\n  .moreOptionsWrapperInner ul li:hover {\n    cursor: pointer; }\n  .moreOptionsWrapperInner .closeIcon {\n    position: absolute;\n    color: #d2d8e7;\n    top: 7px;\n    font-size: 15px;\n    right: 26px;\n    cursor: pointer; }\n  .moreOptionsWrapperInner .noir {\n    background: #151C2B;\n    border: none;\n    color: #F4F6F9;\n    box-shadow: 5px 5px 5px #000000; }\n    .moreOptionsWrapperInner .noir .closeIcon,\n    .moreOptionsWrapperInner .noir ul li {\n      color: #F4F6F9; }\n    .moreOptionsWrapperInner .noir .userSummaryReviewsPopup table tr:nth-child(even) {\n      background: #243042; }\n  .moreOptionsWrapperInner .light {\n    background: white;\n    border: none;\n    color: #283548;\n    box-shadow: 2px 2px 8px 4px #918b8b; }\n    .moreOptionsWrapperInner .light .closeIcon,\n    .moreOptionsWrapperInner .light ul li {\n      color: #283548; }\n    .moreOptionsWrapperInner .light .userSummaryReviewsPopup table tr:nth-child(even) {\n      background: #f4f4f4; }\n\n/*!\n * https://github.com/YouCanBookMe/react-datetime\n */\n.rdt {\n  position: relative; }\n\n.rdtPicker {\n  display: none;\n  position: absolute;\n  width: 250px;\n  padding: 4px;\n  margin-top: 1px;\n  z-index: 99999 !important;\n  background: #fff;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  border: 1px solid #f9f9f9; }\n\n.rdtOpen .rdtPicker {\n  display: block; }\n\n.rdtStatic .rdtPicker {\n  box-shadow: none;\n  position: static; }\n\n.rdtPicker .rdtTimeToggle {\n  text-align: center; }\n\n.rdtPicker table {\n  width: 100%;\n  margin: 0; }\n\n.rdtPicker td,\n.rdtPicker th {\n  text-align: center;\n  height: 28px; }\n\n.rdtPicker td {\n  cursor: pointer; }\n\n.rdtPicker .rdtTimeToggle:hover,\n.rdtPicker td.rdtDay:hover,\n.rdtPicker td.rdtHour:hover,\n.rdtPicker td.rdtMinute:hover,\n.rdtPicker td.rdtSecond:hover {\n  background: #eeeeee;\n  cursor: pointer; }\n\n.rdtPicker td.rdtNew,\n.rdtPicker td.rdtOld {\n  color: #999999; }\n\n.rdtPicker td.rdtToday {\n  position: relative; }\n\n.rdtPicker td.rdtToday:before {\n  content: '';\n  display: inline-block;\n  border-left: 7px solid transparent;\n  border-bottom: 7px solid #428bca;\n  border-top-color: rgba(0, 0, 0, 0.2);\n  position: absolute;\n  bottom: 4px;\n  right: 4px; }\n\n.rdtPicker td.rdtActive,\n.rdtPicker td.rdtActive:hover {\n  background-color: #428bca;\n  color: #fff;\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25); }\n\n.rdtPicker td.rdtActive.rdtToday:before {\n  border-bottom-color: #fff; }\n\n.rdtPicker td.rdtDisabled,\n.rdtPicker td.rdtDisabled:hover {\n  background: none;\n  color: #999999;\n  cursor: not-allowed; }\n\n.rdtPicker td span.rdtOld {\n  color: #999999; }\n\n.rdtPicker td span.rdtDisabled,\n.rdtPicker td span.rdtDisabled:hover {\n  background: none;\n  color: #999999;\n  cursor: not-allowed; }\n\n.rdtPicker th {\n  border-bottom: 1px solid #f9f9f9; }\n\n.rdtPicker .dow {\n  width: 14.2857%;\n  border-bottom: none;\n  cursor: default; }\n\n.rdtPicker th.rdtSwitch {\n  width: 100px; }\n\n.rdtPicker th.rdtNext,\n.rdtPicker th.rdtPrev {\n  font-size: 21px;\n  vertical-align: top; }\n\n.rdtNext span,\n.rdtPrev span {\n  display: block;\n  -webkit-touch-callout: none;\n  /* iOS Safari */\n  -webkit-user-select: none;\n  /* Chrome/Safari/Opera */\n  -khtml-user-select: none;\n  /* Konqueror */\n  -moz-user-select: none;\n  /* Firefox */\n  -ms-user-select: none;\n  /* Internet Explorer/Edge */\n  user-select: none; }\n\n.rdtPicker th.rdtDisabled,\n.rdtPicker th.rdtDisabled:hover {\n  background: none;\n  color: #999999;\n  cursor: not-allowed; }\n\n.rdtPicker thead tr:first-child th {\n  cursor: pointer; }\n\n.rdtPicker thead tr:first-child th:hover {\n  background: #eeeeee; }\n\n.rdtPicker tfoot {\n  border-top: 1px solid #f9f9f9; }\n\n.rdtPicker button {\n  border: none;\n  background: none;\n  cursor: pointer; }\n\n.rdtPicker button:hover {\n  background-color: #eee; }\n\n.rdtPicker thead button {\n  width: 100%;\n  height: 100%; }\n\ntd.rdtMonth,\ntd.rdtYear {\n  height: 50px;\n  width: 25%;\n  cursor: pointer; }\n\ntd.rdtMonth:hover,\ntd.rdtYear:hover {\n  background: #eee; }\n\n.rdtCounters {\n  display: inline-block; }\n\n.rdtCounters > div {\n  float: left; }\n\n.rdtCounter {\n  height: 100px; }\n\n.rdtCounter {\n  width: 40px; }\n\n.rdtCounterSeparator {\n  line-height: 100px; }\n\n.rdtCounter .rdtBtn {\n  height: 40%;\n  line-height: 40px;\n  cursor: pointer;\n  display: block;\n  -webkit-touch-callout: none;\n  /* iOS Safari */\n  -webkit-user-select: none;\n  /* Chrome/Safari/Opera */\n  -khtml-user-select: none;\n  /* Konqueror */\n  -moz-user-select: none;\n  /* Firefox */\n  -ms-user-select: none;\n  /* Internet Explorer/Edge */\n  user-select: none; }\n\n.rdtCounter .rdtBtn:hover {\n  background: #eee; }\n\n.rdtCounter .rdtCount {\n  height: 20%;\n  font-size: 1.2em; }\n\n.rdtMilli {\n  vertical-align: middle;\n  padding-left: 8px;\n  width: 48px; }\n\n.rdtMilli input {\n  width: 100%;\n  font-size: 1.2em;\n  margin-top: 37px; }\n\n.rdtTime td {\n  cursor: default; }\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-in": "./node_modules/moment/locale/en-in.js",
	"./en-in.js": "./node_modules/moment/locale/en-in.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./en-sg": "./node_modules/moment/locale/en-sg.js",
	"./en-sg.js": "./node_modules/moment/locale/en-sg.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fil": "./node_modules/moment/locale/fil.js",
	"./fil.js": "./node_modules/moment/locale/fil.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-deva": "./node_modules/moment/locale/gom-deva.js",
	"./gom-deva.js": "./node_modules/moment/locale/gom-deva.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./oc-lnc": "./node_modules/moment/locale/oc-lnc.js",
	"./oc-lnc.js": "./node_modules/moment/locale/oc-lnc.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tk": "./node_modules/moment/locale/tk.js",
	"./tk.js": "./node_modules/moment/locale/tk.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-mo": "./node_modules/moment/locale/zh-mo.js",
	"./zh-mo.js": "./node_modules/moment/locale/zh-mo.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./public/src/index.js":
/*!*****************************!*\
  !*** ./public/src/index.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_components_ant_demo_antDemoComp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/components/ant_demo/antDemoComp */ "./src/components/ant_demo/antDemoComp.js");
/* harmony import */ var _src_components_data_table_DataTableComp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../src/components/data_table/DataTableComp */ "./src/components/data_table/DataTableComp.js");


var comps = {
  AntDemoComponent: _src_components_ant_demo_antDemoComp__WEBPACK_IMPORTED_MODULE_0__["default"],
  DataTableComp: _src_components_data_table_DataTableComp__WEBPACK_IMPORTED_MODULE_1__["default"]
};
/* harmony default export */ __webpack_exports__["default"] = (comps);

/***/ }),

/***/ "./src/components/ant_demo/antDemoComp.js":
/*!************************************************!*\
  !*** ./src/components/ant_demo/antDemoComp.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var muicss_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! muicss/react */ "./node_modules/muicss/react.js");
/* harmony import */ var muicss_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(muicss_react__WEBPACK_IMPORTED_MODULE_1__);
 // Access all components from `muicss/react` module



var AntDemoComponent = function AntDemoComponent() {
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Appbar"], null), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Container"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Button"], {
    color: "primary"
  }, "button"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Checkbox"], {
    name: "inputA1",
    label: "Option one",
    defaultChecked: true
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Checkbox"], {
    name: "inputA2",
    label: "Option two"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Checkbox"], {
    name: "inputA3",
    label: "Option three is disabled",
    disabled: true
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Select"], {
    name: "input",
    label: "Select Example",
    defaultValue: "option2"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Option"], {
    value: "option1",
    label: "Option 1"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Option"], {
    value: "option2",
    label: "Option 2"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Option"], {
    value: "option3",
    label: "Option 3"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Option"], {
    value: "option4",
    label: "Option 4"
  }))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Dropdown"], {
    color: "primary",
    label: "Dropdown"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["DropdownItem"], {
    link: "#/link1"
  }, "Option 1"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["DropdownItem"], null, "Option 2"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["DropdownItem"], null, "Option 3"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["DropdownItem"], null, "Option 4"))));
};

/* harmony default export */ __webpack_exports__["default"] = (AntDemoComponent);

/***/ }),

/***/ "./src/components/common/csv_generator.js":
/*!************************************************!*\
  !*** ./src/components/common/csv_generator.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var stripHtml = function stripHtml(html) {
  var temporalDivElement = document.createElement("div");
  temporalDivElement.innerHTML = html;
  var pureText = temporalDivElement.textContent || temporalDivElement.innerText || "";
  var pureText = pureText.replace(/\"/g, "'");
  return pureText;
};

var CsvGenerator = function CsvGenerator(dataArrayObj, fileName, separator, addQuotes, downloadColumns) {
  if (downloadColumns) {
    this.titles = downloadColumns;
  } else {
    this.titles = Object.keys(dataArrayObj[0]);
  }

  this.dataArray = [];
  this.fileName = fileName;
  this.separator = separator || ',';
  this.addQuotes = !!addQuotes;

  if (this.addQuotes) {
    this.separator = '"' + this.separator + '"';
  }

  this.getDownloadLink = function () {
    var _this = this;

    var separator = this.separator;
    var addQuotes = this.addQuotes;
    var rows = [];
    var rowData; //adding title first

    var row = [];
    this.titles.forEach(function (title) {
      row.push(title);
    });
    rowData = row.join(separator);
    rows.push('"' + rowData + '"');
    dataArrayObj.forEach(function (dataItem) {
      row = []; //if passed is list of array, then no key exists

      if (Array.isArray(dataItem)) {
        dataItem.forEach(function (val) {
          row.push(val);
        });
      } else {
        _this.titles.forEach(function (title) {
          row.push(stripHtml(dataItem[title]));
        });
      }

      rowData = row.join(separator);

      if (rowData.length && addQuotes) {
        rows.push('"' + rowData + '"');
      }
    });
    var type = 'data:text/csv;charset=utf-8';
    var data = rows.join('\n');

    if (typeof btoa === 'function') {
      type += ';base64';
      data = btoa(unescape(encodeURIComponent(data)));
    } else {
      data = encodeURIComponent(data);
    }

    return this.downloadLink = this.downloadLink || type + ',' + data;
  };

  this.getLinkElement = function (linkText) {
    var downloadLink = this.getDownloadLink();
    var fileName = this.fileName;

    this.linkElement = this.linkElement || function () {
      var a = document.createElement('a');
      a.innerHTML = linkText || '';
      a.href = downloadLink;
      a.download = fileName;
      return a;
    }();

    return this.linkElement;
  }; // call with removeAfterDownload = true if you want the link to be removed after downloading


  this.download = function (removeAfterDownload) {
    var linkElement = this.getLinkElement();
    linkElement.style.display = 'none';
    document.body.appendChild(linkElement);
    linkElement.click();

    if (removeAfterDownload) {
      document.body.removeChild(linkElement);
    }
  };
};

/* harmony default export */ __webpack_exports__["default"] = (CsvGenerator);

/***/ }),

/***/ "./src/components/common/utils.js":
/*!****************************************!*\
  !*** ./src/components/common/utils.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Utils = /*#__PURE__*/function () {
  function Utils() {
    _classCallCheck(this, Utils);
  }

  _createClass(Utils, [{
    key: "_debounce",
    value: function _debounce(cb, timeout) {
      if (this.timeId) {
        //some event happened within timeout
        clearTimeout(this.timeId);
      }

      this.timeId = setTimeout(function () {
        cb();
      }, timeout);
    }
  }]);

  return Utils;
}();

var util = null;

function getUtil() {
  if (util == null) {
    util = new Utils();
  }

  return util;
}

/* harmony default export */ __webpack_exports__["default"] = (getUtil());

/***/ }),

/***/ "./src/components/data_table/DataTableComp.js":
/*!****************************************************!*\
  !*** ./src/components/data_table/DataTableComp.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _comps_TableComp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./comps/TableComp */ "./src/components/data_table/comps/TableComp.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var _services_table_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/table_service */ "./src/components/data_table/services/table_service.js");
/* harmony import */ var _entities_page__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./entities/page */ "./src/components/data_table/entities/page.js");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/utils */ "./src/components/common/utils.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_7__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }










__webpack_require__(/*! ./datatable.scss */ "./src/components/data_table/datatable.scss");

var DataTableComp = /*#__PURE__*/function (_Component) {
  _inherits(DataTableComp, _Component);

  var _super = _createSuper(DataTableComp);

  function DataTableComp(props) {
    var _this;

    _classCallCheck(this, DataTableComp);

    _this = _super.call(this, props);

    _this.bindingFunctions();

    _this.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]();
    _this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.props.appId);
    _this.jumpToRowIndex = 0;

    if (_this.props.config) {
      _this.store.setOriginalTableConfig(_this.service.genenerateTableConfig(_this.props.config));

      _this.store.setUpdatedTableConfig(_this.service.genenerateTableConfig(_this.props.config)); //create page obj in store


      _this.store.updatePage(new _entities_page__WEBPACK_IMPORTED_MODULE_5__["default"](_this.props.config));
    }

    if (_this.props.selectedRowKeys) {
      _this.store.setRowAllSelected(false);

      _this.props.selectedRowKeys.forEach(function (rowKey) {
        _this.store.toggleRowSelectedWithKey(rowKey);
      });
    }

    if (_this.props.unClickableCells) {
      _this.store.setUnClickableCells(_this.props.unClickableCells);
    }

    if (_this.props.data) {
      //set as original dataList
      _this.store.setUpdatedData(_this.props.data, true, false);
    } //next, we need to upgrade the columnType from text to list - this step is automatically done, and on column level
    //to gain performance


    _this.service.upgradeConfig(_this.store.getState().config, _this.store.getState().dataList);

    var cfg = _this.props.customConfig || null; //use previous saved totalDataFields to check if we need to reset customerConfig, if fields are not same, then ignore customer config here

    if (cfg && 'totalDataFields' in cfg && cfg['totalDataFields'] !== _this.store.getState().config.columns.length) {
      cfg['columnsOrder'] = [];

      var customerConfig = _this.service.genenerateCustomConfig(cfg);

      _this.store.setCustomConfig(customerConfig);
    } else {
      var _customerConfig = _this.service.genenerateCustomConfig(cfg);

      _this.store.setCustomConfig(_customerConfig); //next we need to update table config based on customerConfig


      _this.store.setUpdatedTableConfig(_this.service.mergeCustomerConfig(_this.store.getState().config, _customerConfig));
    } //if there are sorter/filter, we need to do here


    _this._sortFilterDatatNoDispatch(false); //we now need to get rowIndex based on selectedRow


    if (_this.props.selectedRowKeys) {
      _this.jumpToRowIndex = _this.service.findRowIndexFromRowKeyValue(_this.props.selectedRowKeys[0], _this.store.getState());
    }

    return _this;
  }

  _createClass(DataTableComp, [{
    key: "selectedRowKeysUpdated",
    value: function selectedRowKeysUpdated(selectedRowKeys) {
      var _this2 = this;

      this.store.setRowAllSelected(false);
      selectedRowKeys.forEach(function (rowKey) {
        _this2.store.toggleRowSelectedWithKey(rowKey);
      }); //enforce window resize event to make UI updates

      window.dispatchEvent(new Event('resize'));
    }
  }, {
    key: "setUnClickableCells",
    value: function setUnClickableCells(unClickableCells) {
      this.store.setUnClickableCells(unClickableCells);
    }
  }, {
    key: "setDownloadData",
    value: function setDownloadData(dataList) {
      this.store.setDownloadData(dataList);
    }
  }, {
    key: "totalTitleUpdated",
    value: function totalTitleUpdated(totalTitle) {
      var cfg = this.store.getState().config;
      cfg['totalTitle'] = totalTitle;
      this.store.setUpdatedTableConfig(cfg);
    } //below methods are externally callable, used to udpate data directly

  }, {
    key: "dataUpdated",
    value: function dataUpdated(updatedDataObj) {
      //we need to update with empty data first, so that all the dropdown/checkbox will be resetted
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedData({
        dataList: []
      }, true);
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedData(updatedDataObj, true); //if there are sorter/filter, we need to do here

      this._sortFilterDatatNoDispatch(true);

      this._scrollTo();
    }
  }, {
    key: "dataUpdatedSelectNoChange",
    value: function dataUpdatedSelectNoChange(updatedDataObj) {
      //we do not want to overwrite preivously selected row keys, just append data here
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedData({
        dataList: []
      }, true, false);
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedData(updatedDataObj, true, false); //if there are sorter/filter, we need to do here

      this._sortFilterDatatNoDispatch(false);

      this._scrollTo();
    }
  }, {
    key: "_scrollTo",
    value: function _scrollTo() {
      this.store.gotoScrollPosition(this.store.getState().scrollPosition[0], this.store.getState().scrollPosition[1]);
    }
  }, {
    key: "setTotalRecords",
    value: function setTotalRecords(total) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setTotalRecords(total);
    }
  }, {
    key: "_sortFilterDatatNoDispatch",
    value: function _sortFilterDatatNoDispatch() {
      var overWriteSelectedKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (!this.store.getState().config.global && (this.store.getState().customConfig.sorter || this.store.getState().customConfig.filters)) {
        var dataList = this.service.sortFilterData(this.store.getState());
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedData({
          dataList: dataList
        }, false, overWriteSelectedKeys);
      }
    }
  }, {
    key: "cellDataUpdate",
    value: function cellDataUpdate(rowKeyVal, columnKey, value) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedCellValue(rowKeyVal, columnKey, value);
    }
  }, {
    key: "dataAppended",
    value: function dataAppended(updatedDataObj) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setAppendedData(updatedDataObj);
    }
  }, {
    key: "updateIconDropDown",
    value: function updateIconDropDown(htmlContent) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).updateIconDropDownContent(htmlContent);
    }
  }, {
    key: "themeUpdate",
    value: function themeUpdate(theme) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setTheme(theme);
    }
  }, {
    key: "toggleAllRows",
    value: function toggleAllRows() {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).toggleAllRows();
    }
  }, {
    key: "resetPage",
    value: function resetPage() {
      this.store.getState().page.reset();
      var page = this.store.getState().page;
      page.reset();
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).updatePage(page);
    }
  }, {
    key: "bindingFunctions",
    value: function bindingFunctions() {
      this._updateWidth = this._updateWidth.bind(this);
      this._onCustomConfigUpdate = this._onCustomConfigUpdate.bind(this);
      this._onSelectedRowChanged = this._onSelectedRowChanged.bind(this);
      this._onRowActionSelected = this._onRowActionSelected.bind(this);
      this._onSortFilterData = this._onSortFilterData.bind(this);
      this._onSingleActionUpdated = this._onSingleActionUpdated.bind(this);
      this.componentWillUnmount = this.componentWillUnmount.bind(this);
      this._onSelectAllLevel = this._onSelectAllLevel.bind(this);
      this._onTableSearch = this._onTableSearch.bind(this);
      this._onCheckBoxChanged = this._onCheckBoxChanged.bind(this);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this3 = this;

      var win = window;

      if (win.addEventListener) {
        win.addEventListener("resize", this._updateWidth, false);
      } else if (win.attachEvent) {
        win.attachEvent("onresize", this._updateWidth);
      } else {
        win.onresize = this._updateWidth;
      }

      win.addEventListener('click', this._toggleClickOutside.bind(this), false); //emulate to have full width

      win.dispatchEvent(new Event("resize")); //now, let's set up listener to customConfigUpdate

      this.store.subscribeTo(this.store.CUSTOM_CONFIG_UPDATE, function (state) {
        _this3._onCustomConfigUpdate();
      });
      this.store.subscribeTo(this.store.ROW_ALL_SELECTED, function (state) {
        _this3._onSelectedRowChanged();
      });
      this.store.subscribeTo(this.store.ROW_SELECTED, function (state) {
        _this3._onSelectedRowChanged();
      });
      this.store.subscribeTo(this.store.SINGLE_ROW_SELECTED, function (state) {
        _this3._onSelectedRowChanged();
      });
      this.store.subscribeTo(this.store.CHECKBOX_CHECKED, function (state) {
        _this3._onCheckBoxChanged();
      });
      this.store.subscribeTo(this.store.RAW_ACTION_SELECTED, function (state) {
        _this3._onRowActionSelected();
      });
      this.store.subscribeTo(this.store.SORT_COLUMN, function (state) {
        _this3._onSortFilterData();
      });
      this.store.subscribeTo(this.store.FILTER_UPDATE, function (state) {
        _this3._onSortFilterData();
      });
      this.store.subscribeTo(this.store.UPDATE_THEME, function () {
        _this3.setState({
          config: _this3.store.getState().config
        });
      });
      this.store.subscribeTo(this.store.UPDATE_SINGLE_SELECTED_ACTION, function () {
        _this3._onSingleActionUpdated();
      });
      this.store.subscribeTo(this.store.SELECT_ALL_LEVEL, function () {
        _this3._onSelectAllLevel();
      });
      this.store.subscribeTo(this.store.TABLE_SEARCH, function (state) {
        _this3._onTableSearch(state.tableSearchedTerm);
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var win = window;

      if (win.removeEventListener) {
        win.removeEventListener("resize", this._updateWidth, false);
      } else if (win.detachEvent) {
        win.detachEvent("onresize", this._updateWidth);
      }

      this.store.resetAll();
    } //this is to close all the tether component automatically

  }, {
    key: "_toggleClickOutside",
    value: function _toggleClickOutside(event) {
      var excludedElement = document.querySelector(".dvClPopUpWrapper");
      var selectedElement = excludedElement ? excludedElement.contains(event.target) : false;

      if (!selectedElement) {
        this.closeAllPopUp();
        this.closeAllFilterPopUp();
      }
    }
  }, {
    key: "closeAllPopUp",
    value: function closeAllPopUp() {
      this.store.closeAllPopUp();
    }
  }, {
    key: "closeAllFilterPopUp",
    value: function closeAllFilterPopUp() {
      this.store.closeAllFilterPopUp();
    } //belows are callback methods

  }, {
    key: "_onCheckBoxChanged",
    value: function _onCheckBoxChanged() {
      if (this.props.onCheckBoxChanged) {
        this.props.onCheckBoxChanged(this.store.getState().checkedRowKeys);
      }
    }
  }, {
    key: "_onSelectAllLevel",
    value: function _onSelectAllLevel() {
      var _this4 = this;

      //needs debounce here as multiple events are triggered together.
      _common_utils__WEBPACK_IMPORTED_MODULE_6__["default"]._debounce(function () {
        if (_this4.props.onSelectAllLevel) {
          _this4.props.onSelectAllLevel(_this4.store.getState().selectAllLevel);
        }
      }, 100);
    }
  }, {
    key: "_onSingleActionUpdated",
    value: function _onSingleActionUpdated() {
      if (this.props.onSingleActionUpdated) {
        var params = this.store.passedBackParams;
        params["rowKeyVal"] = this.store.getState().rowkeyVal;
        params["oldValue"] = this.store.getState().oldValue;
        params["oldColumnKey"] = this.store.getState().oldColumnKey;
        this.props.onSingleActionUpdated(params);
      }
    }
  }, {
    key: "_onCustomConfigUpdate",
    value: function _onCustomConfigUpdate() {
      var _this5 = this;

      _common_utils__WEBPACK_IMPORTED_MODULE_6__["default"]._debounce(function () {
        if (_this5.props.onCustomConfigUpdate) {
          var cfg = _this5.store.getState().customConfig;

          cfg['totalDataFields'] = _this5.store.getState().config.columns.length;

          _this5.props.onCustomConfigUpdate(_this5.store.getState().customConfig);
        }
      }, 200);
    }
  }, {
    key: "_onSelectedRowChanged",
    value: function _onSelectedRowChanged() {
      if (this.props.onSelectedRowChanged) {
        this.props.onSelectedRowChanged(this.store.getState().selectedRowKeys);
      }
    }
  }, {
    key: "_onRowActionSelected",
    value: function _onRowActionSelected() {
      if (this.props.onRowActionSelected) {
        this.props.onRowActionSelected(this.store.getState().rowActionSelected);
      }
    }
  }, {
    key: "_onSortFilterData",
    value: function _onSortFilterData() {
      var _this6 = this;

      if (this.store.getState().config.global) {
        //first we need to reset page
        this.resetPage();

        if (this.props.onSortingFiltering) {
          this.props.onSortingFiltering(this.store.getState().customConfig.sorter, this.store.getState().customConfig.filters);
        }
      } else {
        var dataList = this.service.sortFilterData(this.store.getState());
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedData({
          dataList: []
        });
        setTimeout(function () {
          Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(_this6.props.appId).setUpdatedData({
            dataList: dataList
          });
        });
      } //finally, we need to call back customConfig update


      this._onCustomConfigUpdate();
    }
  }, {
    key: "_onTableSearch",
    value: function _onTableSearch(term) {
      var _this7 = this;

      if (this.store.getState().config.global) {//this is global level table search, not supportd now
      } else {
        var dataList = this.service.searchWholeData(this.store.getState(), term);
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedData({
          dataList: []
        });
        setTimeout(function () {
          Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(_this7.props.appId).setUpdatedData({
            dataList: dataList
          });
        });
      }
    }
  }, {
    key: "_updateWidth",
    value: function _updateWidth() {//S(this.props.appId).setNewTableWidth(this.refs.dvDatatable.offsetWidth);
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          dv_table_cl: true,
          noir: this.store.getState().config.theme == "noir",
          light: this.store.getState().config.theme == "light"
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_comps_TableComp__WEBPACK_IMPORTED_MODULE_1__["default"], _extends({}, this.props, {
        scrollToRow: this.jumpToRowIndex
      })));
    }
  }]);

  return DataTableComp;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);

DataTableComp.propTypes = {
  appId: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  config: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  data: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  customConfig: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  onCustomConfigUpdate: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onSelectedRowChanged: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onRowExpandedContent: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onNextPageHandler: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onGotoPage: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onRowActionSelected: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onSortingFiltering: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onNavigate: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onSingleActionUpdated: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onSelectAllLevel: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onCellClicked: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  selectedRowKeys: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.array,
  onListItemClick: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onGlobalDownload: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func
};
DataTableComp.defaultProps = {
  appId: "",
  config: null,
  data: null,
  customConfig: null,
  onCustomConfigUpdate: null,
  onSelectedRowChanged: null,
  onRowExpandedContent: null,
  onNextPageHandler: null,
  onGotoPage: null,
  onRowActionSelected: null,
  onSortingFiltering: null,
  onNavigate: null,
  onSingleActionUpdated: null,
  onSelectAllLevel: null,
  onCellClicked: null,
  selectedRowKeys: [],
  onListItemClick: null,
  onGlobalDownload: null
};
/* harmony default export */ __webpack_exports__["default"] = (DataTableComp);

/***/ }),

/***/ "./src/components/data_table/comps/BoundedTetherComp.js":
/*!**************************************************************!*\
  !*** ./src/components/data_table/comps/BoundedTetherComp.js ***!
  \**************************************************************/
/*! exports provided: BoundedTetherComp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoundedTetherComp", function() { return BoundedTetherComp; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_tether__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-tether */ "./node_modules/react-tether/lib/react-tether.js");
/* harmony import */ var react_tether__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_tether__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var BoundedTetherComp = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(BoundedTetherComp, _React$PureComponent);

  var _super = _createSuper(BoundedTetherComp);

  function BoundedTetherComp() {
    _classCallCheck(this, BoundedTetherComp);

    return _super.call(this);
  }

  _createClass(BoundedTetherComp, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.tableElement = document.querySelector(".".concat(this.props.appId));
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_tether__WEBPACK_IMPORTED_MODULE_1___default.a, _extends({}, this.props, {
        constraints: [{
          to: this.tableElement,
          attachment: 'target',
          pin: true
        }]
      }), this.props.children);
    }
  }]);

  return BoundedTetherComp;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent);

/***/ }),

/***/ "./src/components/data_table/comps/ClearFilterComp.js":
/*!************************************************************!*\
  !*** ./src/components/data_table/comps/ClearFilterComp.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../redux/store */ "./src/components/data_table/redux/store.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


 // import { Button } from "react-mdl";

var ClearFilterComp = /*#__PURE__*/function (_Component) {
  _inherits(ClearFilterComp, _Component);

  var _super = _createSuper(ClearFilterComp);

  function ClearFilterComp(props) {
    var _this;

    _classCallCheck(this, ClearFilterComp);

    _this = _super.call(this, props);
    _this.state = {
      showing: false
    };
    _this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.props.appId);
    _this.unsubsriberFilterColumn = _this.store.subscribeTo(_this.store.FILTER_UPDATE, function () {
      _this._setFilterCfg();
    });
    _this._setFilterCfg = _this._setFilterCfg.bind(_assertThisInitialized(_this));
    _this.reset = _this.reset.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ClearFilterComp, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubsriberFilterColumn();
    }
  }, {
    key: "_setFilterCfg",
    value: function _setFilterCfg() {
      var customConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_1__["default"])(this.props.appId).getState().customConfig;

      if (customConfig && customConfig.filters.length > 0) {
        this.setState({
          showing: true
        });
      } else {
        this.setState({
          showing: false
        });
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      this.store.resetFilter();
    }
  }, {
    key: "render",
    value: function render() {
      return this.state.showing && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, "Button");
    }
  }]);

  return ClearFilterComp;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]); // <Button className="clearFilterComp" onClick={this.reset}>
//     Reset Filters
// </Button>


/* harmony default export */ __webpack_exports__["default"] = (ClearFilterComp);

/***/ }),

/***/ "./src/components/data_table/comps/DownloadComp.js":
/*!*********************************************************!*\
  !*** ./src/components/data_table/comps/DownloadComp.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var _common_csv_generator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../common/csv_generator */ "./src/components/common/csv_generator.js");
/* harmony import */ var react_portal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-portal */ "./node_modules/react-portal/es/index.js");
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


 // import { Button } from "react-mdl";


 // import { RadioGroup, Radio, Textfield } from "react-mdl";

var DownloadOptionComp = /*#__PURE__*/function (_Component) {
  _inherits(DownloadOptionComp, _Component);

  var _super = _createSuper(DownloadOptionComp);

  function DownloadOptionComp() {
    var _this2;

    _classCallCheck(this, DownloadOptionComp);

    _this2 = _super.call(this);
    _this2.setOffset = _this2.setOffset.bind(_assertThisInitialized(_this2));
    _this2.close = _this2.close.bind(_assertThisInitialized(_this2));
    _this2.download = _this2.download.bind(_assertThisInitialized(_this2));
    _this2.selectRecords = _this2.selectRecords.bind(_assertThisInitialized(_this2));
    _this2.state = {
      pageSize: 0,
      selectedCounts: "current",
      offset: 0,
      offsetError: false
    };
    return _this2;
  }

  _createClass(DownloadOptionComp, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_1__["default"])(this.props.appId);
      var globalDownloadConfig = this.store.getState().globalDownloadConfig;

      if (globalDownloadConfig) {
        this.setState({
          offset: globalDownloadConfig.offset,
          selectedCounts: globalDownloadConfig.selectedCounts
        });
      }

      this.setState({
        pageSize: this.store.getState().page.pageSize
      });
    }
  }, {
    key: "close",
    value: function close() {
      this.props.onClosePopup();
    }
  }, {
    key: "download",
    value: function download() {
      if (!isNaN(this.state.selectedCounts) && this.state.offsetError) {} else {
        this.props.onConfirmDownload(this.state.selectedCounts, this.state.offset);
      }
    }
  }, {
    key: "selectRecords",
    value: function selectRecords(e) {
      if (isNaN(e.target.value)) {
        this.setState({
          offsetError: false,
          offset: 0
        });
      }

      this.setState({
        selectedCounts: e.target.value
      });
    }
  }, {
    key: "setOffset",
    value: function setOffset(e) {
      var reg = /^\d+$/;

      if (!reg.test(e.target.value) && e.target.value.trim() !== '') {
        this.setState({
          offsetError: true,
          offset: e.target.value
        });
      } else {
        this.setState({
          offsetError: false,
          offset: e.target.value
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "downloadContent"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "closeBtn",
        onClick: this.close
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "material-icons"
      }, "clear")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, "Download Options"), this.state.offsetError && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "offsetError"
      }, "Invalid Offset Number"), !this.state.offsetError && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, "Button"));
    }
  }]);

  return DownloadOptionComp;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]); // <RadioGroup container="ul" childContainer="li" name="otptionDownload" value={this.state.selectedCounts} onChange={this.selectRecords}>
//     <Radio value="current">Current</Radio>
//     <Radio value="100">100 Records</Radio>
//     <Radio value="200">200 Records</Radio>
//     <Radio value="300">300 Records</Radio>
//     <Radio value="400">400 Records</Radio>
//     <Radio value="500">500 Records</Radio>
//     <Radio value="1000">1000 Records</Radio>
//     <Radio value="3000">3000 Records</Radio>
//     <Radio value="5000">5000 Records</Radio>
//     <Radio value="10000">10000 Records</Radio>
//     <Radio value="20000">20000 Records</Radio>
// </RadioGroup>
// {!isNaN(this.state.selectedCounts) &&
//     <Textfield
//         value={this.state.offset}
//         onChange={this.setOffset}
//         label="Offset Records"
//         floatingLabel
//     />}
// <Button raised colored onClick={this.download}>
//     Confirm
//     </Button>


var DownloadComp = /*#__PURE__*/function (_Component2) {
  _inherits(DownloadComp, _Component2);

  var _super2 = _createSuper(DownloadComp);

  function DownloadComp() {
    var _this3;

    _classCallCheck(this, DownloadComp);

    _this3 = _super2.call(this);
    _this3.download = _this3.download.bind(_assertThisInitialized(_this3));
    _this3.getDownloadColumns = _this3.getDownloadColumns.bind(_assertThisInitialized(_this3));
    _this3.closePopup = _this3.closePopup.bind(_assertThisInitialized(_this3));
    _this3.confirmDownload = _this3.confirmDownload.bind(_assertThisInitialized(_this3));
    _this3._download = _this3._download.bind(_assertThisInitialized(_this3));
    _this3.state = {
      isOpen: false,
      downloading: false,
      btnTitle: 'Export'
    };
    return _this3;
  }

  _createClass(DownloadComp, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this4 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_1__["default"])(this.props.appId);

      if (this.store.getState().config.global) {
        var _this = this;

        this.unSubscribeDownload = this.store.subscribeTo(this.store.SET_DOWNLOAD_DATA, function () {
          _this4.setState({
            btnTitle: 'Export'
          });

          if (_this4.store.getState().downloadDataList.length > 0) {
            _this4._download(_this4.store.getState().downloadDataList);
          }
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.unSubscribeDownload) {
        this.unSubscribeDownload();
      }
    }
  }, {
    key: "getDownloadColumns",
    value: function getDownloadColumns() {
      var state = this.store.getState();
      var columns = state.customConfig.columnsOrder;

      if (!columns || columns.length == 0) {
        columns = Object.keys(state.dataList[0]);
      }

      var outputColumns = [];
      columns.map(function (columnKey, i) {
        if (state.config.columnToBeDownloaded(columnKey)) {
          outputColumns.push(columnKey);
        }
      });
      return outputColumns;
    }
  }, {
    key: "download",
    value: function download() {
      //if it is global retrieval, we need to let user select rows
      if (this.store.getState().config.global) {
        this.setState({
          isOpen: true
        });
      } else {
        this._download();
      }
    }
  }, {
    key: "_download",
    value: function _download(dataList) {
      if (!dataList) {
        dataList = this.store.getState().dataList;
      }

      var csvGenerator = new _common_csv_generator__WEBPACK_IMPORTED_MODULE_2__["default"](dataList, 'export.csv', ",", true, this.getDownloadColumns());
      csvGenerator.download(true);
    }
  }, {
    key: "closePopup",
    value: function closePopup() {
      this.setState({
        isOpen: false
      });
    }
  }, {
    key: "confirmDownload",
    value: function confirmDownload(records, offset) {
      //saving to store
      this.store.setGlobalDownloadConfig({
        offset: offset,
        selectedCounts: records
      });

      if (records === 'current') {
        //this is current data view records, download directly
        this._download();
      } else {
        if (this.props.onGlobalDownload) {
          this.setState({
            btnTitle: 'Exporting'
          });
          this.props.onGlobalDownload(records, offset);
        }
      }

      this.setState({
        isOpen: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "downloadBtnWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, "Button"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
        id: "hook_download_" + this.props.appId,
        className: "downlowOptionWrapper"
      }), this.state.isOpen && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_portal__WEBPACK_IMPORTED_MODULE_3__["Portal"], {
        node: document && document.getElementById("hook_download_" + this.props.appId)
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(DownloadOptionComp, _extends({}, this.props, {
        onClosePopup: this.closePopup,
        onConfirmDownload: this.confirmDownload
      }))));
    }
  }]);

  return DownloadComp;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]); // <Button className='downloadBtn' ripple raised colored onClick={this.download}>
//     <i className='material-icons'>arrow_downward</i>
//     {this.state.btnTitle}
// </Button>


/* harmony default export */ __webpack_exports__["default"] = (DownloadComp);

/***/ }),

/***/ "./src/components/data_table/comps/PaginatorComp.js":
/*!**********************************************************!*\
  !*** ./src/components/data_table/comps/PaginatorComp.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PaginatorComponent; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_2__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }





var PaginatorComponent = /*#__PURE__*/function (_Component) {
  _inherits(PaginatorComponent, _Component);

  var _super = _createSuper(PaginatorComponent);

  function PaginatorComponent() {
    var _this;

    _classCallCheck(this, PaginatorComponent);

    _this = _super.call(this);
    _this.state = {
      page: null,
      config: null
    };
    _this.first = _this.first.bind(_assertThisInitialized(_this));
    _this.pre = _this.pre.bind(_assertThisInitialized(_this));
    _this.next = _this.next.bind(_assertThisInitialized(_this));
    _this.last = _this.last.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(PaginatorComponent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_1__["default"])(this.props.appId);
      this.page = this.store.getState().page;
      this.setState({
        page: this.page,
        config: this.store.getState().config,
        totalRecords: this.store.getState().dataList.length
      });
      if (this.store.getState().config.enablePaginator) this.unSubscribePage = this.store.subscribeTo(this.store.PAGE_UPDATE, function () {
        _this2.page = _this2.store.getState().page;

        _this2.setState({
          page: _this2.page
        });
      });
      if (!this.store.getState().config.enablePaginator) this.unSubscribeFilter = this.store.subscribeTo(this.store.DATA_UPDATED, function (state) {
        _this2.setState({
          totalRecords: _this2.store.getState().dataList.length
        });
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.store.getState().config.enablePaginator) this.unSubscribePage();
      if (!this.store.getState().config.enablePaginator) this.unSubscribeFilter();
    }
  }, {
    key: "first",
    value: function first() {
      this.page.first();
      this.resetState();
    }
  }, {
    key: "pre",
    value: function pre() {
      this.page.pre();
      this.resetState();
    }
  }, {
    key: "next",
    value: function next() {
      this.page.next();
      this.resetState();
    }
  }, {
    key: "last",
    value: function last() {
      this.page.last();
      this.resetState();
    }
  }, {
    key: "resetState",
    value: function resetState() {
      this.setState({
        page: this.page
      });

      if ("onGotoPage" in this.props) {
        this.props.onGotoPage(this.page.currentPage);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var pageStr = '';

      if (this.state.page) {
        if (this.state.page.total > 0) {
          pageStr = this.state.page.total;
        } else {
          if (this.store.getState().dataList && this.store.getState().dataList.length > 0) {
            pageStr = 'many';
          } else {
            pageStr = '';
          }
        }
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "paginatorWrapper"
      }, this.state.page && this.state.config.enablePaginator && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", {
        onClick: this.first,
        className: classnames__WEBPACK_IMPORTED_MODULE_2___default()({
          inActive: !this.state.page.isFirstEnabled()
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "material-icons"
      }, "first_page")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", {
        onClick: this.pre,
        className: classnames__WEBPACK_IMPORTED_MODULE_2___default()({
          inActive: !this.state.page.isPreEnabled()
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "material-icons"
      }, "skip_previous")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "info"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "inner"
      }, this.state.page.getPageRange()[0], " - ", this.state.page.getPageRange()[1], pageStr === '' ? '' : ' of ', pageStr))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", {
        onClick: this.next,
        className: classnames__WEBPACK_IMPORTED_MODULE_2___default()({
          inActive: !this.state.page.isNextEnabled()
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "material-icons"
      }, "skip_next")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", {
        onClick: this.last,
        className: classnames__WEBPACK_IMPORTED_MODULE_2___default()({
          inActive: !this.state.page.isLastEnabled()
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "material-icons"
      }, "last_page"))), this.state.page && !this.state.config.totalTitle && !this.state.config.enablePaginator && !this.state.config.hideTotal && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "totalRecordsWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "innterPart"
      }, "Total Records: ", this.state.totalRecords)));
    }
  }]);

  return PaginatorComponent;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./src/components/data_table/comps/SelectAllIndicatorComp.js":
/*!*******************************************************************!*\
  !*** ./src/components/data_table/comps/SelectAllIndicatorComp.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SelectAllIndicatorComponent; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _services_table_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/table_service */ "./src/components/data_table/services/table_service.js");
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../redux/store */ "./src/components/data_table/redux/store.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }





var SelectAllIndicatorComponent = /*#__PURE__*/function (_Component) {
  _inherits(SelectAllIndicatorComponent, _Component);

  var _super = _createSuper(SelectAllIndicatorComponent);

  function SelectAllIndicatorComponent() {
    var _this;

    _classCallCheck(this, SelectAllIndicatorComponent);

    _this = _super.call(this);
    _this.state = {
      selectedRowsCount: 0,
      selectLevel: 0 //0,1,2,3 - 0:noSelection, 1:notAll, 2:pageLevelAll, 3:globalLevelAll

    };
    _this.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_1__["default"]();
    _this._setSelected = _this._setSelected.bind(_assertThisInitialized(_this));
    _this.toggleSelectAll = _this.toggleSelectAll.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(SelectAllIndicatorComponent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unsubsriberAllSelected = this.store.subscribeTo(this.store.ROW_ALL_SELECTED, function () {
        _this2._setSelected();
      });
      this.unsubsriberSingleSelected = this.store.subscribeTo(this.store.ROW_SELECTED, function () {
        _this2._setSelected();
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubsriberAllSelected();
      this.unsubsriberSingleSelected();
    }
  }, {
    key: "_setSelected",
    value: function _setSelected() {
      var state = this.store.getState();
      var isAllRowSelected = this.service.isAllRowSelected(state.dataList, state.config, state.selectedRowKeys);
      var level = 0;

      if (isAllRowSelected) {
        level = state.selectedRowKeys.length === state.page.total ? 3 : 2;
      } else if (state.selectedRowKeys.length > 0) {
        level = 1;
      }

      this.setState({
        selectLevel: level,
        selectedRowsCount: state.selectedRowKeys.length
      });
      this.store.setSelectAllLevel(level);
    }
  }, {
    key: "toggleSelectAll",
    value: function toggleSelectAll() {
      var _this3 = this;

      this.setState({
        selectLevel: this.state.selectLevel === 3 ? 0 : 3
      });
      setTimeout(function () {
        if (_this3.state.selectLevel === 0) {
          _this3.store.setRowAllSelected(false);

          _this3.store.toggleRowSelected(-1);

          window.dispatchEvent(new Event("resize"));
        }

        _this3.store.setSelectAllLevel(_this3.state.selectLevel);
      }, 0);
    }
  }, {
    key: "render",
    value: function render() {
      var comp = null;

      if (this.state.selectLevel === 1) {
        comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, this.state.selectedRowsCount, " records selected.");
      } else if (this.state.selectLevel === 2) {
        comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, "All ", this.state.selectedRowsCount, " records on this page are selected.", /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
          className: "spanAllIndicator",
          onClick: this.toggleSelectAll
        }, "Select all ", this.store.getState().page.total, " records"));
      } else if (this.state.selectLevel === 3) {
        comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, "All ", this.store.getState().page.total, " records are selected.", /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
          className: "spanAllIndicator",
          onClick: this.toggleSelectAll
        }, "Clear selection"));
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "selectAllWrapper"
      }, comp);
    }
  }]);

  return SelectAllIndicatorComponent;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./src/components/data_table/comps/SettingComp.js":
/*!********************************************************!*\
  !*** ./src/components/data_table/comps/SettingComp.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_portal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-portal */ "./node_modules/react-portal/es/index.js");
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var _services_table_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/table_service */ "./src/components/data_table/services/table_service.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var jquery_ui_ui_widgets_sortable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jquery-ui/ui/widgets/sortable */ "./node_modules/jquery-ui/ui/widgets/sortable.js");
/* harmony import */ var jquery_ui_ui_widgets_sortable__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(jquery_ui_ui_widgets_sortable__WEBPACK_IMPORTED_MODULE_6__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }







 // import { Checkbox } from "react-mdl";
// import { Button } from "react-mdl";

var SettingComponentColumnItem = /*#__PURE__*/function (_Component) {
  _inherits(SettingComponentColumnItem, _Component);

  var _super = _createSuper(SettingComponentColumnItem);

  function SettingComponentColumnItem() {
    var _this2;

    _classCallCheck(this, SettingComponentColumnItem);

    _this2 = _super.call(this);
    _this2.onChange = _this2.onChange.bind(_assertThisInitialized(_this2));
    _this2.state = {
      checked: true,
      title: ''
    };
    _this2.allSelected = _this2.allSelected.bind(_assertThisInitialized(_this2));
    _this2.defaultSelected = _this2.defaultSelected.bind(_assertThisInitialized(_this2));
    return _this2;
  }

  _createClass(SettingComponentColumnItem, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this3 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);

      if (Object.keys(this.store.getState().columnHiddenTmp).length > 0) {
        this.setState({
          checked: !this.store.getState().columnHiddenTmp[this.props.column],
          title: this.store.getState().config.getColumnConfig(this.props.column).title
        });
      } else {
        this.setState({
          checked: !this.store.getState().config.columnHidden(this.props.column),
          title: this.store.getState().config.getColumnConfig(this.props.column).title
        });
      }

      this.subscriber_all = this.store.subscribeTo(this.store.SELECT_ALL_COLUMNS, function (open) {
        _this3.allSelected(open);
      });
      this.subscriber_default = this.store.subscribeTo(this.store.SELECT_DEFAULT_COLUMNS, function (open) {
        _this3.defaultSelected(open);
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.subscriber_all();
      this.subscriber_default();
    }
  }, {
    key: "allSelected",
    value: function allSelected(open) {
      if (open) {
        this.setState({
          checked: true
        });
      } else {
        this.setState({
          checked: false
        });
      }

      this.props.onItemChecked(this.props.column, !open);
    }
  }, {
    key: "defaultSelected",
    value: function defaultSelected(open) {
      var _this4 = this;

      var defaultColumns = this.store.getState().defaultColumns;

      if (defaultColumns.includes(this.props.column) && open) {
        this.setState({
          checked: true
        });
      } else {
        this.setState({
          checked: false
        });
      }

      setTimeout(function () {
        _this4.props.onItemChecked(_this4.props.column, !_this4.state.checked);
      }, 0);
    }
  }, {
    key: "onChange",
    value: function onChange(e) {
      this.setState({
        checked: e.target.checked
      });
      this.props.onItemChecked(this.props.column, !e.target.checked);
    }
  }, {
    key: "render",
    value: function render() {
      // <span className='title autoEllipse'>{this.props.column}</span>
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "columnItem"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
        className: "checkboxWrapper reorder"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, "checkbox"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
        className: "checkboxLable autoEllipse",
        title: this.state.title
      }, this.state.title)));
    }
  }]);

  return SettingComponentColumnItem;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]); // <Checkbox
//     key={this.props.rowIndex}
//     checked={this.state.checked}
//     onChange={this.onChange}
// />


var SettingComponentColumns = /*#__PURE__*/function (_Component2) {
  _inherits(SettingComponentColumns, _Component2);

  var _super2 = _createSuper(SettingComponentColumns);

  function SettingComponentColumns() {
    var _this5;

    _classCallCheck(this, SettingComponentColumns);

    _this5 = _super2.call(this);
    _this5.state = {
      columnsOrder: []
    };
    _this5.onItemChecked = _this5.onItemChecked.bind(_assertThisInitialized(_this5));
    _this5.saveColumns = _this5.saveColumns.bind(_assertThisInitialized(_this5));
    _this5.onChangeAll = _this5.onChangeAll.bind(_assertThisInitialized(_this5));
    _this5.onChangeDefault = _this5.onChangeDefault.bind(_assertThisInitialized(_this5));
    _this5.updatedColumnStatus = {};
    _this5.columnOrderChanged = false;
    return _this5;
  }

  _createClass(SettingComponentColumns, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this6 = this;

      this.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId); // if there are other popups open, close them

      this.store.closeAllPopUp();
      this.store.closeAllFilterPopUp(); //we do not want to dynamically chagne it, so having to use clone here

      this.setState({
        columnsOrder: JSON.parse(JSON.stringify(this.service.getNoneStickyColumnsOrderFromState(this.store.getState())))
      });
      this.unsubscriberCloseAllPopUp = this.store.subscribeTo(this.store.CLOSE_ALL_POPUP, function () {
        _this6.props.onClose();
      });

      var _this = this;

      jquery__WEBPACK_IMPORTED_MODULE_5___default()(this.refs.columsWrapper).sortable({
        startPos: null,
        endPos: null,
        handle: ".reorder",
        start: function start(event, ui) {
          this.startPos = ui.item.index();
        },
        stop: function stop(event, ui) {
          this.endPos = ui.item.index();
          var comps = _this.state.columnsOrder;
          comps.splice(this.endPos, 0, comps.splice(this.startPos, 1)[0]);
          _this.columnOrderChanged = true; //now let's updaste parent for updating
          //_this.props.onOrderChanged(comps);

          _this.setState({
            columnsOrder: comps
          });
        }
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriberCloseAllPopUp();
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setColumnTempHiddenStatus({});
    }
  }, {
    key: "onItemChecked",
    value: function onItemChecked(key, checked) {
      this.updatedColumnStatus[key] = checked;
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setColumnTempHiddenStatus(this.updatedColumnStatus);
    }
  }, {
    key: "saveColumns",
    value: function saveColumns() {
      if (this.columnOrderChanged) {
        this.props.onOrderChanged(this.service.restoreStickyColumnsFromState(this.store.getState(), this.state.columnsOrder));
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setColumnsHidden(this.updatedColumnStatus);
      } else {
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setColumnsHidden(this.updatedColumnStatus);
      }

      this.props.onClose();
    }
  }, {
    key: "onChangeAll",
    value: function onChangeAll(e) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).triggerSelectAllColumns(e.target.checked);
    }
  }, {
    key: "onChangeDefault",
    value: function onChangeDefault(e) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).triggerDefaultColumns(e.target.checked);
    }
  }, {
    key: "render",
    value: function render() {
      var _this7 = this;

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "dropdownContent",
        onClick: function onClick(e) {
          return e.stopPropagation();
        }
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "controllerWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "columnTitle"
      }, "Select Columns"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, "Part 1")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "columsWrapper",
        ref: "columsWrapper"
      }, this.state.columnsOrder.map(function (column, key) {
        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(SettingComponentColumnItem, _extends({
          onItemChecked: _this7.onItemChecked,
          key: key + Math.random(),
          column: column
        }, _this7.props));
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "buttonsWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, "part 2")));
    }
  }]);

  return SettingComponentColumns;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]); // <ul>
//     <li>
//         <Checkbox label={"Default"} onChange={this.onChangeDefault} />
//     </li>
//     <li>
//         <Checkbox label={"All"} onChange={this.onChangeAll} />
//     </li>
// </ul>
//
// <Button
//     className="closeBtn"
//     onClick={e => {
//         this.props.onClose();
//     }}>
//     <i className="material-icons">clear</i>
// </Button>
// <Button
//     ripple
//     onClick={e => {
//         this.props.onClose();
//     }}>
//     Cancel
// </Button>
// <Button raised colored onClick={this.saveColumns}>
//     Save
// </Button>


var SettingComponent = /*#__PURE__*/function (_Component3) {
  _inherits(SettingComponent, _Component3);

  var _super3 = _createSuper(SettingComponent);

  function SettingComponent() {
    var _this8;

    _classCallCheck(this, SettingComponent);

    _this8 = _super3.call(this);
    _this8.state = {
      isOpen: false
    };
    _this8.toggleDropDown = _this8.toggleDropDown.bind(_assertThisInitialized(_this8));
    return _this8;
  }

  _createClass(SettingComponent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this = this;
    }
  }, {
    key: "toggleDropDown",
    value: function toggleDropDown(event) {
      if (event) {
        event.stopPropagation();
      }

      this.setState({
        isOpen: !this.state.isOpen
      });
    }
  }, {
    key: "_toggleClickOutside",
    value: function _toggleClickOutside(event) {
      var excludedElement = document.querySelector(".dropdownWrapper");
      var excludedElement1 = document.querySelector(".wrapper");
      var selectedElement1 = excludedElement1 ? excludedElement1.contains(event.target) : false;
      var selectedElement = excludedElement ? excludedElement.contains(event.target) : false;

      if (!selectedElement1 && !selectedElement) {
        if (this.state.isOpen) this.toggleDropDown();
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "wrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, "buttons"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
        id: "hook_" + this.props.appId,
        className: "dropdownWrapper"
      }), this.state.isOpen && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_portal__WEBPACK_IMPORTED_MODULE_1__["Portal"], {
        node: document && document.getElementById("hook_" + this.props.appId)
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(SettingComponentColumns, _extends({}, this.props, {
        onClose: this.toggleDropDown
      }))));
    }
  }]);

  return SettingComponent;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]); // <Button className='editColumnsButton' ripple raised primary onClick={this.toggleDropDown}>
//     Edit Columns
// </Button>


/* harmony default export */ __webpack_exports__["default"] = (SettingComponent);

/***/ }),

/***/ "./src/components/data_table/comps/TableComp.js":
/*!******************************************************!*\
  !*** ./src/components/data_table/comps/TableComp.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fixed-data-table-2 */ "./node_modules/fixed-data-table-2/main.js");
/* harmony import */ var fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var _cells_cells__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cells/cells */ "./src/components/data_table/comps/cells/cells.js");
/* harmony import */ var _cells_headercell__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cells/headercell */ "./src/components/data_table/comps/cells/headercell.js");
/* harmony import */ var _SettingComp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SettingComp */ "./src/components/data_table/comps/SettingComp.js");
/* harmony import */ var _PaginatorComp__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./PaginatorComp */ "./src/components/data_table/comps/PaginatorComp.js");
/* harmony import */ var _services_table_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../services/table_service */ "./src/components/data_table/services/table_service.js");
/* harmony import */ var _entities_column__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../entities/column */ "./src/components/data_table/entities/column.js");
/* harmony import */ var _SelectAllIndicatorComp__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./SelectAllIndicatorComp */ "./src/components/data_table/comps/SelectAllIndicatorComp.js");
/* harmony import */ var _ClearFilterComp__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ClearFilterComp */ "./src/components/data_table/comps/ClearFilterComp.js");
/* harmony import */ var _TableSearchComp__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./TableSearchComp */ "./src/components/data_table/comps/TableSearchComp.js");
/* harmony import */ var _DownloadComp__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./DownloadComp */ "./src/components/data_table/comps/DownloadComp.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
















__webpack_require__(/*! fixed-data-table-2/dist/fixed-data-table.css */ "./node_modules/fixed-data-table-2/dist/fixed-data-table.css");

__webpack_require__(/*! ../datatable.scss */ "./src/components/data_table/datatable.scss");

var TableComp = /*#__PURE__*/function (_Component) {
  _inherits(TableComp, _Component);

  var _super = _createSuper(TableComp);

  function TableComp(props) {
    var _this;

    _classCallCheck(this, TableComp);

    _this = _super.call(this, props);

    _this.bindingFunctions();

    _this.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_8__["default"]();
    _this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.props.appId);
    _this.tableConfig = _this.store.getState().config;
    _this.page = _this.store.getState().page;
    _this.autoScrolling = false;
    var columnWidths = {};

    _this.tableConfig.columns.forEach(function (column) {
      columnWidths[column.key] = column.width;
    });

    _this.state = {
      dataList: _this.store.getState().dataList,
      columns: _this.tableConfig.columns,
      width: _this.tableConfig.width,
      height: _this.tableConfig.height,
      columnWidths: columnWidths,
      config: _this.tableConfig,
      //the default order should be based on presaved vs default
      columnsOrder: _this.service.getColumnsOrderFromState(_this.store.getState()),
      collapsedRows: new Set(),
      expandedRows: new Set(),
      selectAllLevel: 0,
      scrollToRow: _this.props.scrollToRow,
      scrollTop: _this._getScrollTopValue(_this.props.scrollToRow)
    };
    _this.unSubscribeConfig = _this.store.subscribeTo(_this.store.CONFIG_UPDATE, function () {
      var stateObj = {};
      stateObj["config"] = _this.store.getState().config;

      _this.setState(stateObj);
    });
    _this.unSubscribeData = _this.store.subscribeTo(_this.store.DATA_UPDATED, function () {
      var stateObj = {};
      stateObj["dataList"] = _this.store.getState().dataList;

      _this.setState(stateObj);
    });
    _this.unSubscribeCellData = _this.store.subscribeTo(_this.store.CELL_DATA_UPDATED, function () {
      var stateObj = {};
      stateObj["dataList"] = _this.store.getState().dataList;

      _this.setState(stateObj);
    });
    _this.unSubscribeResizing = _this.store.subscribeTo(_this.store.RESIZING, function () {
      var stateObj = {};
      stateObj["width"] = _this.store.getState().width;

      _this.setState(stateObj);
    });
    _this.unSubscribeColumnHidden = _this.store.subscribeTo(_this.store.SET_COLUMNS_HIDDEN, function () {
      var stateObj = {};
      stateObj["config"] = _this.store.getState().config;

      _this.setState(stateObj);

      _this._customerConfigUpdate(null);
    });
    _this.unSubscriberSelectAllLevel = _this.store.subscribeTo(_this.store.SELECT_ALL_LEVEL, function () {
      _this._onSelectAllLevel();
    });
    _this.unSubscribeScrollTo = _this.store.subscribeTo(_this.store.GOTO_SCROLL_POSITION, function () {
      _this.autoScrolling = true;
      setTimeout(function () {
        _this.autoScrolling = false;
      }, 2000);

      _this._scrollTo();
    });
    return _this;
  }

  _createClass(TableComp, [{
    key: "_getScrollTopValue",
    value: function _getScrollTopValue(rowIndex) {
      var value = rowIndex * this.store.getState().config.rowHeight;
      return value;
    } //we must unsubscribe to avoid memory leak here

  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unSubscribeData();
      this.unSubscribeResizing();
      this.unSubscribeColumnHidden();
      this.unSubscribeThemeUpdate();
      this.unSubscribeCellData();
      this.unSubscriberSelectAllLevel();
      this.unSubscribeConfig();
      this.unSubscribeScrollTo();
    }
  }, {
    key: "bindingFunctions",
    value: function bindingFunctions() {
      this._onColumnResizeEndCallback = this._onColumnResizeEndCallback.bind(this);
      this._onColumnReorderEndCallback = this._onColumnReorderEndCallback.bind(this);
      this._handleCollapseClick = this._handleCollapseClick.bind(this);
      this._subRowHeightGetter = this._subRowHeightGetter.bind(this);
      this._rowExpandedGetter = this._rowExpandedGetter.bind(this);
      this._onScrollEndCallBack = this._onScrollEndCallBack.bind(this);
      this.onOrderChanged = this.onOrderChanged.bind(this);
      this._onRowClick = this._onRowClick.bind(this);
      this._rowClassNameGetter = this._rowClassNameGetter.bind(this);
      this.rowHeightGetter = this.rowHeightGetter.bind(this);
      this._handleCollapseAllClick = this._handleCollapseAllClick.bind(this);
      this._onSelectAllLevel = this._onSelectAllLevel.bind(this);
      this._scrollTo = this._scrollTo.bind(this);
    }
  }, {
    key: "_scrollTo",
    value: function _scrollTo() {
      this.setState({
        scrollTop: this._getScrollTopValue(this.store.getState().scrollPosition[1])
      });
    }
  }, {
    key: "_onSelectAllLevel",
    value: function _onSelectAllLevel() {
      this.setState({
        selectAllLevel: this.store.getState().selectAllLevel
      });
    }
  }, {
    key: "_customerConfigUpdate",
    value: function _customerConfigUpdate(newColumnOrder) {
      //now, we need to dispatch this so that it can be saved in backend db
      var customConfig = this.store.getState().customConfig; //set new columnsOrder

      if (newColumnOrder) customConfig.setColumnsOrder(newColumnOrder); //set hiddenColumns

      customConfig.setHiddenColumns(this.store.getState().config.getHiddenColumnKeys()); //now dispatchEvent

      this.store.setCustomConfig(customConfig);
    }
  }, {
    key: "_onColumnResizeEndCallback",
    value: function _onColumnResizeEndCallback(newColumnWidth, columnKey) {
      var columnWidths = this.state.columnWidths;
      columnWidths[columnKey] = newColumnWidth;
      this.setState({
        columnWidths: columnWidths
      });
      var customConfig = this.store.getState().customConfig;
      customConfig.setColumnWidths(columnWidths); //now dispatchEvent

      this.store.setCustomConfig(customConfig);
    }
  }, {
    key: "onOrderChanged",
    value: function onOrderChanged(newOrder) {
      this.setState({
        columnsOrder: newOrder
      }); //we need to new update customer Config and dispatch event!

      this._customerConfigUpdate(newOrder);
    }
  }, {
    key: "_onColumnReorderEndCallback",
    value: function _onColumnReorderEndCallback(event) {
      var newColsOrder = this.service.getNewColumnOrder(this.state.columnsOrder, event.reorderColumn, event.columnAfter);
      this.onOrderChanged(newColsOrder);
    }
  }, {
    key: "_handleCollapseClick",
    value: function _handleCollapseClick(rowIndex) {
      var collapsedRows = this.state.collapsedRows;
      var shallowCopyOfCollapsedRows = new Set(_toConsumableArray(collapsedRows));
      var scrollToRow = rowIndex;

      if (shallowCopyOfCollapsedRows.has(rowIndex)) {
        shallowCopyOfCollapsedRows["delete"](rowIndex);
      } else {
        shallowCopyOfCollapsedRows.add(rowIndex);
      }

      this.setState({
        collapsedRows: shallowCopyOfCollapsedRows
      });
    }
  }, {
    key: "_subRowHeightGetter",
    value: function _subRowHeightGetter(index) {
      //this is for subRow only - collapsedRow
      if (this.state.config.rowCollapseable) return this.state.collapsedRows.has(index) ? this.state.config.collapseRowHeight : 0;else return 0;
    }
  }, {
    key: "_rowExpandedGetter",
    value: function _rowExpandedGetter(_ref) {
      var rowIndex = _ref.rowIndex,
          width = _ref.width,
          height = _ref.height;

      if (this.state.config.rowCollapseable) {
        //only for collapsed row, not for expanded rows
        if (!this.state.collapsedRows.has(rowIndex)) {
          return null;
        }

        if (this.props.onRowExpandedContent) {
          return this.props.onRowExpandedContent(rowIndex, this.service.getRowKeyValFromIndex(rowIndex, this.store.getState()), width, height);
        } else {
          return null;
        }
      } else {
        return null;
      }
    }
  }, {
    key: "rowHeightGetter",
    value: function rowHeightGetter(rowIndex) {
      if (this.state.config.rowExpandable && this.state.collapsedRows.has(rowIndex)) {
        //here we need to calculate the highest cells
        return this.service.getRowActualHeight(this.state.columnWidths, rowIndex, this.state.dataList, this.state.config.rowHeight, this.state.config);
      } else {
        return this.state.config.rowHeight;
      }
    }
  }, {
    key: "_onScrollEndCallBack",
    value: function _onScrollEndCallBack(scrollX, scrollY) {
      if (this.autoScrolling) return;

      if (!this.state.config.enablePaginator) {
        var totalHeight = this.state.config.rowHeight * (this.state.dataList.length - 1);

        if (scrollY + this.state.config.height >= totalHeight && this.props.onNextPageHandler) {
          //now update page config
          this.page.next(); //if we have all the data in dataList, no need to trigger anymore

          if ("onNextPageHandler" in this.props && this.state.dataList.length < this.page.total) {
            this.props.onNextPageHandler(this.page.currentPage);
          }
        }
      } //here, we are converting scrollY to selectedRowIndex, so as to re-use the scrollToRow controller


      this.store.scrollPositionUpdated(scrollX, scrollY / this.state.config.rowHeight);
    }
  }, {
    key: "_onRowClick",
    value: function _onRowClick(e, rowIndex) {
      //when decoupling checkbox and row, we always enforce single row select
      if (this.state.config.deCoupleRowSelectAndCheckbox) {
        this.store.toggleSingleRowSelected(rowIndex);
      } else {
        //here, we must prevent double trigger, as checkBox click also dispatch events
        var targetCheckbox = e.target.className.includes("mdl-checkbox");
        var targetRadio = e.target.className.includes("mdl-radio");

        if (this.state.config.enableCheckBox && !targetCheckbox || this.state.config.enableRadioButton && !targetRadio) {
          this.store.toggleRowSelected(rowIndex);
        } else if (this.state.config.singleRowToggleable && !targetCheckbox && !targetRadio) {
          this.store.toggleSingleRowSelected(rowIndex);
        }
      }

      setTimeout(function () {
        window.dispatchEvent(new Event("resize"));
      }, 0);
    }
  }, {
    key: "_rowClassNameGetter",
    value: function _rowClassNameGetter(rowIndex) {
      var rowClassNames = [];

      if ('onRowClassNameGetter' in this.props) {
        //here,we need to pass back key column value, not rowIndex, as it is always changing
        rowClassNames.push(this.props.onRowClassNameGetter(this.service.getRowKeyValFromIndex(rowIndex, this.store.getState())));
      }

      if (this.state.config.singleRowToggleable || this.state.config.enableCheckBox || this.state.config.enableRadioButton) {
        if (this.service.isRowSelected(rowIndex, this.store.getState())) {
          rowClassNames.push((this.state.config.theme ? this.state.config.theme : "") + "rowSelected");
        }
      }

      return rowClassNames.join(' ');
    }
  }, {
    key: "_handleCollapseAllClick",
    value: function _handleCollapseAllClick(open) {
      var rowIndexes = new Set();
      if (open) for (var i = 0; i < this.state.dataList.length; i++) {
        rowIndexes.add(i);
      }
      this.setState({
        collapsedRows: rowIndexes
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var checkColumn = null;
      var collapseColumn = null;
      var expandableColumn = null;
      var controllerColumn = null;
      var navigateColumn = null;

      if (this.state.config.navigateable) {
        navigateColumn = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Column"], {
          width: 50,
          fixedRight: true,
          cell: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["NavigateCell"], _extends({}, this.props, {
            dataList: this.state.dataList
          }))
        });
      }

      if (this.state.config.enableCheckBox) {
        checkColumn = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Column"], {
          width: 35,
          fixed: true,
          header: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["ColumnHeaderCheckBoxCell"], {
            appId: this.props.appId
          }),
          cell: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["ColumnCheckBoxCell"], _extends({}, this.props, {
            dataList: this.state.dataList
          }))
        });
      }

      if (this.state.config.enableRadioButton) {
        checkColumn = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Column"], {
          width: 35,
          fixed: true,
          cell: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["ColumnRadioButtonCell"], _extends({}, this.props, {
            dataList: this.state.dataList
          }))
        });
      } //expandable is having high priority than collapseable


      if (this.state.config.rowCollapseable || this.state.config.rowExpandable) {
        collapseColumn = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Column"], {
          cell: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["CollapseCell"], _extends({}, this.props, {
            callback: this._handleCollapseClick,
            collapsedRows: this.state.collapsedRows,
            dataList: this.state.dataList
          })),
          header: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["CollapseHeaderCell"], _extends({}, this.props, {
            callback: this._handleCollapseAllClick
          })),
          fixed: true,
          width: 35
        });
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "tableWrapper",
        style: {
          height: 60 + this.state.height
        }
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "tableHead"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "tableHeaderHead"
      }, this.state.config.totalTitle && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "totalTitle"
      }, this.state.config.totalTitle)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "tableHeaderTail"
      }, this.state.config.downloadable && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_DownloadComp__WEBPACK_IMPORTED_MODULE_13__["default"], this.props), (!this.state.config.global || this.state.config.enforceResetFilterBtn) && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_ClearFilterComp__WEBPACK_IMPORTED_MODULE_11__["default"], this.props), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_PaginatorComp__WEBPACK_IMPORTED_MODULE_7__["default"], this.props), this.state.config.tableSearch && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_TableSearchComp__WEBPACK_IMPORTED_MODULE_12__["default"], this.props), !this.state.config.hideSetting && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_SettingComp__WEBPACK_IMPORTED_MODULE_6__["default"], _extends({}, this.props, {
        onOrderChanged: this.onOrderChanged
      })))), this.state.config.enableAllGlobalSelector && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_SelectAllIndicatorComp__WEBPACK_IMPORTED_MODULE_10__["default"], this.props), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_2___default()({
          tableBody: true,
          listView: this.state.config.listView,
          tableGlobalAll: this.state.selectAllLevel > 0
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Table"], {
        rowHeight: this.state.config.rowHeight,
        headerHeight: this.state.config.headerHeight,
        rowsCount: this.state.dataList.length,
        width: this.state.width,
        height: this.state.height,
        isColumnResizing: false,
        onColumnResizeEndCallback: this._onColumnResizeEndCallback,
        isColumnReordering: false,
        onColumnReorderEndCallback: this._onColumnReorderEndCallback,
        subRowHeightGetter: this._subRowHeightGetter,
        rowExpanded: this._rowExpandedGetter,
        onRowClick: this._onRowClick,
        rowClassNameGetter: this._rowClassNameGetter,
        onScrollEnd: this._onScrollEndCallBack,
        rowHeightGetter: this.rowHeightGetter,
        scrollTop: this.state.scrollTop
      }, collapseColumn, checkColumn, this.state.columnsOrder.map(function (columnKey, i) {
        //if column is hidden
        var columnConfig = _this2.state.config.getColumnConfig(columnKey);

        if (_this2.state.config.columnHidden(columnKey)) {
          return null;
        } else if (columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_9__["TYPE_SINGLE_SELECT_ACTIONS"]) {
          //put here to guarantee the rowIndex into the cell so as to avoid the recycling cells
          return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Column"], {
            isReorderable: columnConfig.reordable,
            columnKey: columnKey,
            key: i + Math.random(),
            header: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_headercell__WEBPACK_IMPORTED_MODULE_5__["HeaderCell"], _extends({}, _this2.props, {
              columnKey: columnKey
            })),
            cell: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["SingleSelectActionCell"], _extends({}, _this2.props, {
              columnKey: columnKey
            })),
            fixedRight: columnConfig.fixedRight,
            width: _this2.state.columnWidths[columnKey],
            isResizable: columnConfig.resizable,
            flexGrow: columnConfig.flexGrow,
            fixed: columnConfig.fixed,
            minWidth: columnConfig.minWidth
          });
        } else return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Column"], {
          isReorderable: columnConfig.reordable,
          columnKey: columnKey,
          key: i + Math.random(),
          header: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_headercell__WEBPACK_IMPORTED_MODULE_5__["HeaderCell"], _extends({}, _this2.props, {
            columnKey: columnKey
          })),
          cell: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["CellWrapper"], _extends({}, _this2.props, {
            columnKey: columnKey,
            dataList: _this2.state.dataList,
            collapsedRows: _this2.state.collapsedRows
          })),
          fixedRight: _this2.state.config.getColumnConfig(columnKey).fixedRight,
          width: _this2.state.columnWidths[columnKey],
          isResizable: _this2.state.config.getColumnConfig(columnKey).resizable,
          flexGrow: _this2.state.config.getColumnConfig(columnKey).flexGrow,
          fixed: _this2.state.config.getColumnConfig(columnKey).fixed
        });
      }), controllerColumn, navigateColumn)));
    }
  }]);

  return TableComp;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]);

/* harmony default export */ __webpack_exports__["default"] = (TableComp);

/***/ }),

/***/ "./src/components/data_table/comps/TableSearchComp.js":
/*!************************************************************!*\
  !*** ./src/components/data_table/comps/TableSearchComp.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/utils */ "./src/components/common/utils.js");
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_3__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }






var TableSearchComp = /*#__PURE__*/function (_Component) {
  _inherits(TableSearchComp, _Component);

  var _super = _createSuper(TableSearchComp);

  function TableSearchComp() {
    var _this;

    _classCallCheck(this, TableSearchComp);

    _this = _super.call(this);
    _this.update = _this.update.bind(_assertThisInitialized(_this));
    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_this));
    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_this));
    _this.state = {
      focused: false
    };
    return _this;
  }

  _createClass(TableSearchComp, [{
    key: "update",
    value: function update(e) {
      var _this2 = this;

      this.text = e.target.value;

      _common_utils__WEBPACK_IMPORTED_MODULE_1__["default"]._debounce(function () {
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this2.props.appId).setGlobalSearchTerm(_this2.text);
      }, 400);
    }
  }, {
    key: "onFocus",
    value: function onFocus() {
      this.setState({
        focused: true
      });
    }
  }, {
    key: "onBlur",
    value: function onBlur() {
      this.setState({
        focused: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_3___default()({
          tableSearchWrapper: true,
          focused: this.state.focused
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
        type: "text",
        placeholder: "Search",
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onKeyUp: this.update,
        onPaste: this.update
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "material-icons"
      }, "search"));
    }
  }]);

  return TableSearchComp;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);

/* harmony default export */ __webpack_exports__["default"] = (TableSearchComp);

/***/ }),

/***/ "./src/components/data_table/comps/cells/cells.js":
/*!********************************************************!*\
  !*** ./src/components/data_table/comps/cells/cells.js ***!
  \********************************************************/
/*! exports provided: CellWrapper, MoreOptionCell, IconCallBackCell, SingleSelectActionCell, HtmlListExpandedCell, HtmlListCell, ListCell, ToolTipTextCell, ToolTipComp, TextCell, NumberCell, ToolTipHtmlCell, HtmlCell, PureClickableCell, ClickableCell, CollapseHeaderCell, CollapseCell, ColumnCheckBoxCell, ColumnRadioButtonCell, ColumnHeaderCheckBoxCell, NavigateCell */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CellWrapper", function() { return CellWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MoreOptionCell", function() { return MoreOptionCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IconCallBackCell", function() { return IconCallBackCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SingleSelectActionCell", function() { return SingleSelectActionCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HtmlListExpandedCell", function() { return HtmlListExpandedCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HtmlListCell", function() { return HtmlListCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListCell", function() { return ListCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToolTipTextCell", function() { return ToolTipTextCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToolTipComp", function() { return ToolTipComp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextCell", function() { return TextCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberCell", function() { return NumberCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToolTipHtmlCell", function() { return ToolTipHtmlCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HtmlCell", function() { return HtmlCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PureClickableCell", function() { return PureClickableCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClickableCell", function() { return ClickableCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CollapseHeaderCell", function() { return CollapseHeaderCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CollapseCell", function() { return CollapseCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnCheckBoxCell", function() { return ColumnCheckBoxCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnRadioButtonCell", function() { return ColumnRadioButtonCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnHeaderCheckBoxCell", function() { return ColumnHeaderCheckBoxCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NavigateCell", function() { return NavigateCell; });
/* harmony import */ var fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fixed-data-table-2 */ "./node_modules/fixed-data-table-2/main.js");
/* harmony import */ var fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var _services_table_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/table_service */ "./src/components/data_table/services/table_service.js");
/* harmony import */ var _entities_more_option__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../entities/more_option */ "./src/components/data_table/entities/more_option.js");
/* harmony import */ var _entities_column__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../entities/column */ "./src/components/data_table/entities/column.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _BoundedTetherComp__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../BoundedTetherComp */ "./src/components/data_table/comps/BoundedTetherComp.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



 // import { Checkbox, Radio } from "react-mdl";







__webpack_require__(/*! ../../datatable.scss */ "./src/components/data_table/datatable.scss");

var CellWrapper = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(CellWrapper, _React$PureComponent);

  var _super = _createSuper(CellWrapper);

  function CellWrapper() {
    _classCallCheck(this, CellWrapper);

    return _super.apply(this, arguments);
  }

  _createClass(CellWrapper, [{
    key: "render",
    value: function render() {
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);
      var comp = null;
      var _this$props = this.props,
          rowIndex = _this$props.rowIndex,
          columnKey = _this$props.columnKey,
          collapsedRows = _this$props.collapsedRows;
      var service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();

      switch (columnConfig.type) {
        case _entities_column__WEBPACK_IMPORTED_MODULE_5__["TYPE_MORE_OPTIONS"]:
          comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(MoreOptionCell, _extends({}, this.props, {
            dataList: this.props.dataList
          }));
          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_5__["TYPE_NUMBER"]:
          comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(NumberCell, _extends({}, this.props, {
            dataList: this.props.dataList
          }));
          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_5__["TYPE_TEXT"]:
        case _entities_column__WEBPACK_IMPORTED_MODULE_5__["TYPE_PURE_TEXT"]:
        case _entities_column__WEBPACK_IMPORTED_MODULE_5__["TYPE_DATE"]:
        case _entities_column__WEBPACK_IMPORTED_MODULE_5__["TYPE_DATETIME"]:
          //first, check content length vs. column width, then give different Cell
          if (!columnConfig.disableTooltip && this.props.dataList[rowIndex][columnKey] && service.getWidthOfText(this.props.dataList[rowIndex][columnKey]) > columnConfig.width && !collapsedRows.has(rowIndex) //we use different cell comp based on expanded status
          ) {
              comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ToolTipTextCell, _extends({}, this.props, {
                dataList: this.props.dataList,
                collapsedRows: collapsedRows
              }));
            } else {
            comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(TextCell, _extends({}, this.props, {
              dataList: this.props.dataList
            }));
          }

          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_5__["TYPE_HTML"]:
          //first, check content length vs. column width, then give different Cell
          if (!columnConfig.disableTooltip && this.props.dataList[rowIndex][columnKey] && service.getWidthOfHTML(this.props.dataList[rowIndex][columnKey]) > columnConfig.width && !collapsedRows.has(rowIndex) //we use different cell comp based on expanded status
          ) {
              comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ToolTipHtmlCell, _extends({}, this.props, {
                dataList: this.props.dataList,
                collapsedRows: collapsedRows
              }));
            } else {
            comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HtmlCell, _extends({}, this.props, {
              dataList: this.props.dataList
            }));
          }

          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_5__["TYPE_LIST"]:
          //only using listView if not expanded
          if (!collapsedRows.has(rowIndex)) {
            comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ListCell, _extends({}, this.props, {
              dataList: this.props.dataList,
              columnWidth: columnConfig.width
            }));
          } else {
            comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(TextCell, _extends({}, this.props, {
              dataList: this.props.dataList
            }));
          }

          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_5__["TYPE_ICON_CALL_BACK"]:
          comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(IconCallBackCell, _extends({}, this.props, {
            dataList: this.props.dataList
          }));
          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_5__["TYPE_CLICKABLE"]:
          comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ClickableCell, _extends({}, this.props, {
            dataList: this.props.dataList
          }));
          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_5__["TYPE_PURE_CLICKABLE"]:
          comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(PureClickableCell, _extends({}, this.props, {
            dataList: this.props.dataList
          }));
          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_5__["TYPE_HTML_LIST"]:
          //only using listView if not expanded
          if (collapsedRows.has(rowIndex)) {
            comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HtmlListCell, _extends({}, this.props, {
              dataList: this.props.dataList,
              columnWidth: columnConfig.width
            }));
          } else {
            if (this.props.onListItemClick) {
              comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HtmlListExpandedCell, _extends({}, this.props, {
                dataList: this.props.dataList,
                columnWidth: columnConfig.width
              }));
            } else {
              comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HtmlCell, _extends({}, this.props, {
                dataList: this.props.dataList
              }));
            }
          }

          break;
      }

      return comp;
    }
  }]);

  return CellWrapper;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var MoreOptionCell = /*#__PURE__*/function (_React$PureComponent2) {
  _inherits(MoreOptionCell, _React$PureComponent2);

  var _super2 = _createSuper(MoreOptionCell);

  function MoreOptionCell() {
    var _this;

    _classCallCheck(this, MoreOptionCell);

    _this = _super2.call(this);
    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));
    _this.close = _this.close.bind(_assertThisInitialized(_this));
    _this.toggleOpen = _this.toggleOpen.bind(_assertThisInitialized(_this));
    _this.row = null;
    _this.state = {
      open: false,
      optionItems: [],
      theme: "light"
    };
    _this.optionItems = null;
    return _this;
  }

  _createClass(MoreOptionCell, [{
    key: "toggleOpen",
    value: function toggleOpen(e) {
      // if there are other popups open, close them
      if (document.querySelector(".dvClPopUpWrapper")) {
        this.store.closeAllPopUp();
      }

      if (e) e.stopPropagation();
      this.state.theme = this.store.getState().config.theme;
      this.setState({
        open: !this.state.open
      });
    }
  }, {
    key: "onClick",
    value: function onClick(e) {
      if (this.props.onMoreOptionItemClicked) {
        this.props.onMoreOptionItemClicked(this.row, this.optionItems.findByValue(e.target.getAttribute("data-value")));
      }

      this.close();
    }
  }, {
    key: "close",
    value: function close() {
      this.setState({
        open: false
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this._updateState();

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unsubscriberCloseAllPopUp = this.store.subscribeTo(this.store.CLOSE_ALL_POPUP, function () {
        _this2.close();
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriberCloseAllPopUp();
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) this._updateState();
    }
  }, {
    key: "_updateState",
    value: function _updateState() {
      var _this3 = this;

      setTimeout(function () {
        var dataList = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this3.props.appId).getState().dataList;
        if (dataList.length === 0) return; //here, cellValue should be options

        _this3.row = dataList[_this3.props.rowIndex];
        var cellValue = _this3.row[_this3.props.columnKey];
        _this3.optionItems = new _entities_more_option__WEBPACK_IMPORTED_MODULE_4__["default"](cellValue);

        _this3.setState({
          optionItems: _this3.optionItems.moreOptionItems
        });
      }, 0);
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var items = [];
      this.state.optionItems.forEach(function (option) {
        items.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("li", {
          key: option.value,
          onClick: _this4.onClick,
          "data-value": option.value,
          className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
            optionItem: true
          })
        }, option.title));
      });
      var iconPart = null,
          content = null;

      if (items.length > 0) {
        iconPart = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
          className: "material-icons",
          onClick: this.toggleOpen
        }, "more_horiz");
        content = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          className: "moreOptionDock moreOptionDockHTML"
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_7__["BoundedTetherComp"], {
          attachment: "top right",
          appId: this.props.appId
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
          className: "moreOptionAttachPoint"
        }), this.state.open && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          className: "moreOptionsWrapperInner"
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
            dvClPopUpWrapper: true,
            noir: this.state.theme === "noir",
            light: this.state.theme === "light"
          })
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", null, items)))));
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "moreOptionsWrapper"
      }, iconPart, content));
    }
  }]);

  return MoreOptionCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var IconCallBackCell = /*#__PURE__*/function (_React$PureComponent3) {
  _inherits(IconCallBackCell, _React$PureComponent3);

  var _super3 = _createSuper(IconCallBackCell);

  function IconCallBackCell() {
    var _this5;

    _classCallCheck(this, IconCallBackCell);

    _this5 = _super3.call(this);
    _this5.onClick = _this5.onClick.bind(_assertThisInitialized(_this5));
    _this5.close = _this5.close.bind(_assertThisInitialized(_this5));
    _this5._onIconDataUpdate = _this5._onIconDataUpdate.bind(_assertThisInitialized(_this5));
    _this5.state = {
      showDetail: false,
      popUpContent: "",
      theme: "light"
    };
    return _this5;
  }

  _createClass(IconCallBackCell, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      var _this6 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.state.theme = this.store.getState().config.theme;
      this.unsubscriberCloseAllPopUp = this.store.subscribeTo(this.store.CLOSE_ALL_POPUP, function () {
        _this6.setState({
          showDetail: false
        });
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriberCloseAllPopUp();
      if (this.subscriber) this.subscriber();
    }
  }, {
    key: "onClick",
    value: function onClick(e) {
      var _this7 = this;

      e.stopPropagation();

      if (this.state.showDetail) {
        this.close();
      } else {
        this.subscriber = this.store.subscribeTo(this.store.ICON_CELL_CLICKED_ACTION, function (htmlContent) {
          _this7._onIconDataUpdate(htmlContent);
        });

        if (this.props.onIconClicked) {
          this.state.theme = this.store.getState().config.theme;
          this.props.onIconClicked(this.props.dataList[this.props.rowIndex], this.props.columnKey);
        }
      }
    }
  }, {
    key: "close",
    value: function close() {
      this.setState({
        showDetail: false,
        popUpContent: ""
      });
    }
  }, {
    key: "_onIconDataUpdate",
    value: function _onIconDataUpdate(htmlContent) {
      this.setState({
        showDetail: true,
        popUpContent: htmlContent
      }); // //now remove it

      this.subscriber();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          rowIndex = _this$props2.rowIndex,
          columnKey = _this$props2.columnKey;
      var cellValue = this.props.dataList[rowIndex][columnKey];
      var comp = null;
      var colPositionObj = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]().getColumnPosition(Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState(), columnKey);
      var position = 'center';

      if (colPositionObj.bFirst) {
        position = 'left';
      } else if (colPositionObj.bLast) {
        position = 'right';
      }

      if (cellValue) comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "iconCallBackCellWrapper",
        onClick: this.onClick
      }, cellValue.includes('/') && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("img", {
        src: cellValue
      }), !cellValue.includes('/') && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons"
      }, cellValue), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_7__["BoundedTetherComp"], {
        attachment: "middle " + position,
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "iconActionAttachPoint"
      }), this.state.showDetail && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
          dvClPopUpWrapper: true,
          noir: this.state.theme === "noir",
          light: this.state.theme === "light"
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons closeIcon",
        onClick: this.close
      }, "clear"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: this.state.popUpContent
        }
      }))));
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, comp);
    }
  }]);

  return IconCallBackCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var SingleSelectActionCell = /*#__PURE__*/function (_React$PureComponent4) {
  _inherits(SingleSelectActionCell, _React$PureComponent4);

  var _super4 = _createSuper(SingleSelectActionCell);

  function SingleSelectActionCell() {
    var _this8;

    _classCallCheck(this, SingleSelectActionCell);

    _this8 = _super4.call(this);
    _this8.state = {
      open: false,
      title: "",
      selectedValue: "",
      disabled: false
    };
    _this8.toggleOpen = _this8.toggleOpen.bind(_assertThisInitialized(_this8));
    _this8.selected = _this8.selected.bind(_assertThisInitialized(_this8));
    return _this8;
  }

  _createClass(SingleSelectActionCell, [{
    key: "toggleOpen",
    value: function toggleOpen(e) {
      // if there are other popups open, close them
      if (document.querySelector(".dvClPopUpWrapper")) {
        this.store.closeAllPopUp();
      }

      if (e) e.stopPropagation();

      if (!this.state.disabled) {
        this.setState({
          open: !this.state.open
        });
      }
    }
  }, {
    key: "selected",
    value: function selected(e) {
      this.setState({
        title: this.columnConfig.getActionOptions(e).title,
        selectedValue: e
      });
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).updateSingleSelectAction(this.props.rowIndex, this.props.columnKey, e);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this9 = this;

      this._updateState();

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unsubscriberCloseAllPopUp = this.store.subscribeTo(this.store.CLOSE_ALL_POPUP, function () {
        _this9.setState({
          open: false
        });
      });
      this.unSubscribeCellData = this.store.subscribeTo(this.store.CELL_DATA_UPDATED, function () {
        //this is to set up externally the value for selected items
        var pasedInCellData = _this9.store.getState().passedInCellData;

        var rowKeyVal = pasedInCellData[0];
        var columnKey = pasedInCellData[1];
        var value = pasedInCellData[2];

        var primaryKey = _this9.store.getState().config.getPrimaryColumnKey(); //not current column, do nothing


        if (_this9.props.columnKey !== columnKey) return;

        if (Array.isArray(rowKeyVal) && rowKeyVal.includes(_this9.store.getState().dataList[_this9.props.rowIndex][primaryKey]) || _this9.store.getState().dataList[_this9.props.rowIndex][primaryKey] === rowKeyVal) {
          var option = _this9.columnConfig.getActionOptions(value);

          _this9.setState({
            title: option ? option.title : "",
            selectedValue: option ? option.value : ""
          });
        }
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unSubscribeCellData();
      this.unsubscriberCloseAllPopUp();
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) this._updateState();
    }
  }, {
    key: "_updateState",
    value: function _updateState() {
      var _this10 = this;

      setTimeout(function () {
        _this10.columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this10.props.appId).getState().config.getColumnConfig(_this10.props.columnKey);
        var dataList = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this10.props.appId).getState().dataList;
        if (dataList.length === 0) return;
        var cellValue = dataList[_this10.props.rowIndex][_this10.props.columnKey];

        var option = _this10.columnConfig.getActionOptions(cellValue);

        var disabled = 'controllers' in _this10.columnConfig && 'disabled' in _this10.columnConfig.controllers && _this10.columnConfig.controllers.disabled(cellValue, dataList[_this10.props.rowIndex]);

        _this10.setState({
          title: option ? option.title : "",
          selectedValue: option ? option.value : "",
          disabled: disabled
        });
      }, 0);
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
          "dropDownActionWrapper": true,
          "dropDownActionWrapperDisabled": this.state.disabled
        }),
        onClick: this.toggleOpen
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "title"
      }, this.state.title), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
          "material-icons": true,
          open: this.state.open,
          hidden: this.state.disabled
        })
      }, "arrow_drop_down"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("hr", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
          "dropdownSelectUnderline": true,
          hidden: this.state.disabled
        })
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_7__["BoundedTetherComp"], {
        attachment: "top left",
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "actionDropDownAttachPoint"
      }), this.state.open && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(SingleSelectOptions, _extends({
        close: this.toggleOpen,
        selected: this.selected,
        selectedValue: this.state.selectedValue
      }, this.props, {
        dataList: this.props.dataList
      })))));
    }
  }]);

  return SingleSelectActionCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var SingleSelectOptions = /*#__PURE__*/function (_React$PureComponent5) {
  _inherits(SingleSelectOptions, _React$PureComponent5);

  var _super5 = _createSuper(SingleSelectOptions);

  function SingleSelectOptions() {
    var _this11;

    _classCallCheck(this, SingleSelectOptions);

    _this11 = _super5.call(this);
    _this11.close = _this11.close.bind(_assertThisInitialized(_this11));
    _this11.click = _this11.click.bind(_assertThisInitialized(_this11));
    _this11.state = {
      theme: "light"
    };
    return _this11;
  }

  _createClass(SingleSelectOptions, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.state.theme = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.theme;
    }
  }, {
    key: "close",
    value: function close() {
      this.props.close();
    }
  }, {
    key: "click",
    value: function click(e) {
      this.props.selected(e.target.getAttribute("data-value"));
      this.close();
    }
  }, {
    key: "render",
    value: function render() {
      var _this12 = this;

      var items = [];
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);
      var selectedValue = this.props.selectedValue;
      columnConfig.actionOptions.forEach(function (option) {
        items.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("li", {
          key: option.value,
          onClick: _this12.click,
          "data-value": option.value,
          className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
            selectable: true,
            selected: option.value === selectedValue
          })
        }, option.title));
      });
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
          dvClPopUpWrapper: true,
          noir: this.state.theme == "noir",
          light: this.state.theme == "light"
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", null, items));
    }
  }]);

  return SingleSelectOptions;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var HtmlListExpandedCell = /*#__PURE__*/function (_React$PureComponent6) {
  _inherits(HtmlListExpandedCell, _React$PureComponent6);

  var _super6 = _createSuper(HtmlListExpandedCell);

  function HtmlListExpandedCell(props) {
    var _this13;

    _classCallCheck(this, HtmlListExpandedCell);

    _this13 = _super6.call(this, props);
    _this13.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this13.props.appId);
    _this13.update = _this13.update.bind(_assertThisInitialized(_this13));
    _this13.state = {};
    return _this13;
  }

  _createClass(HtmlListExpandedCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.update(this.props.rowIndex);
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) this.update(nextProps.rowIndex);
    }
  }, {
    key: "update",
    value: function update(rowIndex) {
      var columnKey = this.props.columnKey;
      var service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
      var checkingResults = service.analyzeHTMLListContent(this.props.dataList[rowIndex][columnKey]);
      var outerDiv = checkingResults.outerDiv;
      var innerDivs = checkingResults.innerDivs;
      var htmlComps = [];

      for (var i = 0; i < innerDivs.length; i++) {
        htmlComps.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HtmlListSingleClickableItem, _extends({
          key: i,
          contents: innerDivs[i]
        }, this.props)));
      }

      this.setState({
        htmlComps: htmlComps
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "htmlListCellWrapper"
      }, this.state.htmlComps));
    }
  }]);

  return HtmlListExpandedCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var HtmlListCell = /*#__PURE__*/function (_React$PureComponent7) {
  _inherits(HtmlListCell, _React$PureComponent7);

  var _super7 = _createSuper(HtmlListCell);

  function HtmlListCell(props) {
    var _this14;

    _classCallCheck(this, HtmlListCell);

    _this14 = _super7.call(this, props);
    _this14.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this14.props.appId);
    _this14.toggleMore = _this14.toggleMore.bind(_assertThisInitialized(_this14));
    _this14.state = {
      showMore: false,
      htmlCnt: '',
      remainingCount: 0,
      position: 'center'
    };
    _this14.update = _this14.update.bind(_assertThisInitialized(_this14));
    return _this14;
  }

  _createClass(HtmlListCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this15 = this;

      this.unsubscriberCloseAllPopUp = this.store.subscribeTo(this.store.CLOSE_ALL_POPUP, function () {
        _this15.setState({
          showMore: false
        });
      }); //now, let's set up listener to customConfigUpdate

      this.unsubscriber = this.store.subscribeTo(this.store.CUSTOM_CONFIG_UPDATE, function (state) {
        _this15.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this15.props.appId);
        var innerDivCounts = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]().calCountForInerDivs(_this15.state.innerDivs, _this15.store.getState().config.getColumnConfig(_this15.props.columnKey).width - 100);
        var htmlCnt = _this15.state.outerDiv;

        for (var i = 0; i < innerDivCounts; i++) {
          if (_this15.state.innerDivs[i]) {
            htmlCnt += '<span style="float:left;margin-right:5px">' + _this15.state.innerDivs[i] + '</span>';
          }
        }

        htmlCnt += '</div>';
        var remainingCount = _this15.state.innerDivs.length - innerDivCounts;

        _this15.setState({
          htmlCnt: htmlCnt,
          remainingCount: remainingCount
        });
      });
      this.update(this.props.rowIndex);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriber();
      this.unsubscriberCloseAllPopUp();
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) this.update(nextProps.rowIndex);
    }
  }, {
    key: "toggleMore",
    value: function toggleMore(e) {
      if (document.querySelector(".dvClPopUpWrapper")) {
        this.store.closeAllPopUp();
      }

      if (e) e.stopPropagation();
      this.setState({
        showMore: !this.state.showMore
      });
    }
  }, {
    key: "update",
    value: function update(rowIndex) {
      var columnKey = this.props.columnKey;
      var service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
      var checkingResults = service.analyzeHTMLListContent(this.props.dataList[rowIndex][columnKey]);
      var outerDiv = checkingResults.outerDiv;
      var innerDivs = checkingResults.innerDivs;
      var colPositionObj = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]().getColumnPosition(Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState(), columnKey);
      var position = 'center';

      if (colPositionObj.bFirst) {
        position = 'left';
      } else if (colPositionObj.bLast) {
        position = 'right';
      } //here, we need to leve same extra space for +/-2


      var innerDivCounts = service.calCountForInerDivs(innerDivs, this.props.columnWidth - 50);
      var htmlCnt = outerDiv;

      for (var i = 0; i < innerDivCounts; i++) {
        if (innerDivs[i]) {
          htmlCnt += '<span style="float:left;margin-right:5px">' + innerDivs[i] + '</span>';
        }
      }

      htmlCnt += '</div>';
      var remainingCount = innerDivs.length - innerDivCounts;
      var htmlComps = [];

      for (var _i = 0; _i < innerDivCounts; _i++) {
        htmlComps.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HtmlListSingleClickableItem, _extends({
          key: _i,
          contents: innerDivs[_i]
        }, this.props)));
      }

      this.setState({
        htmlCnt: htmlCnt,
        htmlComps: htmlComps,
        remainingCount: remainingCount,
        outerDiv: outerDiv,
        innerDivs: innerDivs,
        position: position
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "htmlListCellWrapper"
      }, this.props.onListItemClick ? this.state.htmlComps : null, !this.props.onListItemClick ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: this.state.htmlCnt
        }
      }) : null, this.state.remainingCount > 0 ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        onClick: this.toggleMore,
        className: "moreHook tooltipWrapper htmlListToggler"
      }, this.state.showMore ? "-" : "+", this.state.remainingCount) : null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "toolTipDock toolTipDockHTML"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_7__["BoundedTetherComp"], {
        attachment: "middle " + this.state.position,
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "tooltipAttachPoint"
      }), this.state.showMore && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HtmlListCellItems, _extends({}, this.props, {
        close: this.toggleMore,
        htmlDivs: this.state.innerDivs
      }))))));
    }
  }]);

  return HtmlListCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var HtmlListSingleClickableItem = /*#__PURE__*/function (_React$PureComponent8) {
  _inherits(HtmlListSingleClickableItem, _React$PureComponent8);

  var _super8 = _createSuper(HtmlListSingleClickableItem);

  function HtmlListSingleClickableItem() {
    var _this16;

    _classCallCheck(this, HtmlListSingleClickableItem);

    _this16 = _super8.call(this);
    _this16.onClick = _this16.onClick.bind(_assertThisInitialized(_this16));
    return _this16;
  }

  _createClass(HtmlListSingleClickableItem, [{
    key: "onClick",
    value: function onClick(e) {
      e.preventDefault();
      e.stopPropagation();
      this.props.onListItemClick(this.props.contents);
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "clickable",
        onClick: this.onClick,
        dangerouslySetInnerHTML: {
          __html: this.props.contents
        }
      });
    }
  }]);

  return HtmlListSingleClickableItem;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var HtmlListCellItems = /*#__PURE__*/function (_React$PureComponent9) {
  _inherits(HtmlListCellItems, _React$PureComponent9);

  var _super9 = _createSuper(HtmlListCellItems);

  function HtmlListCellItems() {
    var _this17;

    _classCallCheck(this, HtmlListCellItems);

    _this17 = _super9.call(this);
    _this17.close = _this17.close.bind(_assertThisInitialized(_this17));
    _this17.state = {
      theme: "light"
    };
    return _this17;
  }

  _createClass(HtmlListCellItems, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.state.theme = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.theme;
    }
  }, {
    key: "close",
    value: function close() {
      this.props.close();
    }
  }, {
    key: "render",
    value: function render() {
      var items = [];
      this.props.htmlDivs.map(function (item, index) {
        items.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("li", {
          key: index,
          className: "listItem"
        }, " ", /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
          dangerouslySetInnerHTML: {
            __html: item
          }
        }), " "));
      });
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
          dvClPopUpWrapper: true,
          htmlList: true,
          noir: this.state.theme == "noir",
          light: this.state.theme == "light"
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons closeIcon",
        onClick: this.close
      }, "clear"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", null, items));
    }
  }]);

  return HtmlListCellItems;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var ListCell = /*#__PURE__*/function (_React$PureComponent10) {
  _inherits(ListCell, _React$PureComponent10);

  var _super10 = _createSuper(ListCell);

  function ListCell(props) {
    var _this18;

    _classCallCheck(this, ListCell);

    _this18 = _super10.call(this, props);
    _this18.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this18.props.appId);
    _this18.toggleMore = _this18.toggleMore.bind(_assertThisInitialized(_this18));
    _this18.state = {
      showMore: false,
      textCnt: '',
      remainingCount: 0,
      position: 'center'
    };
    _this18.update = _this18.update.bind(_assertThisInitialized(_this18));
    return _this18;
  }

  _createClass(ListCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this19 = this;

      this.unsubscriberCloseAllPopUp = this.store.subscribeTo(this.store.CLOSE_ALL_POPUP, function () {
        _this19.setState({
          showMore: false
        });
      }); //now, let's set up listener to customConfigUpdate

      this.unsubscriber = this.store.subscribeTo(this.store.CUSTOM_CONFIG_UPDATE, function (state) {
        _this19.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this19.props.appId);
        var service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
        var innerDivCounts = service.calCountForInerDivs(_this19.state.innerDivs, _this19.store.getState().config.getColumnConfig(_this19.props.columnKey).width - 70);
        var textCnts = [];

        for (var i = 0; i < innerDivCounts; i++) {
          textCnts.push(_this19.state.innerDivs[i]);
        }

        var remainingCount = _this19.state.innerDivs.length - innerDivCounts;

        _this19.setState({
          textCnt: textCnts.join(","),
          remainingCount: remainingCount
        });
      });
      this.update(this.props.rowIndex);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriber();
      this.unsubscriberCloseAllPopUp();
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) this.update(nextProps.rowIndex);
    }
  }, {
    key: "toggleMore",
    value: function toggleMore(e) {
      // if there are other popups open, close them
      if (document.querySelector(".dvClPopUpWrapper")) {
        this.store.closeAllPopUp();
      }

      if (e) e.stopPropagation();
      this.setState({
        showMore: !this.state.showMore
      });
    }
  }, {
    key: "update",
    value: function update(rowIndex) {
      var columnKey = this.props.columnKey;
      var service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
      var innerDivs = service.analyzeTextListContent(this.props.dataList[rowIndex][columnKey]);
      var colPositionObj = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]().getColumnPosition(Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState(), columnKey);
      var position = 'center';

      if (colPositionObj.bFirst) {
        position = 'left';
      } else if (colPositionObj.bLast) {
        position = 'right';
      } //here, we need to leve same extra space for +/-2


      var innerDivCounts = service.calCountForInerDivs(innerDivs, this.props.columnWidth - 70);
      var textCnts = [];

      for (var i = 0; i < innerDivCounts; i++) {
        textCnts.push(innerDivs[i]);
      }

      var remainingCount = innerDivs.length - innerDivCounts;
      this.setState({
        textCnt: textCnts.join(","),
        remainingCount: remainingCount,
        position: position,
        innerDivs: innerDivs
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          rowIndex = _this$props3.rowIndex,
          columnKey = _this$props3.columnKey;
      var items = [];
      var deliminator = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.listDeliminator;
      if (this.props.dataList[rowIndex][columnKey]) items = this.props.dataList[rowIndex][columnKey].split(deliminator);
      var colPositionObj = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]().getColumnPosition(Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState(), columnKey);
      var position = 'center';

      if (colPositionObj.bFirst) {
        position = 'left';
      } else if (colPositionObj.bLast) {
        position = 'right';
      }

      var partialListText = this.state.remainingCount > 1 ? this.state.textCnt + "," : this.state.textCnt;
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "hookCell"
      }, partialListText, this.state.remainingCount >= 1 ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        onClick: this.toggleMore,
        className: "moreHook tooltipWrapper"
      }, this.state.showMore ? "-" : "+", this.state.remainingCount) : null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "toolTipDock"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_7__["BoundedTetherComp"], {
        attachment: "middle left",
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "tooltipAttachPoint"
      }), this.state.showMore && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ListCellItems, _extends({}, this.props, {
        close: this.toggleMore,
        items: this.props.dataList[rowIndex][columnKey]
      }))))));
    }
  }]);

  return ListCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var ListCellItems = /*#__PURE__*/function (_React$PureComponent11) {
  _inherits(ListCellItems, _React$PureComponent11);

  var _super11 = _createSuper(ListCellItems);

  function ListCellItems() {
    var _this20;

    _classCallCheck(this, ListCellItems);

    _this20 = _super11.call(this);
    _this20.close = _this20.close.bind(_assertThisInitialized(_this20));
    _this20.state = {
      theme: "light"
    };
    return _this20;
  }

  _createClass(ListCellItems, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.state.theme = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.theme;
    }
  }, {
    key: "close",
    value: function close() {
      this.props.close();
    }
  }, {
    key: "render",
    value: function render() {
      var items = [];
      this.props.items.split(",").map(function (item, index) {
        items.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("li", {
          key: index
        }, item));
      });
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
          dvClPopUpWrapper: true,
          noir: this.state.theme === "noir",
          light: this.state.theme === "light"
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons closeIcon",
        onClick: this.close
      }, "clear"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", null, items));
    }
  }]);

  return ListCellItems;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var ToolTipTextCell = /*#__PURE__*/function (_React$PureComponent12) {
  _inherits(ToolTipTextCell, _React$PureComponent12);

  var _super12 = _createSuper(ToolTipTextCell);

  function ToolTipTextCell() {
    var _this21;

    _classCallCheck(this, ToolTipTextCell);

    _this21 = _super12.call(this);
    _this21.showToolTip = _this21.showToolTip.bind(_assertThisInitialized(_this21));
    _this21.hideToolTip = _this21.hideToolTip.bind(_assertThisInitialized(_this21));
    _this21.state = {
      openTooltip: false
    };
    return _this21;
  }

  _createClass(ToolTipTextCell, [{
    key: "showToolTip",
    value: function showToolTip() {
      this.setState({
        openTooltip: true
      });
    }
  }, {
    key: "hideToolTip",
    value: function hideToolTip() {
      this.setState({
        openTooltip: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          rowIndex = _this$props4.rowIndex,
          columnKey = _this$props4.columnKey;
      var colPositionObj = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]().getColumnPosition(Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState(), columnKey);
      var position = 'center';

      if (colPositionObj.bFirst) {
        position = 'left';
      } else if (colPositionObj.bLast) {
        position = 'right';
      }

      var textClass = classnames__WEBPACK_IMPORTED_MODULE_6___default()({
        autoEllipse: true,
        tooltipWrapper: true
      });
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "textCell textTooltipCell"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: textClass,
        onMouseEnter: this.showToolTip,
        onMouseLeave: this.hideToolTip
      }, this.props.dataList[rowIndex][columnKey], /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "toolTipDock"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_7__["BoundedTetherComp"], {
        className: "dvTetheredToolTip",
        attachment: "middle " + position,
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "tooltipAttachPoint"
      }), this.state.openTooltip && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ToolTipComp, _extends({}, this.props, {
        content: this.props.dataList[rowIndex][columnKey]
      })))))));
    }
  }]);

  return ToolTipTextCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var ToolTipComp = /*#__PURE__*/function (_React$PureComponent13) {
  _inherits(ToolTipComp, _React$PureComponent13);

  var _super13 = _createSuper(ToolTipComp);

  function ToolTipComp() {
    _classCallCheck(this, ToolTipComp);

    return _super13.apply(this, arguments);
  }

  _createClass(ToolTipComp, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
          dvClPopUpWrapper: true,
          htmlList: true,
          dvTooltipText: true,
          noir: Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.theme == "noir",
          light: Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.theme == "light"
        }),
        dangerouslySetInnerHTML: {
          __html: this.props.content
        }
      });
    }
  }]);

  return ToolTipComp;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var TextCell = /*#__PURE__*/function (_React$PureComponent14) {
  _inherits(TextCell, _React$PureComponent14);

  var _super14 = _createSuper(TextCell);

  function TextCell() {
    var _this22;

    _classCallCheck(this, TextCell);

    _this22 = _super14.call(this);
    _this22.state = {
      editing: false
    };
    return _this22;
  }

  _createClass(TextCell, [{
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
          rowIndex = _this$props5.rowIndex,
          columnKey = _this$props5.columnKey;
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, !columnConfig.editable && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "textCell"
      }, this.props.dataList[rowIndex][columnKey]), columnConfig.editable && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "editableCellWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "textCell"
      }, this.props.dataList[rowIndex][columnKey])));
    }
  }]);

  return TextCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var NumberCell = /*#__PURE__*/function (_React$PureComponent15) {
  _inherits(NumberCell, _React$PureComponent15);

  var _super15 = _createSuper(NumberCell);

  function NumberCell() {
    _classCallCheck(this, NumberCell);

    return _super15.call(this);
  }

  _createClass(NumberCell, [{
    key: "render",
    value: function render() {
      var _this$props6 = this.props,
          rowIndex = _this$props6.rowIndex,
          columnKey = _this$props6.columnKey;
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);
      var svc = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "textCell"
      }, this.props.dataList[rowIndex][columnKey] ? svc.formatNumber(this.props.dataList[rowIndex][columnKey], columnConfig) : 0));
    }
  }]);

  return NumberCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var ToolTipHtmlCell = /*#__PURE__*/function (_React$PureComponent16) {
  _inherits(ToolTipHtmlCell, _React$PureComponent16);

  var _super16 = _createSuper(ToolTipHtmlCell);

  function ToolTipHtmlCell() {
    var _this23;

    _classCallCheck(this, ToolTipHtmlCell);

    _this23 = _super16.call(this);
    _this23.showToolTip = _this23.showToolTip.bind(_assertThisInitialized(_this23));
    _this23.hideToolTip = _this23.hideToolTip.bind(_assertThisInitialized(_this23));
    _this23.state = {
      openTooltip: false
    };
    return _this23;
  }

  _createClass(ToolTipHtmlCell, [{
    key: "showToolTip",
    value: function showToolTip() {
      this.setState({
        openTooltip: true
      });
    }
  }, {
    key: "hideToolTip",
    value: function hideToolTip() {
      this.setState({
        openTooltip: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props7 = this.props,
          rowIndex = _this$props7.rowIndex,
          columnKey = _this$props7.columnKey;
      var colPositionObj = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]().getColumnPosition(Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState(), columnKey);
      var position = 'center';

      if (colPositionObj.bFirst) {
        position = 'left';
      } else if (colPositionObj.bLast) {
        position = 'right';
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "htmlCell htmlTooltipCell"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
          autoEllipse: true,
          tooltipWrapper: true
        }),
        onMouseEnter: this.showToolTip,
        onMouseLeave: this.hideToolTip
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: this.props.dataList[rowIndex][columnKey]
        }
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "toolTipDock"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_7__["BoundedTetherComp"], {
        className: "dvTetheredToolTip",
        attachment: "middle " + position,
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "tooltipAttachPoint"
      }), this.state.openTooltip && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ToolTipComp, _extends({}, this.props, {
        content: this.props.dataList[rowIndex][columnKey]
      })))))));
    }
  }]);

  return ToolTipHtmlCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var HtmlCell = /*#__PURE__*/function (_React$PureComponent17) {
  _inherits(HtmlCell, _React$PureComponent17);

  var _super17 = _createSuper(HtmlCell);

  function HtmlCell() {
    _classCallCheck(this, HtmlCell);

    return _super17.apply(this, arguments);
  }

  _createClass(HtmlCell, [{
    key: "render",
    value: function render() {
      var _this$props8 = this.props,
          rowIndex = _this$props8.rowIndex,
          columnKey = _this$props8.columnKey;
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "htmlCell",
        dangerouslySetInnerHTML: {
          __html: this.props.dataList[rowIndex][columnKey]
        }
      }));
    }
  }]);

  return HtmlCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var PureClickableCell = /*#__PURE__*/function (_React$PureComponent18) {
  _inherits(PureClickableCell, _React$PureComponent18);

  var _super18 = _createSuper(PureClickableCell);

  function PureClickableCell() {
    var _this24;

    _classCallCheck(this, PureClickableCell);

    _this24 = _super18.call(this);
    _this24.onClick = _this24.onClick.bind(_assertThisInitialized(_this24));
    _this24.updateClickable = _this24.updateClickable.bind(_assertThisInitialized(_this24));
    _this24.state = {
      unClickable: false
    };
    _this24.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
    return _this24;
  }

  _createClass(PureClickableCell, [{
    key: "onClick",
    value: function onClick(e) {
      e.stopPropagation();

      if (this.props.onCellClicked && !this.state.unClickable) {
        this.props.onCellClicked(this.props.dataList[this.props.rowIndex], this.props.columnKey);
      }
    }
  }, {
    key: "updateClickable",
    value: function updateClickable() {
      var unClickableCells = this.store.getState().unClickableCells;
      this.setState({
        unClickable: this.props.columnKey in unClickableCells && unClickableCells[this.props.columnKey].includes(this.service.getRowKeyValFromIndex(this.props.rowIndex, this.store.getState()))
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this25 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unsubscriber = this.store.subscribeTo(this.store.UNCLICKABLE_CELLS_UPDATED, function () {
        _this25.updateClickable();
      });
      this.updateClickable();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriber();
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) {
        // using nextProps.rowIndex as real rowIndex
        var unClickableCells = this.store.getState().unClickableCells;
        this.setState({
          unClickable: this.props.columnKey in unClickableCells && unClickableCells[this.props.columnKey].includes(this.service.getRowKeyValFromIndex(nextProps.rowIndex, this.store.getState()))
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props9 = this.props,
          rowIndex = _this$props9.rowIndex,
          columnKey = _this$props9.columnKey;
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        onClick: this.onClick,
        dangerouslySetInnerHTML: {
          __html: this.props.dataList[rowIndex][columnKey]
        }
      }));
    }
  }]);

  return PureClickableCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var ClickableCell = /*#__PURE__*/function (_React$PureComponent19) {
  _inherits(ClickableCell, _React$PureComponent19);

  var _super19 = _createSuper(ClickableCell);

  function ClickableCell() {
    var _this26;

    _classCallCheck(this, ClickableCell);

    _this26 = _super19.call(this);
    _this26.onClick = _this26.onClick.bind(_assertThisInitialized(_this26));
    _this26.updateClickable = _this26.updateClickable.bind(_assertThisInitialized(_this26));
    _this26.state = {
      unClickable: false
    };
    _this26.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
    return _this26;
  }

  _createClass(ClickableCell, [{
    key: "onClick",
    value: function onClick(e) {
      e.stopPropagation();

      if (this.props.onCellClicked && !this.state.unClickable) {
        this.props.onCellClicked(this.props.dataList[this.props.rowIndex], this.props.columnKey);
      }
    }
  }, {
    key: "updateClickable",
    value: function updateClickable() {
      var unClickableCells = this.store.getState().unClickableCells;
      this.setState({
        unClickable: this.props.columnKey in unClickableCells && unClickableCells[this.props.columnKey].includes(this.service.getRowKeyValFromIndex(this.props.rowIndex, this.store.getState()))
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this27 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unsubscriber = this.store.subscribeTo(this.store.UNCLICKABLE_CELLS_UPDATED, function () {
        _this27.updateClickable();
      });
      this.updateClickable();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriber();
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) {
        // using nextProps.rowIndex as real rowIndex
        var unClickableCells = this.store.getState().unClickableCells;
        this.setState({
          unClickable: this.props.columnKey in unClickableCells && unClickableCells[this.props.columnKey].includes(this.service.getRowKeyValFromIndex(nextProps.rowIndex, this.store.getState()))
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props10 = this.props,
          rowIndex = _this$props10.rowIndex,
          columnKey = _this$props10.columnKey;
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
          "autoEllipse": true,
          "clickableCell": !this.state.unClickable
        }),
        onClick: this.onClick,
        dangerouslySetInnerHTML: {
          __html: this.props.dataList[rowIndex][columnKey]
        }
      }));
    }
  }]);

  return ClickableCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var CollapseHeaderCell = /*#__PURE__*/function (_React$PureComponent20) {
  _inherits(CollapseHeaderCell, _React$PureComponent20);

  var _super20 = _createSuper(CollapseHeaderCell);

  function CollapseHeaderCell() {
    var _this28;

    _classCallCheck(this, CollapseHeaderCell);

    _this28 = _super20.call(this);
    _this28.state = {
      allOpened: false
    };
    _this28._toggle = _this28._toggle.bind(_assertThisInitialized(_this28));
    return _this28;
  }

  _createClass(CollapseHeaderCell, [{
    key: "_toggle",
    value: function _toggle() {
      this.props.callback(!this.state.allOpened);
      this.setState({
        allOpened: !this.state.allOpened
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this29 = this;

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        onClick: function onClick(e) {
          e.stopPropagation();

          _this29._toggle();
        },
        className: "collapseToggler headerControllerIcon"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
          "material-icons": true,
          array_right: !this.state.allOpened,
          array_right_down: this.state.allOpened
        })
      }, "arrow_right")));
    }
  }]);

  return CollapseHeaderCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var CollapseCell = /*#__PURE__*/function (_React$PureComponent21) {
  _inherits(CollapseCell, _React$PureComponent21);

  var _super21 = _createSuper(CollapseCell);

  function CollapseCell() {
    var _this30;

    _classCallCheck(this, CollapseCell);

    _this30 = _super21.call(this);
    _this30.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
    _this30._toggleRow = _this30._toggleRow.bind(_assertThisInitialized(_this30));
    return _this30;
  }

  _createClass(CollapseCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this31 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unsubscriber = this.store.subscribeTo(this.store.TOGGLE_ALL_ROWS, function () {
        if (_this31.service.isRowSelected(_this31.props.rowIndex, _this31.store.getState())) _this31._toggleRow();
      });
    }
  }, {
    key: "_toggleRow",
    value: function _toggleRow() {
      this.props.callback(this.props.rowIndex);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriber();
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {// if(this.props.rowIndex !== nextProps.rowIndex &&
      //     this.store.getState().allOpened){
      //     this._toggleRow();
      // }
    }
  }, {
    key: "render",
    value: function render() {
      var _this32 = this;

      var _this$props11 = this.props,
          collapsedRows = _this$props11.collapsedRows,
          rowIndex = _this$props11.rowIndex,
          callback = _this$props11.callback;
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        onClick: function onClick(e) {
          e.stopPropagation();

          _this32._toggleRow();
        },
        className: "collapseToggler"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
          "material-icons": true,
          array_right: !collapsedRows.has(rowIndex),
          array_right_down: collapsedRows.has(rowIndex)
        })
      }, "arrow_right")));
    }
  }]);

  return CollapseCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var ColumnCheckBoxCell = /*#__PURE__*/function (_Component) {
  _inherits(ColumnCheckBoxCell, _Component);

  var _super22 = _createSuper(ColumnCheckBoxCell);

  function ColumnCheckBoxCell() {
    var _this33;

    _classCallCheck(this, ColumnCheckBoxCell);

    _this33 = _super22.call(this);
    _this33.state = {
      checked: false
    };
    _this33._onChange = _this33._onChange.bind(_assertThisInitialized(_this33));
    _this33.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
    return _this33;
  }

  _createClass(ColumnCheckBoxCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this34 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unSubscribeSelectAll = this.store.subscribeTo(this.store.ROW_ALL_SELECTED, function () {
        var stateObj = {};
        stateObj["checked"] = _this34.store.getState().rowAllSelected;

        _this34.setState(stateObj);
      });

      if (!this.store.getState().config.deCoupleRowSelectAndCheckbox) {
        this.setState({
          checked: this.service.isRowSelected(this.props.rowIndex, this.store.getState())
        });
        this.unSubscribRowSelected = this.store.subscribeTo(this.store.ROW_SELECTED, function () {
          _this34.setState({
            checked: _this34.service.isRowSelected(_this34.props.rowIndex, Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this34.props.appId).getState())
          });
        });
        this.unSubscribeSingleRowSelected = this.store.subscribeTo(this.store.SINGLE_ROW_SELECTED, function () {
          _this34.setState({
            checked: _this34.service.isRowSelected(_this34.props.rowIndex, Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this34.props.appId).getState())
          });
        });
      }
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) {
        // using nextProps.rowIndex as real rowIndex
        this.setState({
          checked: this.service.isRowSelected(nextProps.rowIndex, Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState())
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unSubscribeSelectAll();

      if (!this.store.getState().config.deCoupleRowSelectAndCheckbox) {
        this.unSubscribRowSelected();
        this.unSubscribeSingleRowSelected();
      }
    }
  }, {
    key: "_onChange",
    value: function _onChange(e) {
      this.setState({
        checked: e.target.checked
      });

      if (!this.store.getState().config.deCoupleRowSelectAndCheckbox) {
        //we only toggle here if no decouple
        this.store.toggleRowSelected(this.props.rowIndex);
      } else {
        //otherwise, we will dispatch different event
        this.store.toggleCheckBoxChanged(this.props.rowIndex, e.target.checked);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, "Checkbox"));
    }
  }]);

  return ColumnCheckBoxCell;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]); // <Checkbox key={this.props.rowIndex} checked={this.state.checked} onChange={this._onChange} />

var ColumnRadioButtonCell = /*#__PURE__*/function (_Component2) {
  _inherits(ColumnRadioButtonCell, _Component2);

  var _super23 = _createSuper(ColumnRadioButtonCell);

  function ColumnRadioButtonCell() {
    var _this35;

    _classCallCheck(this, ColumnRadioButtonCell);

    _this35 = _super23.call(this);
    _this35.state = {
      checked: false
    };
    _this35._onChange = _this35._onChange.bind(_assertThisInitialized(_this35));
    _this35.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
    return _this35;
  }

  _createClass(ColumnRadioButtonCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this36 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);

      if (!this.store.getState().config.deCoupleRowSelectAndCheckbox) {
        this.setState({
          checked: this.service.isRowSelected(this.props.rowIndex, this.store.getState())
        });
        this.unSubscribeRowSelected = this.store.subscribeTo(this.store.ROW_SELECTED, function () {
          _this36.setState({
            checked: _this36.service.isRowSelected(_this36.props.rowIndex, Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this36.props.appId).getState())
          });
        });
        this.unSubscribeSingleRowSelected = this.store.subscribeTo(this.store.SINGLE_ROW_SELECTED, function () {
          _this36.setState({
            checked: _this36.service.isRowSelected(_this36.props.rowIndex, Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this36.props.appId).getState())
          });
        });
      } else if (this.store.getState().config.enableRadioButton) {
        this.unSubscribeCheckBoxChecked = this.store.subscribeTo(this.store.CHECKBOX_CHECKED, function () {
          _this36.setState({
            checked: _this36.service.isRowChecked(_this36.props.rowIndex, Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this36.props.appId).getState())
          });
        });
      }
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) {
        // using nextProps.rowIndex as real rowIndex
        this.setState({
          checked: this.service.isRowSelected(nextProps.rowIndex, Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState())
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (!this.store.getState().config.deCoupleRowSelectAndCheckbox) {
        this.unSubscribeRowSelected();
        this.unSubscribeSingleRowSelected();
      } else if (this.store.getState().config.enableRadioButton) {
        this.unSubscribeCheckBoxChecked();
      }
    }
  }, {
    key: "_onChange",
    value: function _onChange(e) {
      this.setState({
        checked: e.target.checked
      });

      if (!this.store.getState().config.deCoupleRowSelectAndCheckbox) {
        //we only toggle here if no decouple
        this.store.toggleRowSelected(this.props.rowIndex);
      } else {
        //otherwise, we will dispatch different event
        this.store.toggleCheckBoxChanged(this.props.rowIndex, e.target.checked);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this37 = this;

      var decoupleSelection = function decoupleSelection(e) {
        if (_this37.store.getState().config.deCoupleRowSelectAndCheckbox) {
          e.stopPropagation();
        }
      };

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        onClick: function onClick(e) {
          return decoupleSelection(e);
        }
      }, "Radio"));
    }
  }]);

  return ColumnRadioButtonCell;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]); // <Radio key={this.props.rowIndex} checked={this.state.checked} value="null" onChange={this._onChange} />

var ColumnHeaderCheckBoxCell = /*#__PURE__*/function (_Component3) {
  _inherits(ColumnHeaderCheckBoxCell, _Component3);

  var _super24 = _createSuper(ColumnHeaderCheckBoxCell);

  function ColumnHeaderCheckBoxCell() {
    var _this38;

    _classCallCheck(this, ColumnHeaderCheckBoxCell);

    _this38 = _super24.call(this);
    _this38.state = {
      checked: false
    };
    _this38.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
    _this38._onChange = _this38._onChange.bind(_assertThisInitialized(_this38));
    _this38._rowChecked = _this38._rowChecked.bind(_assertThisInitialized(_this38));
    return _this38;
  }

  _createClass(ColumnHeaderCheckBoxCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this39 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unSubscriberSelectOne = this.store.subscribeTo(this.store.ROW_SELECTED, function (state) {
        _this39._rowChecked();
      }); //UI-2976-Clearn

      this.unSubscriberSelectAll = this.store.subscribeTo(this.store.ROW_ALL_SELECTED, function (state) {
        _this39._rowChecked();
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unSubscriberSelectOne();
      this.unSubscriberSelectAll();
    }
  }, {
    key: "_rowChecked",
    value: function _rowChecked() {
      this.setState({
        checked: this.service.isAllRowSelected(this.store.getState().dataList, this.store.getState().config, this.store.getState().selectedRowKeys)
      });
    }
  }, {
    key: "_onChange",
    value: function _onChange() {
      var newChecked = !this.state.checked;
      this.setState({
        checked: newChecked
      });
      this.store.setRowAllSelected(newChecked); //this is to enable row hight

      setTimeout(function () {
        window.dispatchEvent(new Event("resize"));
      }, 0);
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, "checkbox");
    }
  }]);

  return ColumnHeaderCheckBoxCell;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]); // <Checkbox
//     className="headerCellCheckbox headerControllerIcon"
//     key={this.props.rowIndex}
//     checked={this.state.checked}
//     onChange={this._onChange}
// />

var NavigateCell = /*#__PURE__*/function (_React$PureComponent22) {
  _inherits(NavigateCell, _React$PureComponent22);

  var _super25 = _createSuper(NavigateCell);

  function NavigateCell() {
    var _this40;

    _classCallCheck(this, NavigateCell);

    _this40 = _super25.call(this);
    _this40._click = _this40._click.bind(_assertThisInitialized(_this40));
    _this40.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
    _this40._rowChecked = _this40._rowChecked.bind(_assertThisInitialized(_this40));
    _this40.state = {
      rowSelected: false,
      height: 0,
      width: 0
    };
    return _this40;
  }

  _createClass(NavigateCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this41 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.setState({
        width: 50,
        height: this.store.getState().config.rowHeight
      });
      this.unSubscriberSelectRow = this.store.subscribeTo(this.store.ROW_SELECTED, function (state) {
        _this41._rowChecked();
      });
      this.unSubscriberSelectAllRow = this.store.subscribeTo(this.store.ROW_ALL_SELECTED, function (state) {
        _this41._rowChecked();
      });

      this._rowChecked();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unSubscriberSelectRow();
      this.unSubscriberSelectAllRow();
    }
  }, {
    key: "_rowChecked",
    value: function _rowChecked() {
      this.setState({
        rowSelected: this.service.isRowSelected(this.props.rowIndex, this.store.getState())
      });
    }
  }, {
    key: "_click",
    value: function _click(e) {
      e.stopPropagation();

      if ("onNavigate" in this.props) {
        this.props.onNavigate(this.props.dataList[this.props.rowIndex]);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        style: {
          width: this.state.width,
          height: this.state.height
        },
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
          navWrapper: true,
          navWrapperSelected: this.state.rowSelected
        }),
        onClick: this._click
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons"
      }, "arrow_forward")));
    }
  }]);

  return NavigateCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

/***/ }),

/***/ "./src/components/data_table/comps/cells/headercell.js":
/*!*************************************************************!*\
  !*** ./src/components/data_table/comps/cells/headercell.js ***!
  \*************************************************************/
/*! exports provided: HeaderCell */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderCell", function() { return HeaderCell; });
/* harmony import */ var fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fixed-data-table-2 */ "./node_modules/fixed-data-table-2/main.js");
/* harmony import */ var fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var _services_table_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/table_service */ "./src/components/data_table/services/table_service.js");
/* harmony import */ var _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../entities/custom_config */ "./src/components/data_table/entities/custom_config.js");
/* harmony import */ var react_tether__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-tether */ "./node_modules/react-tether/lib/react-tether.js");
/* harmony import */ var react_tether__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_tether__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _entities_column__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../entities/column */ "./src/components/data_table/entities/column.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _cells__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cells */ "./src/components/data_table/comps/cells/cells.js");
/* harmony import */ var _BoundedTetherComp__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../BoundedTetherComp */ "./src/components/data_table/comps/BoundedTetherComp.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }








 // import { Checkbox } from "react-mdl";




var Datetime = __webpack_require__(/*! react-datetime */ "./node_modules/react-datetime/DateTime.js");


var HeaderCell = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(HeaderCell, _React$PureComponent);

  var _super = _createSuper(HeaderCell);

  function HeaderCell() {
    var _this;

    _classCallCheck(this, HeaderCell);

    _this = _super.call(this);
    _this.state = {
      columnConfig: null,
      openFilter: false,
      mouseHover: false,
      currentFiltered: false
    };
    _this.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
    _this._setCfg = _this._setCfg.bind(_assertThisInitialized(_this));
    _this._setFilterCfg = _this._setFilterCfg.bind(_assertThisInitialized(_this));
    _this.sort = _this.sort.bind(_assertThisInitialized(_this));
    _this.filter = _this.filter.bind(_assertThisInitialized(_this));
    _this.onClose = _this.onClose.bind(_assertThisInitialized(_this));
    _this.onMouseEnterSort = _this.onMouseEnterSort.bind(_assertThisInitialized(_this));
    _this.onMouseLeaveSort = _this.onMouseLeaveSort.bind(_assertThisInitialized(_this));
    _this.onFilterUpdate = _this.onFilterUpdate.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(HeaderCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unsubscriberCloseAllPopUp = this.store.subscribeTo(this.store.CLOSE_ALL_FILTER_POPUP, function () {
        _this2.onClose();
      });
      this.unsubsriberSortColumn = this.store.subscribeTo(this.store.SORT_COLUMN, function () {
        _this2._setCfg();
      });
      this.unsubsriberFilterColumn = this.store.subscribeTo(this.store.FILTER_UPDATE, function () {
        _this2._setFilterCfg();
      });

      this._setCfg();

      this._setFilterCfg();

      this.setState({
        currentSorted: false
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriberCloseAllPopUp();
      this.unsubsriberSortColumn();
      this.unsubsriberFilterColumn();
    }
  }, {
    key: "_setCfg",
    value: function _setCfg() {
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);
      var customConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().customConfig;
      var sortIcon;

      if (columnConfig.sortable && customConfig) {
        if (customConfig.getColumnSortOrder(this.props.columnKey) !== _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["ORDER_NONE"]) {
          sortIcon = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
            className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
              "material-icons": true,
              "sortIconUp": true,
              "sortIconDown": customConfig.sorter.order === _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["ORDER_DESC"]
            })
          }, "arrow_upward");
        }
      } else {
        sortIcon = null;
      }

      this.setState({
        columnConfig: columnConfig,
        sortIcon: sortIcon
      });
    }
  }, {
    key: "_setFilterCfg",
    value: function _setFilterCfg() {
      var customConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().customConfig;
      var currentFiltered = false;

      if (customConfig && customConfig.getFilterFor(this.props.columnKey)) {
        currentFiltered = true;
      }

      this.setState({
        currentFiltered: currentFiltered
      });
    }
  }, {
    key: "sort",
    value: function sort() {
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);

      if (columnConfig.sortable) {
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setColumnSort(this.props.columnKey);
      }
    }
  }, {
    key: "filter",
    value: function filter(event) {
      if (event) {
        event.stopPropagation();
      }

      this.store.closeAllFilterPopUp();
      this.setState({
        openFilter: !this.state.openFilter
      });
    }
  }, {
    key: "onClose",
    value: function onClose() {
      this.setState({
        openFilter: false
      });
    }
  }, {
    key: "onFilterUpdate",
    value: function onFilterUpdate(filter) {
      this.store.setFilter(filter);
    }
  }, {
    key: "onMouseEnterSort",
    value: function onMouseEnterSort() {
      this.setState({
        mouseHover: true
      });
    }
  }, {
    key: "onMouseLeaveSort",
    value: function onMouseLeaveSort() {
      this.setState({
        mouseHover: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      if (this.state.columnConfig == null) return null;
      var filterIcon;
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);

      if (columnConfig.filterable) {
        filterIcon = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
          className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
            "material-icons": true,
            up: !this.state.openFilter,
            down: this.state.openFilter
          })
        }, "filter_list");
      } else {
        filterIcon = null;
      }

      var sortIcon = null;

      if (columnConfig.sortable && this.state.mouseHover) {
        sortIcon = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
          className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
            "material-icons": true,
            "sortIconUp": true
          })
        }, "arrow_upward");
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "headerTitle",
        onClick: this.sort,
        onMouseEnter: this.onMouseEnterSort,
        onMouseLeave: this.onMouseLeaveSort
      }, this.state.columnConfig.title, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_9__["BoundedTetherComp"], {
        className: "dvTetheredToolTip",
        attachment: "top center",
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "headerTooltipAttachPoint"
      }), this.state.mouseHover && this.state.columnConfig.tooltip && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells__WEBPACK_IMPORTED_MODULE_8__["ToolTipComp"], _extends({}, this.props, {
        content: this.state.columnConfig.tooltip
      })))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          sortIconWrapper: true,
          hoverSort: this.state.mouseHover && !this.state.sortIcon
        }),
        onMouseEnter: this.onMouseEnterSort,
        onMouseLeave: this.onMouseLeaveSort,
        onClick: this.sort
      }, " ", this.state.sortIcon || sortIcon, " "), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          filterIconWrapper: true,
          selectedFilter: this.state.currentFiltered
        }),
        onClick: function onClick(e) {
          return _this3.filter(e);
        }
      }, " ", filterIcon, " "), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_9__["BoundedTetherComp"], {
        attachment: "top left",
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "filterAttachPoint"
      }), this.state.openFilter && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HeaderFilterComp, _extends({}, this.props, {
        onClose: this.onClose
      })))));
    }
  }]);

  return HeaderCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var HeaderFilterComp = /*#__PURE__*/function (_React$PureComponent2) {
  _inherits(HeaderFilterComp, _React$PureComponent2);

  var _super2 = _createSuper(HeaderFilterComp);

  function HeaderFilterComp(props) {
    _classCallCheck(this, HeaderFilterComp);

    return _super2.call(this, props);
  }

  _createClass(HeaderFilterComp, [{
    key: "render",
    value: function render() {
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);
      var filterComp = null;

      if (columnConfig.type === _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["TYPE_NUMBER"]) {
        filterComp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HeaderFilterNumberComp, this.props);
      } else if (columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_SINGLE_SELECT_ACTIONS"] || columnConfig.filterOptions.length > 0) {
        filterComp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HeaderFilterListComp, this.props);
      } else if (columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_TEXT"] || columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_PURE_TEXT"] || columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_HTML"] || columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_LIST"] || columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_CLICKABLE"]) {
        filterComp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HeaderFilterCompTextHtml, this.props);
      } else if (columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_DATE"] || columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_DATETIME"]) {
        filterComp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HeaderFilterDateTimeComp, this.props);
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          "headerFilterWrapper": true,
          "normaFilterlWrapper": !(columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_DATE"] || columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_DATETIME"]),
          "dateTimePickerWrapper": columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_DATE"] || columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_DATETIME"]
        }),
        onClick: function onClick(e) {
          return e.stopPropagation();
        }
      }, filterComp);
    }
  }]);

  return HeaderFilterComp;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var HeaderFilterNumberComp = /*#__PURE__*/function (_React$PureComponent3) {
  _inherits(HeaderFilterNumberComp, _React$PureComponent3);

  var _super3 = _createSuper(HeaderFilterNumberComp);

  function HeaderFilterNumberComp(props) {
    var _this4;

    _classCallCheck(this, HeaderFilterNumberComp);

    _this4 = _super3.call(this, props);
    _this4.updateStartNum = _this4.updateStartNum.bind(_assertThisInitialized(_this4));
    _this4.updateEndNum = _this4.updateEndNum.bind(_assertThisInitialized(_this4));
    _this4.confirm = _this4.confirm.bind(_assertThisInitialized(_this4));
    _this4.closeme = _this4.closeme.bind(_assertThisInitialized(_this4));
    _this4.customConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this4.props.appId).getState().customConfig;
    _this4.currentFilter = null;

    if (_this4.customConfig) {
      _this4.currentFilter = _this4.customConfig.getFilterFor(_this4.props.columnKey);
    }

    if (_this4.currentFilter) {
      _this4.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: _this4.props.columnKey,
        operator: _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["TYPE_BETWEEN"],
        value1: _this4.currentFilter.value1,
        value2: _this4.currentFilter.value2
      });
    } else {
      _this4.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: _this4.props.columnKey,
        operator: _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["TYPE_BETWEEN"],
        value1: 0,
        value2: 0
      });
    }

    return _this4;
  }

  _createClass(HeaderFilterNumberComp, [{
    key: "updateStartNum",
    value: function updateStartNum(e) {
      this.filter.value1 = e.target.value;
    }
  }, {
    key: "updateEndNum",
    value: function updateEndNum(e) {
      this.filter.value2 = e.target.value;
    }
  }, {
    key: "confirm",
    value: function confirm() {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setFilter(this.filter);
    }
  }, {
    key: "closeme",
    value: function closeme() {
      this.props.onClose();
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerFilerNumber"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerFilerNumberFilters"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", null, "From: "), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
        type: "number",
        onChange: this.updateStartNum
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", null, "To"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
        type: "number",
        onChange: this.updateEndNum
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "cfx"
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerFilterButtons"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          "material-icons": true
        }),
        onClick: this.confirm
      }, "done"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons",
        onClick: this.closeme
      }, "clear")));
    }
  }]);

  return HeaderFilterNumberComp;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var HeaderFilterDateTimeComp = /*#__PURE__*/function (_React$PureComponent4) {
  _inherits(HeaderFilterDateTimeComp, _React$PureComponent4);

  var _super4 = _createSuper(HeaderFilterDateTimeComp);

  function HeaderFilterDateTimeComp(props) {
    var _this5;

    _classCallCheck(this, HeaderFilterDateTimeComp);

    _this5 = _super4.call(this, props);
    _this5.state = {
      invalid: true
    };
    _this5.updateStartDate = _this5.updateStartDate.bind(_assertThisInitialized(_this5));
    _this5.updateEndDate = _this5.updateEndDate.bind(_assertThisInitialized(_this5));
    _this5.confirm = _this5.confirm.bind(_assertThisInitialized(_this5));
    _this5.closeme = _this5.closeme.bind(_assertThisInitialized(_this5));
    _this5.customConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this5.props.appId).getState().customConfig;
    _this5.currentFilter = null;

    if (_this5.customConfig) {
      _this5.currentFilter = _this5.customConfig.getFilterFor(_this5.props.columnKey);
    }

    if (_this5.currentFilter) {
      _this5.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: _this5.props.columnKey,
        operator: _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["TYPE_BETWEEN"],
        value1: new Date(_this5.currentFilter.value1),
        value2: new Date(_this5.currentFilter.value2)
      });
    } else {
      _this5.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: _this5.props.columnKey,
        operator: _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["TYPE_BETWEEN"],
        value1: new Date(),
        value2: new Date()
      });
    } //this.checkValidate();


    return _this5;
  }

  _createClass(HeaderFilterDateTimeComp, [{
    key: "updateStartDate",
    value: function updateStartDate(e) {
      this.filter.value1 = e._d.getTime();
      this.checkValidate();
    }
  }, {
    key: "updateEndDate",
    value: function updateEndDate(e) {
      this.filter.value2 = e._d.getTime();
      this.checkValidate();
    }
  }, {
    key: "checkValidate",
    value: function checkValidate() {
      this.setState({
        invalid: this.filter.inValid()
      });
    }
  }, {
    key: "confirm",
    value: function confirm() {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setFilter(this.filter);
      this.closeme();
    }
  }, {
    key: "closeme",
    value: function closeme() {
      this.props.onClose();
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerFilerDateTime"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerDateTimeFilters"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "startDTWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", null, "From DateTime"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Datetime, {
        dateFormat: "YYYY-MM-DD",
        defaultValue: this.filter.value1,
        onChange: this.updateStartDate
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "endDTWraper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", null, "To DateTime"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Datetime, {
        dateFormat: "YYYY-MM-DD",
        defaultValue: this.filter.value2,
        onChange: this.updateEndDate
      }))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "cfx"
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerFilterButtons"
      }, this.state.invalid && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "error"
      }, this.state.invalid), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          "material-icons": true,
          "hidden": this.state.invalid
        }),
        onClick: this.confirm
      }, "done"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons",
        onClick: this.closeme
      }, "clear")));
    }
  }]);

  return HeaderFilterDateTimeComp;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var HeaderFilterListCheckBoxComp = /*#__PURE__*/function (_React$PureComponent5) {
  _inherits(HeaderFilterListCheckBoxComp, _React$PureComponent5);

  var _super5 = _createSuper(HeaderFilterListCheckBoxComp);

  function HeaderFilterListCheckBoxComp(props) {
    var _this6;

    _classCallCheck(this, HeaderFilterListCheckBoxComp);

    _this6 = _super5.call(this, props);
    _this6.filter = _this6.filter.bind(_assertThisInitialized(_this6));
    _this6.state = {
      checked: _this6.props.currentFilter.value1.includes(_this6.props.item.value)
    };
    return _this6;
  }

  _createClass(HeaderFilterListCheckBoxComp, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        checked: nextProps.currentFilter.value1.includes(this.props.item.value)
      });
    }
  }, {
    key: "filter",
    value: function filter() {
      var _this7 = this;

      this.setState({
        checked: !this.state.checked
      }, function () {
        _this7.props.updateFilter(_this7.props.item, !_this7.state.checked);
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "checkBoxRowWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", null, "Checkbox"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "title",
        onClick: this.filter
      }, this.props.item.title));
    }
  }]);

  return HeaderFilterListCheckBoxComp;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent); // <Checkbox key={this.props.item.value} checked={this.state.checked} onChange={this.filter} />


var HeaderFilterListComp = /*#__PURE__*/function (_React$PureComponent6) {
  _inherits(HeaderFilterListComp, _React$PureComponent6);

  var _super6 = _createSuper(HeaderFilterListComp);

  function HeaderFilterListComp(props) {
    var _this8;

    _classCallCheck(this, HeaderFilterListComp);

    _this8 = _super6.call(this, props);
    _this8.closeme = _this8.closeme.bind(_assertThisInitialized(_this8));
    _this8.customConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this8.props.appId).getState().customConfig;
    _this8.currentFilter = null;
    _this8.columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this8.props.appId).getState().config.getColumnConfig(_this8.props.columnKey);
    _this8.keysMap = [];
    _this8.checkList = [];
    _this8.filterObj = {
      by: _this8.props.columnKey,
      operator: "in",
      value1: []
    };

    if (_this8.columnConfig.filterOptions.length !== 0) {
      _this8.columnConfig.filterOptions.forEach(function (item) {
        _this8.keysMap.push({
          title: item.title,
          value: item.value
        });
      });
    }

    if (_this8.columnConfig.actionOptions.length !== 0) {
      _this8.columnConfig.actionOptions.forEach(function (item) {
        _this8.keysMap.push({
          title: item.title,
          value: item.value
        });
      });
    }

    _this8.filterObj.value1 = _toConsumableArray(_this8.keysMap);

    _this8.keysMap.unshift({
      title: 'All',
      value: 'all'
    });

    if (_this8.customConfig) {
      _this8.currentFilter = _this8.customConfig.getFilterFor(_this8.props.columnKey);
    }

    if (_this8.currentFilter) {
      _this8.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: _this8.props.columnKey,
        operator: _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["TYPE_EQUALS"],
        value1: _this8.currentFilter.value1
      });
      _this8.checkList = _this8.keysMap.map(function (ele, key) {
        return {
          title: ele.title,
          key: ele.title === 'All' ? "".concat(_this8.props.columnKey, "_all") : "".concat(ele.title, "_").concat(key),
          value: ele.value,
          checked: ele.title === 'All' ? _this8.currentFilter.value1.length + 1 === _this8.keysMap.length : _this8.currentFilter.value1.includes(ele.value)
        };
      });
    } else {
      _this8.checkList = _this8.keysMap.map(function (ele, key) {
        return {
          title: ele.title,
          key: ele.title === 'All' ? "".concat(_this8.props.columnKey, "_all") : "".concat(ele.title, "_").concat(key),
          value: ele.value,
          checked: true
        };
      });
      _this8.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"](_this8.filterObj);
      _this8.currentFilter = _this8.filter;
    }

    _this8.state = {
      checkList: _this8.checkList
    };
    return _this8;
  }

  _createClass(HeaderFilterListComp, [{
    key: "closeme",
    value: function closeme() {
      this.props.onClose();
    }
  }, {
    key: "checkThis",
    value: function checkThis(item) {
      var _this9 = this;

      if (item.title === 'All') {
        if (item.checked) {
          this.checkList.forEach(function (i) {
            i.checked = false;
          });
        } else {
          this.checkList.forEach(function (i) {
            i.checked = true;
          });
        }
      }

      var filterValue = [];
      this.checkList.forEach(function (j) {
        if (item.title !== 'All' && j.title === item.title) {
          j.checked = !j.checked;
        }

        if (item.title !== 'All' && j.checked) {
          filterValue.push(j.value);
        }
      });
      var uncheck = this.checkList.find(function (ele, index) {
        return index !== 0 && ele.checked === false;
      });
      this.checkList[0].checked = !uncheck;
      this.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: this.props.columnKey,
        operator: "in",
        value1: filterValue
      });
      this.setState({
        checkList: _toConsumableArray(this.checkList)
      }, function () {
        _this9.currentFilter = _this9.filter;
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this9.props.appId).setFilter(_this9.filter);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this10 = this;

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerListWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerFilterButtons"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons",
        onClick: this.closeme
      }, "clear")), this.state.checkList.length !== 0 && this.state.checkList.map(function (item, index) {
        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: item.key,
          className: "checkBoxRowWrapper"
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", null, "checkbox"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
          className: "title",
          onClick: function onClick() {
            return _this10.checkThis(item);
          }
        }, item.title));
      }));
    }
  }]);

  return HeaderFilterListComp;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent); // <Checkbox checked={item.checked} onChange={() => this.checkThis(item)} />


var HeaderFilterCompTextHtml = /*#__PURE__*/function (_React$PureComponent7) {
  _inherits(HeaderFilterCompTextHtml, _React$PureComponent7);

  var _super7 = _createSuper(HeaderFilterCompTextHtml);

  function HeaderFilterCompTextHtml(props) {
    var _this11;

    _classCallCheck(this, HeaderFilterCompTextHtml);

    _this11 = _super7.call(this, props);
    _this11.confirm = _this11.confirm.bind(_assertThisInitialized(_this11));
    _this11.closeme = _this11.closeme.bind(_assertThisInitialized(_this11));
    _this11.onFocus = _this11.onFocus.bind(_assertThisInitialized(_this11));
    _this11.onBlur = _this11.onBlur.bind(_assertThisInitialized(_this11));
    _this11.customConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this11.props.appId).getState().customConfig;
    _this11.currentFilter = null;

    if (_this11.customConfig) {
      _this11.currentFilter = _this11.customConfig.getFilterFor(_this11.props.columnKey);
    }

    if (_this11.currentFilter) {
      _this11.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: _this11.props.columnKey,
        operator: "contains",
        value1: _this11.currentFilter.value1
      });
    } else {
      _this11.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: _this11.props.columnKey,
        operator: "contains",
        value1: ""
      });
    }

    _this11.state = {
      focused: false
    };
    return _this11;
  }

  _createClass(HeaderFilterCompTextHtml, [{
    key: "onFilterUpdate",
    value: function onFilterUpdate(filter) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setFilter(this.filter);
    }
  }, {
    key: "confirm",
    value: function confirm() {// this.filter.value1 = this.refs.columnInputBox.value;
      // S(this.props.appId).setFilter(this.filter);
      // this.closeme();
    }
  }, {
    key: "closeme",
    value: function closeme() {
      this.props.onClose();
    }
  }, {
    key: "onFocus",
    value: function onFocus() {
      this.setState({
        focused: true
      });
    }
  }, {
    key: "onBlur",
    value: function onBlur() {
      this.setState({
        focused: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "filterSearchTitle"
      }, "Please enter content to search:"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          filterSearchWrapper: true,
          focused: this.state.focused
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
        ref: "columnInputBox",
        placeholder: "Search",
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        type: "text",
        defaultValue: this.filter.value1
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons"
      }, "search")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerFilterButtons"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons",
        onClick: this.confirm
      }, "done"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons",
        onClick: this.closeme
      }, "clear")));
    }
  }]);

  return HeaderFilterCompTextHtml;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

/***/ }),

/***/ "./src/components/data_table/datatable.scss":
/*!**************************************************!*\
  !*** ./src/components/data_table/datatable.scss ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./datatable.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/components/data_table/datatable.scss");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);



module.exports = content.locals || {};

/***/ }),

/***/ "./src/components/data_table/entities/column.js":
/*!******************************************************!*\
  !*** ./src/components/data_table/entities/column.js ***!
  \******************************************************/
/*! exports provided: TYPE_TEXT, TYPE_PURE_TEXT, TYPE_HTML, TYPE_CLICKABLE, TYPE_PURE_CLICKABLE, TYPE_SINGLE_SELECT_ACTIONS, TYPE_ICON_CALL_BACK, TYPE_LIST, TYPE_NUMBER, TYPE_HTML_LIST, TYPE_MORE_OPTIONS, DOWNLOAD_STANDARD_ALWAYS, DOWNLOAD_STANDARD_NEVER, TYPE_DATE, TYPE_DATETIME, TYPE_NUMBER_FORMAT_COMMASEPERATED, TYPE_NUMBER_FORMAT_SHORTENED, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_TEXT", function() { return TYPE_TEXT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_PURE_TEXT", function() { return TYPE_PURE_TEXT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_HTML", function() { return TYPE_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_CLICKABLE", function() { return TYPE_CLICKABLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_PURE_CLICKABLE", function() { return TYPE_PURE_CLICKABLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_SINGLE_SELECT_ACTIONS", function() { return TYPE_SINGLE_SELECT_ACTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_ICON_CALL_BACK", function() { return TYPE_ICON_CALL_BACK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_LIST", function() { return TYPE_LIST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_NUMBER", function() { return TYPE_NUMBER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_HTML_LIST", function() { return TYPE_HTML_LIST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_MORE_OPTIONS", function() { return TYPE_MORE_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOWNLOAD_STANDARD_ALWAYS", function() { return DOWNLOAD_STANDARD_ALWAYS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOWNLOAD_STANDARD_NEVER", function() { return DOWNLOAD_STANDARD_NEVER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_DATE", function() { return TYPE_DATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_DATETIME", function() { return TYPE_DATETIME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_NUMBER_FORMAT_COMMASEPERATED", function() { return TYPE_NUMBER_FORMAT_COMMASEPERATED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_NUMBER_FORMAT_SHORTENED", function() { return TYPE_NUMBER_FORMAT_SHORTENED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Column; });


function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TYPE_TEXT = 'text';
var TYPE_PURE_TEXT = 'pure_text';
var TYPE_HTML = 'html';
var TYPE_CLICKABLE = 'clickable';
var TYPE_PURE_CLICKABLE = 'pure_clickable';
var TYPE_SINGLE_SELECT_ACTIONS = 'single_select_actions';
var TYPE_ICON_CALL_BACK = 'icon_call_back';
var TYPE_LIST = 'list';
var TYPE_NUMBER = 'number';
var TYPE_HTML_LIST = 'html_list';
var TYPE_MORE_OPTIONS = 'more_options';
var DOWNLOAD_STANDARD_ALWAYS = 'always';
var DOWNLOAD_STANDARD_NEVER = 'never';
var TYPE_DATE = 'date';
var TYPE_DATETIME = 'date_time';
var TYPE_NUMBER_FORMAT_COMMASEPERATED = 'COMMASEPERATED';
var TYPE_NUMBER_FORMAT_SHORTENED = 'SHORTENED';

var ColumnActionOption = function ColumnActionOption(data) {
  _classCallCheck(this, ColumnActionOption);

  this['value'] = 'value' in data ? data.value : '';
  this['title'] = 'title' in data ? data.title : '';
};

var Column = /*#__PURE__*/function () {
  function Column(data, index) {
    _classCallCheck(this, Column);

    this["key"] = data["key"] || "";
    this["title"] = data["title"] || "";
    this["type"] = data["type"] || TYPE_HTML; // text | html

    this["width"] = data["width"] || 100;
    this["resizable"] = "resizable" in data ? data.resizable : false;
    this["reordable"] = "reordable" in data ? data.reordable : false;
    this["flexGrow"] = "flexGrow" in data ? data.flexGrow : 1;
    this["fixed"] = "fixed" in data ? data.fixed : false;
    this["fixedRight"] = "fixedRight" in data ? data.fixedRight : false;
    this['format'] = 'format' in data ? data.format : '';
    this['editable'] = 'editable' in data ? data.editable : false;
    var actionOptions = [];

    if ('actionOptions' in data) {
      data.actionOptions.forEach(function (option) {
        actionOptions.push(new ColumnActionOption(option));
      });
    }

    this['actionOptions'] = actionOptions;
    this['hidden'] = 'hidden' in data ? data.hidden : false;
    this['sortable'] = 'sortable' in data ? data.sortable : false;
    this['filterable'] = 'filterable' in data ? data.filterable : false;
    this["primaryKey"] = "primaryKey" in data ? data.primaryKey : index === 0;
    this['filterOptions'] = 'filterOptions' in data ? data.filterOptions : [];
    this['controllers'] = 'controllers' in data ? data.controllers : {};
    this['downloadStandard'] = 'downloadStandard' in data ? data.downloadStandard : '';
    this['tooltip'] = 'tooltip' in data ? data.tooltip : '';
    this['disableTooltip'] = 'disableTooltip' in data ? data.disableTooltip : false; //dynamically adjust column minwidth, so that header is fully view

    if (this["title"] !== '') {
      if (this['width'] > 20) {
        //for some column, such as spacer, we need it to be small
        this['minWidth'] = this['hidden'] ? 0 : this.getWidthOfText(this["title"]) + 100;

        if (this['minWidth'] > this['width']) {
          this['width'] = this['minWidth'];
        }
      } else {
        this['minWidth'] = 0;
      }
    } else {
      this['minWidth'] = 0;
    }
  }

  _createClass(Column, [{
    key: "getActionOptions",
    value: function getActionOptions(optionValue) {
      var option = this.actionOptions.find(function (item) {
        return item.value.toLowerCase() === optionValue.toLowerCase();
      });
      return option ? option : {
        title: optionValue,
        value: optionValue
      };
    }
  }, {
    key: "getWidthOfText",
    value: function getWidthOfText(txt) {
      var fontName = 'Roboto, "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif';
      var fontSize = '14px';

      if (this.getWidthOfText.c === undefined) {
        this.getWidthOfText.c = document.createElement("canvas");
        this.getWidthOfText.ctx = this.getWidthOfText.c.getContext("2d");
      }

      this.getWidthOfText.ctx.font = fontSize + " " + fontName;
      return this.getWidthOfText.ctx.measureText(txt).width;
    }
  }]);

  return Column;
}();



/***/ }),

/***/ "./src/components/data_table/entities/custom_config.js":
/*!*************************************************************!*\
  !*** ./src/components/data_table/entities/custom_config.js ***!
  \*************************************************************/
/*! exports provided: default, ORDER_ASC, ORDER_DESC, ORDER_NONE, Sorter, TYPE_CONTAINS, TYPE_EQUALS, TYPE_GREATER_OR_EQUAL, TYPE_LESS_OR_EQUAL, TYPE_BETWEEN, TYPE_NUMBER, TYPE_IN, Filter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CustomConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ORDER_ASC", function() { return ORDER_ASC; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ORDER_DESC", function() { return ORDER_DESC; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ORDER_NONE", function() { return ORDER_NONE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sorter", function() { return Sorter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_CONTAINS", function() { return TYPE_CONTAINS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_EQUALS", function() { return TYPE_EQUALS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_GREATER_OR_EQUAL", function() { return TYPE_GREATER_OR_EQUAL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_LESS_OR_EQUAL", function() { return TYPE_LESS_OR_EQUAL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_BETWEEN", function() { return TYPE_BETWEEN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_NUMBER", function() { return TYPE_NUMBER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_IN", function() { return TYPE_IN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Filter", function() { return Filter; });


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CustomConfig = /*#__PURE__*/function () {
  function CustomConfig(data) {
    var _this = this;

    _classCallCheck(this, CustomConfig);

    this["columnsOrder"] = [];
    this["hiddenColumns"] = [];
    this["sorter"] = {};
    this["filters"] = [];
    this["columnWidths"] = {};

    if (data) {
      if ("columnsOrder" in data) this["columnsOrder"] = data["columnsOrder"];
      if ("hiddenColumns" in data) this["hiddenColumns"] = data["hiddenColumns"];
      if ("sorter" in data) this["sorter"] = new Sorter(data.sorter);
      if ("columnWidths" in data) this['columnWidths'] = data['columnWidths'];
      if ("filters" in data) data["filters"].forEach(function (filter) {
        _this.filters.push(new Filter(filter));
      });
    }
  }

  _createClass(CustomConfig, [{
    key: "setColumnWidths",
    value: function setColumnWidths(widths) {
      this['columnWidths'] = widths;
    }
  }, {
    key: "setColumnsOrder",
    value: function setColumnsOrder(columns) {
      this["columnsOrder"] = columns;
    }
  }, {
    key: "setHiddenColumns",
    value: function setHiddenColumns(columns) {
      this["hiddenColumns"] = columns;
    }
  }, {
    key: "getColumnSortOrder",
    value: function getColumnSortOrder(columnKey) {
      if (Object.keys(this.sorter).length === 0) {
        return ORDER_NONE;
      } else {
        if (this.sorter.by === columnKey) {
          return this.sorter.order;
        } else {
          return ORDER_NONE;
        }
      }
    }
  }, {
    key: "updateSorter",
    value: function updateSorter(columnKey) {
      //if sorter is empty, create it
      if (Object.keys(this.sorter).length === 0) {
        this.sorter = new Sorter();
      }

      this.sorter.toggle(columnKey);
    }
  }, {
    key: "updateFilter",
    value: function updateFilter(filter) {
      var index = -1;

      for (var i = this.filters.length - 1; i >= 0; i--) {
        if (this.filters[i].by === filter.by) {
          index = i;
          break;
        }
      } //1. if not exist, we just add


      if (index === -1) {
        this.filters.push(filter);
      } else {
        //2. if exist, we need to update
        //2.1, if value is empty, we remove it1
        var toRemove = false;

        if (filter.operator === TYPE_CONTAINS || filter.operator === TYPE_EQUALS || filter.operator === TYPE_GREATER_OR_EQUAL || filter.operator === TYPE_LESS_OR_EQUAL) {
          if (filter.value1 === "" || filter.value1 === undefined || filter.value1 == null) {
            //remove this
            toRemove = true;
          }
        } else {
          if (filter.operator === TYPE_IN) {
            if (filter.value1.length === 0) {
              //if empty list item, let's just remove it
              toRemove = true;
            } else {
              //let's remove filter
              this.filters.splice(index, 1);
              toRemove = false;
            }
          } else if (filter.value1 === "" || filter.value1 === undefined || filter.value1 == null || filter.value2 === "" || filter.value2 === undefined || filter.value2 == null) toRemove = true;
        }

        if (toRemove) {
          this.filters.splice(index, 1);
        } else {
          //toUpdate
          this.filters[index] = filter;
        }
      }
    }
  }, {
    key: "getFilterFor",
    value: function getFilterFor(colKey) {
      return this.filters.find(function (filter) {
        return filter.by === colKey;
      });
    }
  }]);

  return CustomConfig;
}();


var ORDER_ASC = "asc";
var ORDER_DESC = "desc";
var ORDER_NONE = "none";
var Sorter = /*#__PURE__*/function () {
  function Sorter(data) {
    _classCallCheck(this, Sorter);

    if (data) {
      this.by = "by" in data ? data["by"] : "";
      this.order = "order" in data ? data["order"] : ORDER_ASC;
    } else {
      this.by = "";
      this.order = "";
    }
  }

  _createClass(Sorter, [{
    key: "toggle",
    value: function toggle(columnKey) {
      if (this.by !== columnKey) {
        this.resetSort(columnKey);
      } else {
        this.toggleSort();
      }
    }
  }, {
    key: "resetSort",
    value: function resetSort(columnKey) {
      this.by = columnKey;
      this.order = ORDER_ASC;
    }
  }, {
    key: "toggleSort",
    value: function toggleSort() {
      var nextOrder;

      if (this.order === ORDER_ASC) {
        nextOrder = ORDER_DESC;
      } else if (this.order === ORDER_DESC) {
        nextOrder = ORDER_NONE;
      } else {
        nextOrder = ORDER_ASC;
      }

      this.order = nextOrder;
    }
  }]);

  return Sorter;
}();
var TYPE_CONTAINS = "contains";
var TYPE_EQUALS = "equals";
var TYPE_GREATER_OR_EQUAL = "greater_or_equal";
var TYPE_LESS_OR_EQUAL = "less_or_equal";
var TYPE_BETWEEN = "between";
var TYPE_NUMBER = "number";
var TYPE_IN = "in";
var Filter = /*#__PURE__*/function () {
  function Filter(data) {
    _classCallCheck(this, Filter);

    this.by = "by" in data ? data.by : "";
    this.operator = "operator" in data ? data.operator : "";
    this.value1 = "value1" in data ? data["value1"] : "";
    this.value2 = "value2" in data ? data["value2"] : "";
  }

  _createClass(Filter, [{
    key: "inValid",
    value: function inValid() {
      if (this.operator === TYPE_BETWEEN) {
        var errorCode = false;

        if (!this.value1) {
          errorCode = 'Start datetime missing';
        } else if (!this.value2) {
          errorCode = 'End datetime missing';
        } else if (this.value1 > this.value2) {
          errorCode = 'End datetime before start datetime';
        }

        return errorCode;
      }
    }
  }]);

  return Filter;
}();

/***/ }),

/***/ "./src/components/data_table/entities/more_option.js":
/*!***********************************************************!*\
  !*** ./src/components/data_table/entities/more_option.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MoreOptionItems; });
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MoreOptionItem = function MoreOptionItem(item) {
  _classCallCheck(this, MoreOptionItem);

  if (typeof item === 'string') {
    this['value'] = item;
    this['title'] = item;
  } else {
    this['value'] = item['value'];
    this['title'] = item['title'];
  }
};

var MoreOptionItems = /*#__PURE__*/function () {
  function MoreOptionItems(list) {
    var _this = this;

    _classCallCheck(this, MoreOptionItems);

    this['moreOptionItems'] = [];

    if (list) {
      list.forEach(function (item) {
        _this['moreOptionItems'].push(new MoreOptionItem(item));
      });
    }
  }

  _createClass(MoreOptionItems, [{
    key: "findByValue",
    value: function findByValue(value) {
      var foundItem = null;
      this['moreOptionItems'].forEach(function (item) {
        if (item.value == value) {
          foundItem = item;
        }
      });
      return foundItem;
    }
  }]);

  return MoreOptionItems;
}();



/***/ }),

/***/ "./src/components/data_table/entities/page.js":
/*!****************************************************!*\
  !*** ./src/components/data_table/entities/page.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Page; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Page = /*#__PURE__*/function () {
  function Page(data) {
    _classCallCheck(this, Page);

    if (data) {
      this["total"] = "total" in data ? data["total"] : 0;
      this["pageSize"] = "pageSize" in data ? data["pageSize"] : 20;
      this["currentPage"] = "currentPage" in data ? data["currentPage"] : 1;
      this["totalPage"] = 0;
    } else {
      this["total"] = 0;
      this["pageSize"] = 20;
      this["currentPage"] = 1;
      this["totalPage"] = 0;
    }
  }

  _createClass(Page, [{
    key: "reset",
    value: function reset() {
      this.total = 0;
      this.currentPage = 1;
      this.totalPage = 0;
    }
  }, {
    key: "setTotal",
    value: function setTotal(total) {
      this.total = total;

      if (total % this.pageSize === 0) {
        this.totalPage = total / this.pageSize;
      } else {
        this.totalPage = Math.ceil(total / this.pageSize);
      }
    }
  }, {
    key: "setCurrentPage",
    value: function setCurrentPage(page) {
      this.currentPage = page;
    }
  }, {
    key: "getPageRange",
    value: function getPageRange() {
      var start = this.pageSize * (this.currentPage - 1) + 1;
      var end = Math.min(this.pageSize * this.currentPage, this.total);
      return [start, end];
    }
  }, {
    key: "isFirstEnabled",
    value: function isFirstEnabled() {
      return this.currentPage !== 1;
    }
  }, {
    key: "isPreEnabled",
    value: function isPreEnabled() {
      return this.currentPage > 1;
    }
  }, {
    key: "isNextEnabled",
    value: function isNextEnabled() {
      return this.currentPage < this.totalPage;
    }
  }, {
    key: "isLastEnabled",
    value: function isLastEnabled() {
      return this.currentPage !== this.totalPage;
    }
  }, {
    key: "first",
    value: function first() {
      this.currentPage = 1;
    }
  }, {
    key: "pre",
    value: function pre() {
      this.currentPage--;
    }
  }, {
    key: "next",
    value: function next() {
      if (this.currentPage < this.totalPage) this.currentPage++;
    }
  }, {
    key: "last",
    value: function last() {
      this.currentPage = this.totalPage;
    }
  }]);

  return Page;
}();



/***/ }),

/***/ "./src/components/data_table/entities/table.js":
/*!*****************************************************!*\
  !*** ./src/components/data_table/entities/table.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Table; });
/* harmony import */ var _column__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./column */ "./src/components/data_table/entities/column.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var Table = /*#__PURE__*/function () {
  function Table(data) {
    var _this = this;

    _classCallCheck(this, Table);

    this['rowHeight'] = 'rowHeight' in data ? data.rowHeight : 50;
    this['headerHeight'] = 'headerHeight' in data ? data.headerHeight : 60;
    this['width'] = 'width' in data ? data.width : 800;
    this['height'] = 'height' in data ? data.height : 400;
    this["enableCheckBox"] = "enableCheckBox" in data ? data["enableCheckBox"] : false;
    this['enableRadioButton'] = 'enableRadioButton' in data ? data.enableRadioButton : false;
    this["enablePaginator"] = "enablePaginator" in data ? data["enablePaginator"] : false;
    this['pageSize'] = 'pageSize' in data ? data.pageSize : 20;
    this["rowExpandable"] = "rowExpandable" in data ? data.rowExpandable : false;
    this["rowCollapseable"] = "rowCollapseable" in data ? data["rowCollapseable"] : false;
    this["collapseRowHeight"] = "collapseRowHeight" in data ? data["collapseRowHeight"] : 50;
    this["singleRowToggleable"] = "singleRowToggleable" in data ? data.singleRowToggleable : false;
    this["theme"] = "theme" in data ? data.theme : "light";
    this["global"] = "global" in data ? data.global : false;

    if (this["global"] === false) {
      this['tableSearch'] = 'tableSearch' in data ? data.tableSearch : false;
    } else {
      this['tableSearch'] = false;
    }

    this['hideSetting'] = 'hideSetting' in data ? data['hideSetting'] : false;
    this["navigateable"] = "navigateable" in data ? data.navigateable : false;
    this["columns"] = [];
    var index = 0;
    data["columns"].forEach(function (col) {
      _this["columns"].push(new _column__WEBPACK_IMPORTED_MODULE_0__["default"](col, index));

      index++;
    });
    this['downloadable'] = 'downloadable' in data ? data.downloadable : false;
    this['listDeliminator'] = 'listDeliminator' in data ? data.listDeliminator : ',';
    this['totalTitle'] = 'totalTitle' in data ? data.totalTitle : '';
    this['enableAllGlobalSelector'] = 'enableAllGlobalSelector' in data ? data.enableAllGlobalSelector : false;
    this['deCoupleRowSelectAndCheckbox'] = 'deCoupleRowSelectAndCheckbox' in data ? data.deCoupleRowSelectAndCheckbox : false;
    this['listView'] = 'listView' in data ? data.listView : false;

    if (this['listView']) {
      this["rowHeight"] += 10;
    }

    this['hideTotal'] = 'hideTotal' in data ? data.hideTotal : false;
    this['enforceResetFilterBtn'] = 'enforceResetFilterBtn' in data ? data.enforceResetFilterBtn : false;
  }

  _createClass(Table, [{
    key: "getColumnsOrder",
    value: function getColumnsOrder() {
      var columnKeys = [];
      this.columns.forEach(function (column) {
        columnKeys.push(column.key);
      });
      return columnKeys;
    }
  }, {
    key: "getVisibleColumnsOrder",
    value: function getVisibleColumnsOrder() {
      var columnKeys = [];
      this.columns.forEach(function (column) {
        if (!column.hidden) columnKeys.push(column.key);
      });
      return columnKeys;
    }
  }, {
    key: "getColumnConfig",
    value: function getColumnConfig(key) {
      var config = null;
      this.columns.forEach(function (column) {
        if (column.key === key) {
          config = column;
        }
      });
      return config;
    }
  }, {
    key: "getPrimaryColumnKey",
    value: function getPrimaryColumnKey() {
      var key = "";
      this["columns"].forEach(function (col) {
        if (col.primaryKey) {
          key = col.key;
        }
      });
      return key;
    }
  }, {
    key: "columnHidden",
    value: function columnHidden(columnKey) {
      return this.getColumnConfig(columnKey) ? this.getColumnConfig(columnKey).hidden : true;
    }
  }, {
    key: "columnToBeDownloaded",
    value: function columnToBeDownloaded(columnKey) {
      var cfg = this.getColumnConfig(columnKey);

      if (!cfg) {
        // TODO: Check the logic: column is not there, then don't download
        return false;
      }

      if ('downloadStandard' in cfg && cfg.downloadStandard !== '') {
        if (cfg.downloadStandard === 'never') {
          return false;
        } else if (cfg.downloadStandard === 'always') {
          return true;
        }
      }

      if (cfg.type === 'text' || cfg.type === 'html' || cfg.type === 'pure_text') {
        return !this.columnHidden(columnKey);
      } else {
        return false;
      }
    }
  }, {
    key: "getHiddenColumnKeys",
    value: function getHiddenColumnKeys() {
      var keys = [];
      this["columns"].forEach(function (col) {
        if (col.hidden) {
          keys.push(col.key);
        }
      });
      return keys;
    }
  }, {
    key: "updateColumnWidth",
    value: function updateColumnWidth(colKey, width) {
      this["columns"].forEach(function (col) {
        if (col.key === colKey) {
          col.width = width;
        }
      });
    }
  }]);

  return Table;
}();



/***/ }),

/***/ "./src/components/data_table/redux/ActionType.js":
/*!*******************************************************!*\
  !*** ./src/components/data_table/redux/ActionType.js ***!
  \*******************************************************/
/*! exports provided: DATA_UPDATED, CELL_DATA_UPDATED, RESIZING, CONFIG_UPDATE, CUSTOM_CONFIG_UPDATE, ROW_ALL_SELECTED, ROW_SELECTED, SINGLE_ROW_SELECTED, RAW_ACTION_SELECTED, SET_COLUMN_HIDDEN, SET_COLUMNS_HIDDEN, SORT_COLUMN, FILTER_UPDATE, UPDATE_THEME, TOGGLE_ALL_ROWS, PAGE_UPDATE, UPDATE_SINGLE_SELECTED_ACTION, SELECT_ALL_LEVEL, RESET_FILTER, SINGLE_ROW_SELECTED_WITH_KEY, SET_DOWNLOAD_DATA, TABLE_SEARCH, CHECKBOX_CHECKED, CLOSE_ALL_POPUP, CLOSE_ALL_FILTER_POPUP, UNCLICKABLE_CELLS_UPDATED, ORIGINAL_CONFIG_UPDATE, SCROLL_POSITION_UPDATE, GOTO_SCROLL_POSITION, SET_COLUMNS_HIDDEN_TEMP */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DATA_UPDATED", function() { return DATA_UPDATED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CELL_DATA_UPDATED", function() { return CELL_DATA_UPDATED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RESIZING", function() { return RESIZING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONFIG_UPDATE", function() { return CONFIG_UPDATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CUSTOM_CONFIG_UPDATE", function() { return CUSTOM_CONFIG_UPDATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ROW_ALL_SELECTED", function() { return ROW_ALL_SELECTED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ROW_SELECTED", function() { return ROW_SELECTED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SINGLE_ROW_SELECTED", function() { return SINGLE_ROW_SELECTED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RAW_ACTION_SELECTED", function() { return RAW_ACTION_SELECTED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SET_COLUMN_HIDDEN", function() { return SET_COLUMN_HIDDEN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SET_COLUMNS_HIDDEN", function() { return SET_COLUMNS_HIDDEN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SORT_COLUMN", function() { return SORT_COLUMN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FILTER_UPDATE", function() { return FILTER_UPDATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UPDATE_THEME", function() { return UPDATE_THEME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOGGLE_ALL_ROWS", function() { return TOGGLE_ALL_ROWS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_UPDATE", function() { return PAGE_UPDATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UPDATE_SINGLE_SELECTED_ACTION", function() { return UPDATE_SINGLE_SELECTED_ACTION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELECT_ALL_LEVEL", function() { return SELECT_ALL_LEVEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RESET_FILTER", function() { return RESET_FILTER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SINGLE_ROW_SELECTED_WITH_KEY", function() { return SINGLE_ROW_SELECTED_WITH_KEY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SET_DOWNLOAD_DATA", function() { return SET_DOWNLOAD_DATA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TABLE_SEARCH", function() { return TABLE_SEARCH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHECKBOX_CHECKED", function() { return CHECKBOX_CHECKED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CLOSE_ALL_POPUP", function() { return CLOSE_ALL_POPUP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CLOSE_ALL_FILTER_POPUP", function() { return CLOSE_ALL_FILTER_POPUP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UNCLICKABLE_CELLS_UPDATED", function() { return UNCLICKABLE_CELLS_UPDATED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ORIGINAL_CONFIG_UPDATE", function() { return ORIGINAL_CONFIG_UPDATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SCROLL_POSITION_UPDATE", function() { return SCROLL_POSITION_UPDATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GOTO_SCROLL_POSITION", function() { return GOTO_SCROLL_POSITION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SET_COLUMNS_HIDDEN_TEMP", function() { return SET_COLUMNS_HIDDEN_TEMP; });
var DATA_UPDATED = "DATA_UPDATED";
var CELL_DATA_UPDATED = "CELL_DATA_UPDATED";
var RESIZING = "RESIZING";
var CONFIG_UPDATE = "CONFIG_UPDATE";
var CUSTOM_CONFIG_UPDATE = "CUSTOM_CONFIG_UPDATE";
var ROW_ALL_SELECTED = "ROW_ALL_SELECTED";
var ROW_SELECTED = "ROW_SELECTED";
var SINGLE_ROW_SELECTED = "SINGLE_ROW_SELECTED";
var RAW_ACTION_SELECTED = "RAW_ACTION_SELECTED";
var SET_COLUMN_HIDDEN = "SET_COLUMN_HIDDEN";
var SET_COLUMNS_HIDDEN = "SET_COLUMNS_HIDDEN";
var SORT_COLUMN = "SORT_COLUMN";
var FILTER_UPDATE = "FILTER_UPDATE";
var UPDATE_THEME = "UPDATE_THEME";
var TOGGLE_ALL_ROWS = "TOGGLE_ALL_ROWS";
var PAGE_UPDATE = "PAGE_UPDATE";
var UPDATE_SINGLE_SELECTED_ACTION = "UPDATE_SINGLE_SELECTED_ACTION";
var SELECT_ALL_LEVEL = "SELECT_ALL_LEVEL";
var RESET_FILTER = "RESET_FILTER";
var SINGLE_ROW_SELECTED_WITH_KEY = "SINGLE_ROW_SELECTED_WITH_KEY";
var SET_DOWNLOAD_DATA = 'SET_DOWNLOAD_DATA';
var TABLE_SEARCH = "TABLE_SEARCH";
var CHECKBOX_CHECKED = "CHECKBOX_CHECKED";
var CLOSE_ALL_POPUP = 'CLOSE_ALL_POPUP';
var CLOSE_ALL_FILTER_POPUP = 'CLOSE_ALL_FILTER_POPUP';
var UNCLICKABLE_CELLS_UPDATED = 'UNCLICKABLE_CELLS_UPDATED';
var ORIGINAL_CONFIG_UPDATE = 'ORIGINAL_CONFIG_UPDATE';
var SCROLL_POSITION_UPDATE = 'SCROLL_POSITION_UPDATE';
var GOTO_SCROLL_POSITION = 'GOTO_SCROLL_POSITION';
var SET_COLUMNS_HIDDEN_TEMP = 'SET_COLUMNS_HIDDEN_TEMP';

/***/ }),

/***/ "./src/components/data_table/redux/actions.js":
/*!****************************************************!*\
  !*** ./src/components/data_table/redux/actions.js ***!
  \****************************************************/
/*! exports provided: tableSearched, gotoScrollPosition, setUpdatedScrollPosition, setOriginalConfig, setDownloadData, setUpdatedData, setUpdatedCellData, resizingTable, setUpdatedConfig, setCustomConfig, setRowAllSelected, setRowSelected, setSingleRowSelected, setSingleRowSelectedWithKey, setSingleSelectedAction, setRowActionSelected, setColumnHidden, setColumnsHidden, setColumnSort, updateFilter, resetFilter, udpateTheme, toggleAllRows, updatePage, setSelectAllLevel, setTableSearchTerm, rowCheckboxChanged, closeAllPopUp, closeAllFilterPopUp, updateUnClickableCells, updateColumnHiddenTemp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tableSearched", function() { return tableSearched; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gotoScrollPosition", function() { return gotoScrollPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setUpdatedScrollPosition", function() { return setUpdatedScrollPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setOriginalConfig", function() { return setOriginalConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setDownloadData", function() { return setDownloadData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setUpdatedData", function() { return setUpdatedData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setUpdatedCellData", function() { return setUpdatedCellData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resizingTable", function() { return resizingTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setUpdatedConfig", function() { return setUpdatedConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setCustomConfig", function() { return setCustomConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setRowAllSelected", function() { return setRowAllSelected; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setRowSelected", function() { return setRowSelected; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setSingleRowSelected", function() { return setSingleRowSelected; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setSingleRowSelectedWithKey", function() { return setSingleRowSelectedWithKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setSingleSelectedAction", function() { return setSingleSelectedAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setRowActionSelected", function() { return setRowActionSelected; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setColumnHidden", function() { return setColumnHidden; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setColumnsHidden", function() { return setColumnsHidden; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setColumnSort", function() { return setColumnSort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateFilter", function() { return updateFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resetFilter", function() { return resetFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "udpateTheme", function() { return udpateTheme; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toggleAllRows", function() { return toggleAllRows; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updatePage", function() { return updatePage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setSelectAllLevel", function() { return setSelectAllLevel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setTableSearchTerm", function() { return setTableSearchTerm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rowCheckboxChanged", function() { return rowCheckboxChanged; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closeAllPopUp", function() { return closeAllPopUp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closeAllFilterPopUp", function() { return closeAllFilterPopUp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateUnClickableCells", function() { return updateUnClickableCells; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateColumnHiddenTemp", function() { return updateColumnHiddenTemp; });
/* harmony import */ var _ActionType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ActionType */ "./src/components/data_table/redux/ActionType.js");

var tableSearched = function tableSearched(term) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["TABLE_SEARCH"],
    payload: term
  };
};
var gotoScrollPosition = function gotoScrollPosition(scrollX, scrollY) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["GOTO_SCROLL_POSITION"],
    payload: [scrollX, scrollY]
  };
};
var setUpdatedScrollPosition = function setUpdatedScrollPosition(scrollX, scrollY) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SCROLL_POSITION_UPDATE"],
    payload: [scrollX, scrollY]
  };
};
var setOriginalConfig = function setOriginalConfig(config) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["ORIGINAL_CONFIG_UPDATE"],
    payload: config
  };
};
var setDownloadData = function setDownloadData(dataList) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_DOWNLOAD_DATA"],
    payload: dataList
  };
};
var setUpdatedData = function setUpdatedData(dataList) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["DATA_UPDATED"],
    payload: dataList
  };
};
var setUpdatedCellData = function setUpdatedCellData(rowKeyVal, columnKey, value) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["CELL_DATA_UPDATED"],
    payload: [rowKeyVal, columnKey, value]
  };
};
var resizingTable = function resizingTable(width) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["RESIZING"],
    payload: width
  };
};
var setUpdatedConfig = function setUpdatedConfig(config) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["CONFIG_UPDATE"],
    payload: config
  };
};
var setCustomConfig = function setCustomConfig(config) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["CUSTOM_CONFIG_UPDATE"],
    payload: config
  };
};
var setRowAllSelected = function setRowAllSelected(selected) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["ROW_ALL_SELECTED"],
    payload: selected
  };
};
var setRowSelected = function setRowSelected(rowIndex) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["ROW_SELECTED"],
    payload: rowIndex
  };
};
var setSingleRowSelected = function setSingleRowSelected(rowIndex) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SINGLE_ROW_SELECTED"],
    payload: rowIndex
  };
};
var setSingleRowSelectedWithKey = function setSingleRowSelectedWithKey(rowKey) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SINGLE_ROW_SELECTED_WITH_KEY"],
    payload: rowKey
  };
};
var setSingleSelectedAction = function setSingleSelectedAction(rowIndex, columnKey, newValue) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["UPDATE_SINGLE_SELECTED_ACTION"],
    payload: [rowIndex, columnKey, newValue]
  };
};
var setRowActionSelected = function setRowActionSelected(rowIndex, action) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["RAW_ACTION_SELECTED"],
    payload: [rowIndex, action]
  };
};
var setColumnHidden = function setColumnHidden(columnKey, hidden) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_COLUMN_HIDDEN"],
    payload: [columnKey, hidden]
  };
};
var setColumnsHidden = function setColumnsHidden(object) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_COLUMNS_HIDDEN"],
    payload: object
  };
};
var setColumnSort = function setColumnSort(columnKey) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SORT_COLUMN"],
    payload: columnKey
  };
};
var updateFilter = function updateFilter(filter) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["FILTER_UPDATE"],
    payload: filter
  };
};
var resetFilter = function resetFilter() {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["RESET_FILTER"]
  };
};
var udpateTheme = function udpateTheme(theme) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["UPDATE_THEME"],
    payload: theme
  };
};
var toggleAllRows = function toggleAllRows() {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["TOGGLE_ALL_ROWS"]
  };
};
var updatePage = function updatePage(page) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["PAGE_UPDATE"],
    payload: page
  };
};
var setSelectAllLevel = function setSelectAllLevel(level) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SELECT_ALL_LEVEL"],
    payload: level
  };
};
var setTableSearchTerm = function setTableSearchTerm(term) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["TABLE_SEARCH"],
    payload: term
  };
};
var rowCheckboxChanged = function rowCheckboxChanged(rowIndex, selected) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["CHECKBOX_CHECKED"],
    payload: [rowIndex, selected]
  };
};
var closeAllPopUp = function closeAllPopUp() {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["CLOSE_ALL_POPUP"]
  };
};
var closeAllFilterPopUp = function closeAllFilterPopUp() {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["CLOSE_ALL_FILTER_POPUP"]
  };
};
var updateUnClickableCells = function updateUnClickableCells(obj) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["UNCLICKABLE_CELLS_UPDATED"],
    payload: obj
  };
};
var updateColumnHiddenTemp = function updateColumnHiddenTemp(obj) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_COLUMNS_HIDDEN_TEMP"],
    payload: obj
  };
};

/***/ }),

/***/ "./src/components/data_table/redux/reducer.js":
/*!****************************************************!*\
  !*** ./src/components/data_table/redux/reducer.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ActionType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ActionType */ "./src/components/data_table/redux/ActionType.js");
/* harmony import */ var _services_table_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/table_service */ "./src/components/data_table/services/table_service.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }




var DataTableReducer = function DataTableReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;
  var newState;
  var service = new _services_table_service__WEBPACK_IMPORTED_MODULE_1__["default"]();
  var config = state.config;
  var customConfig = state.customConfig;

  switch (action.type) {
    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["ORIGINAL_CONFIG_UPDATE"]:
      newState = Object.assign({}, state, {
        originalConfig: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_DOWNLOAD_DATA"]:
      newState = Object.assign({}, state, {
        downloadDataList: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["DATA_UPDATED"]:
      newState = Object.assign({}, state, {
        dataList: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["RESIZING"]:
      newState = Object.assign({}, state, {
        width: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["CONFIG_UPDATE"]:
      newState = Object.assign({}, state, {
        config: action.payload,
        defaultColumns: service.getDefaultColumns(action.payload.columns)
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["CUSTOM_CONFIG_UPDATE"]:
      newState = Object.assign({}, state, {
        //here we need to fix customConfig automatially, as sometimes, customer config saved non-existing columns
        customConfig: service.fixingCustomerConfig(action.payload, state.dataList),
        // once customer config updated, we need to merge back to table config
        config: service.mergeCustomerConfig(state.config, action.payload)
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["ROW_ALL_SELECTED"]:
      newState = Object.assign({}, state, {
        rowAllSelected: action.payload,
        selectedRowKeys: service.generateAllSelectedRowKeys(state.config, state.dataList, action.payload)
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["ROW_SELECTED"]:
      if (action.payload >= 0) {
        newState = Object.assign({}, state, {
          selectedRowKeys: service.generateSelectedRowKeys(state.config, state.dataList, !state.config.enableRadioButton ? state.selectedRowKeys : [], action.payload)
        });
      } else {
        newState = Object.assign({}, state, {
          rowAllSelected: false,
          selectedRowKeys: []
        });
      }

      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SINGLE_ROW_SELECTED"]:
      newState = Object.assign({}, state, {
        selectedRowKeys: service.generateSingleSelectedRowKeys(state.config, state.dataList, !state.config.enableRadioButton ? state.selectedRowKeys : [], action.payload)
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SINGLE_ROW_SELECTED_WITH_KEY"]:
      var currentRowKeys = state.selectedRowKeys;
      currentRowKeys.push(action.payload);
      newState = Object.assign({}, state, {
        selectedRowKeys: currentRowKeys
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["UPDATE_SINGLE_SELECTED_ACTION"]:
      var updatedResults = service.updateSingleSelectedRowAction.apply(service, [state].concat(_toConsumableArray(action.payload)));
      newState = Object.assign({}, state, {
        dataList: updatedResults[0],
        originalDataList: updatedResults[1],
        rowkeyVal: updatedResults[2],
        oldColumnKey: updatedResults[3],
        oldValue: updatedResults[4]
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["RAW_ACTION_SELECTED"]:
      newState = Object.assign({}, state, {
        rowActionSelected: service.updateRowActionSelected(action.payload[0], action.payload[1], state)
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_COLUMN_HIDDEN"]:
      config.columns = service.setColumnHidden(action.payload[0], action.payload[1], config.columns);
      newState = Object.assign({}, state, {
        config: config
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_COLUMNS_HIDDEN"]:
      config.columns = service.setColumnsHidden(action.payload, config.columns);
      newState = Object.assign({}, state, {
        config: config
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SORT_COLUMN"]:
      customConfig.updateSorter(action.payload);
      newState = Object.assign({}, state, {
        customConfig: customConfig
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["FILTER_UPDATE"]:
      customConfig.updateFilter(action.payload);
      newState = Object.assign({}, state, {
        customConfig: customConfig
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["RESET_FILTER"]:
      customConfig.filters = [];
      newState = Object.assign({}, state, {
        customConfig: customConfig
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["UPDATE_THEME"]:
      config.theme = action.payload;
      newState = Object.assign({}, state, {
        config: config
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["TOGGLE_ALL_ROWS"]:
      newState = Object.assign({}, state, {
        allOpened: !state.allOpened
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["PAGE_UPDATE"]:
      newState = Object.assign({}, state, {
        page: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["CELL_DATA_UPDATED"]:
      var updatedResults = service.updateSingleCellValue.apply(service, [state].concat(_toConsumableArray(action.payload)));
      newState = Object.assign({}, state, {
        dataList: updatedResults[0],
        originalDataList: updatedResults[1],
        passedInCellData: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SELECT_ALL_LEVEL"]:
      newState = Object.assign({}, state, {
        selectAllLevel: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["CHECKBOX_CHECKED"]:
      var checkedRows = service.generateCheckedRowKeys(state.config, state.dataList, !state.config.enableRadioButton ? state.checkedRowKeys : [], action.payload);
      newState = Object.assign({}, state, {
        checkedRowKeys: checkedRows
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["UNCLICKABLE_CELLS_UPDATED"]:
      newState = Object.assign({}, state, {
        unClickableCells: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SCROLL_POSITION_UPDATE"]:
      newState = Object.assign({}, state, {
        scrollPosition: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["GOTO_SCROLL_POSITION"]:
      newState = Object.assign({}, state, {
        scrollPosition: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["TABLE_SEARCH"]:
      newState = Object.assign({}, state, {
        tableSearchedTerm: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_COLUMNS_HIDDEN_TEMP"]:
      newState = Object.assign({}, state, {
        columnHiddenTmp: action.payload
      });
      break;

    default:
      newState = Object.assign({}, state);
  }

  return newState;
};

/* harmony default export */ __webpack_exports__["default"] = (DataTableReducer);

/***/ }),

/***/ "./src/components/data_table/redux/store.js":
/*!**************************************************!*\
  !*** ./src/components/data_table/redux/store.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actions */ "./src/components/data_table/redux/actions.js");
/* harmony import */ var _reducer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reducer */ "./src/components/data_table/redux/reducer.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




var Store = /*#__PURE__*/function () {
  function Store(appId, reducer) {
    _classCallCheck(this, Store);

    this.CONFIG_UPDATE = "CONFIG_UPDATE";
    this.DATA_UPDATED = "DATA_UPDATED";
    this.CELL_DATA_UPDATED = "CELL_DATA_UPDATED";
    this.RESIZING = "RESIZING";
    this.CUSTOM_CONFIG_UPDATE = "CUSTOM_CONFIG_UPDATE";
    this.ROW_ALL_SELECTED = "ROW_ALL_SELECTED";
    this.ROW_SELECTED = "ROW_SELECTED";
    this.SINGLE_ROW_SELECTED = "SINGLE_ROW_SELECTED";
    this.RESET_DATA = "RESET_DATA";
    this.RAW_ACTION_SELECTED = "RAW_ACTION_SELECTED";
    this.SET_COLUMN_HIDDEN = "SET_COLUMN_HIDDEN";
    this.SET_COLUMNS_HIDDEN = "SET_COLUMNS_HIDDEN";
    this.SORT_COLUMN = "SORT_COLUMN";
    this.FILTER_UPDATE = "FILTER_UPDATE";
    this.UPDATE_THEME = "UPDATE_THEME";
    this.TOGGLE_ALL_ROWS = "TOGGLE_ALL_ROWS";
    this.PAGE_UPDATE = "PAGE_UPDATE";
    this.UPDATE_SINGLE_SELECTED_ACTION = "UPDATE_SINGLE_SELECTED_ACTION";
    this.ICON_CELL_CLICKED_ACTION = "ICON_CELL_CLICKED_ACTION";
    this.SELECT_ALL_LEVEL = 'SELECT_ALL_LEVEL';
    this.SINGLE_ROW_SELECTED_WITH_KEY = 'SINGLE_ROW_SELECTED_WITH_KEY';
    this.SELECT_ALL_COLUMNS = "SELECT_ALL_COLUMNS";
    this.SELECT_DEFAULT_COLUMNS = "DELECT_DEFAULT_COLUMNS";
    this.TABLE_SEARCH = "TABLE_SEARCH";
    this.SET_DOWNLOAD_DATA = "SET_DOWNLOAD_DATA";
    this.CHECKBOX_CHECKED = "CHECKBOX_CHECKED";
    this.CLOSE_ALL_POPUP = 'CLOSE_ALL_POPUP';
    this.CLOSE_ALL_FILTER_POPUP = 'CLOSE_ALL_FILTER_POPUP';
    this.UNCLICKABLE_CELLS_UPDATED = 'UNCLICKABLE_CELLS_UPDATED';
    this.ORIGINAL_CONFIG_UPDATE = 'ORIGINAL_CONFIG_UPDATE';
    this.SCROLL_POSITION_UPDATE = 'SCROLL_POSITION_UPDATE';
    this.GOTO_SCROLL_POSITION = 'GOTO_SCROLL_POSITION';
    this.SET_COLUMNS_HIDDEN_TEMP = 'SET_COLUMNS_HIDDEN_TEMP';
    this._appId = appId;
    this._state = {
      config: null,
      originalDataList: null,
      originalConfig: null,
      //used to save original table config
      dataList: [],
      customConfig: null,
      width: 0,
      rowAllSelected: false,
      selectedRowKeys: [],
      checkedRowKeys: [],
      rowActionSelected: {},
      allOpened: false,
      defaultColumns: [],
      passedInCellData: null,
      //used to save passed in cell data, for resetting purpose
      page: null,
      //this is page object, not number
      globalAll: false,
      selectAllLevel: 0,
      downloadDataList: [],
      globalDownloadConfig: null,
      unClickableCells: {},
      // used to define which cells are NOT clickable, key-columnKey, value-[key list]
      scrollPosition: [0, 0],
      //remember previous scrollPosition
      tableSearchedTerm: '',
      columnHiddenTmp: {} //temprarily save column hidden status before user click save button

    };
    this._listeners = [];
    this._listenersFor = {};
    this._reducer = reducer;
    this.passedBackParams = null;
  }

  _createClass(Store, [{
    key: "getState",
    value: function getState() {
      return this._state;
    }
  }, {
    key: "dispatch",
    value: function dispatch(action) {
      var _this = this;

      this._state = this._reducer(this._state, action);

      this._listeners.forEach(function (listener) {
        return listener(_this._state);
      });
    }
  }, {
    key: "subscribe",
    value: function subscribe(listener) {
      var _this2 = this;

      this._listeners.push(listener); //this return is used for return unsubscrib call back for purpose of removing listeners


      return function () {
        getStore(_this2._appId)._listeners = getStore(_this2._appId)._listeners.filter(function (l) {
          return l !== listener;
        });
      };
    }
  }, {
    key: "dispatchFor",
    value: function dispatchFor(type, action) {
      var _this3 = this;

      this._state = this._reducer(this._state, action);
      if (type in this._listenersFor) this._listenersFor[type].forEach(function (listener) {
        return listener(_this3._state);
      });
    }
  }, {
    key: "subscribeTo",
    value: function subscribeTo(type, listener) {
      var _this4 = this;

      if (!(type in this._listenersFor)) {
        this._listenersFor[type] = [];
      }

      this._listenersFor[type].push(listener);

      return function () {
        getStore(_this4._appId)._listenersFor[type] = getStore(_this4._appId)._listenersFor[type].filter(function (l) {
          return l !== listener;
        });
      };
    }
  }, {
    key: "setTotalRecords",
    value: function setTotalRecords(total) {
      var page = this._state["page"];
      page.setTotal(total);
      this.dispatchFor(this.PAGE_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updatePage"])(page));
    }
  }, {
    key: "setUpdatedData",
    value: function setUpdatedData(resultsObj) {
      var _this5 = this;

      var asOriginal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var overWriteSelectedKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      //UI-2976 - Reset Pre-Selected columns when data is updated
      if (overWriteSelectedKeys) {
        this.setDefaultSelectedRowKeys([]); //clear all pre-selected rowKeys

        setTimeout(function () {
          _this5.setRowAllSelected(false);
        });
      } //handler data input: contains total and dataList field


      if ("total" in resultsObj) {
        var total = resultsObj["total"];
        var page = this._state["page"];
        page.setTotal(total);
        this.dispatchFor(this.PAGE_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updatePage"])(page));
      } else {
        var _page = this._state["page"];
        setTimeout(function () {
          _this5.dispatchFor(_this5.PAGE_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updatePage"])(_page));
        });
      }

      var list = resultsObj["dataList"];

      if (asOriginal) {
        this._state.originalDataList = list;
      }

      this.dispatchFor(this.DATA_UPDATED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setUpdatedData"])(list));
      this.closeAllPopUp();
    }
  }, {
    key: "setUpdatedCellValue",
    value: function setUpdatedCellValue(rowKey, columnKey, value) {
      this.dispatchFor(this.CELL_DATA_UPDATED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setUpdatedCellData"])(rowKey, columnKey, value));
    }
  }, {
    key: "setAppendedData",
    value: function setAppendedData(resultsObj) {
      //handler data input: contains total and dataList field
      if ("total" in resultsObj) {
        var total = resultsObj["total"];
        var page = this._state["page"];
        page.setTotal(total);
        this.dispatchFor(this.PAGE_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updatePage"])(page));
      }

      var list = resultsObj["dataList"];
      this._state.originalDataList = this._state.originalDataList.concat(list);
      list = this._state.dataList.concat(list);
      this.dispatchFor(this.DATA_UPDATED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setUpdatedData"])(list));
      this.closeAllPopUp();
    }
  }, {
    key: "setOriginalTableConfig",
    value: function setOriginalTableConfig(config) {
      this.dispatchFor(this.ORIGINAL_CONFIG_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setOriginalConfig"])(config));
    }
  }, {
    key: "setUpdatedTableConfig",
    value: function setUpdatedTableConfig(config) {
      this.dispatchFor(this.CONFIG_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setUpdatedConfig"])(config));
    }
  }, {
    key: "setNewTableWidth",
    value: function setNewTableWidth(width) {
      this.dispatchFor(this.RESIZING, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["resizingTable"])(width));
    }
  }, {
    key: "setCustomConfig",
    value: function setCustomConfig(config) {
      this.dispatchFor(this.CUSTOM_CONFIG_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setCustomConfig"])(config));
    }
  }, {
    key: "setRowAllSelected",
    value: function setRowAllSelected(allSelected) {
      this.dispatchFor(this.ROW_ALL_SELECTED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setRowAllSelected"])(allSelected));
    }
  }, {
    key: "toggleSingleRowSelected",
    value: function toggleSingleRowSelected(rowIndex) {
      this.dispatchFor(this.SINGLE_ROW_SELECTED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setSingleRowSelected"])(rowIndex));
    }
  }, {
    key: "toggleCheckBoxChanged",
    value: function toggleCheckBoxChanged(rowIndex, selected) {
      this.dispatchFor(this.CHECKBOX_CHECKED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["rowCheckboxChanged"])(rowIndex, selected));
    }
  }, {
    key: "toggleRowSelected",
    value: function toggleRowSelected(rowIndex) {
      this.dispatchFor(this.ROW_SELECTED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setRowSelected"])(rowIndex));
    }
  }, {
    key: "toggleRowSelectedWithKey",
    value: function toggleRowSelectedWithKey(rowKey) {
      this.dispatchFor(this.SINGLE_ROW_SELECTED_WITH_KEY, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setSingleRowSelectedWithKey"])(rowKey));
    }
  }, {
    key: "setRowActionSelected",
    value: function setRowActionSelected(rowIndex, action) {
      this.dispatchFor(this.RAW_ACTION_SELECTED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setRowActionSelected"])(rowIndex, action));
    }
  }, {
    key: "setColumnHidden",
    value: function setColumnHidden(columnKey, hidden) {
      this.dispatchFor(this.SET_COLUMN_HIDDEN, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setColumnHidden"])(columnKey, hidden));
    }
  }, {
    key: "setColumnsHidden",
    value: function setColumnsHidden(configObj) {
      this.dispatchFor(this.SET_COLUMNS_HIDDEN, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setColumnsHidden"])(configObj));
    }
  }, {
    key: "setColumnSort",
    value: function setColumnSort(columnKey) {
      this.dispatchFor(this.SORT_COLUMN, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setColumnSort"])(columnKey));
    }
  }, {
    key: "setFilter",
    value: function setFilter(filter) {
      this.dispatchFor(this.FILTER_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updateFilter"])(filter));
    }
  }, {
    key: "resetFilter",
    value: function resetFilter() {
      this.dispatchFor(this.FILTER_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["resetFilter"])());
    }
  }, {
    key: "setTheme",
    value: function setTheme(theme) {
      this.dispatchFor(this.UPDATE_THEME, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["udpateTheme"])(theme));
    }
  }, {
    key: "toggleAllRows",
    value: function toggleAllRows() {
      this.dispatchFor(this.TOGGLE_ALL_ROWS, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["toggleAllRows"])());
    }
  }, {
    key: "updatePage",
    value: function updatePage(pageObj) {
      this.dispatchFor(this.PAGE_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updatePage"])(pageObj));
    }
  }, {
    key: "updateSingleSelectAction",
    value: function updateSingleSelectAction(rowIndex, columnKey, newValue) {
      //below is to be returned
      this.passedBackParams = {
        rowIndex: rowIndex,
        columnKey: columnKey,
        newValue: newValue
      };
      this.dispatchFor(this.UPDATE_SINGLE_SELECTED_ACTION, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setSingleSelectedAction"])(rowIndex, columnKey, newValue));
    }
  }, {
    key: "updateIconDropDownContent",
    value: function updateIconDropDownContent(htmlContent) {
      if (this.ICON_CELL_CLICKED_ACTION in this._listenersFor) this._listenersFor[this.ICON_CELL_CLICKED_ACTION].forEach(function (listener) {
        return listener(htmlContent);
      });
    }
  }, {
    key: "triggerSelectAllColumns",
    value: function triggerSelectAllColumns(selected) {
      if (this.SELECT_ALL_COLUMNS in this._listenersFor) this._listenersFor[this.SELECT_ALL_COLUMNS].forEach(function (listener) {
        return listener(selected);
      });
    }
  }, {
    key: "triggerDefaultColumns",
    value: function triggerDefaultColumns(selected) {
      if (this.SELECT_DEFAULT_COLUMNS in this._listenersFor) this._listenersFor[this.SELECT_DEFAULT_COLUMNS].forEach(function (listener) {
        return listener(selected);
      });
    }
  }, {
    key: "resetAll",
    value: function resetAll() {
      this._listeners = [];
      this._listenersFor = {};
    }
  }, {
    key: "setSelectAllLevel",
    value: function setSelectAllLevel(level) {
      this.dispatchFor(this.SELECT_ALL_LEVEL, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setSelectAllLevel"])(level));
    }
  }, {
    key: "setGlobalSearchTerm",
    value: function setGlobalSearchTerm(term) {
      this.dispatchFor(this.TABLE_SEARCH, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["tableSearched"])(term));
    }
  }, {
    key: "setDefaultSelectedRowKeys",
    value: function setDefaultSelectedRowKeys(defaultRowKeys) {
      this._state.selectedRowKeys = defaultRowKeys;
    }
  }, {
    key: "setDownloadData",
    value: function setDownloadData(dataList) {
      this.dispatchFor(this.SET_DOWNLOAD_DATA, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setDownloadData"])(dataList));
    }
  }, {
    key: "setGlobalDownloadConfig",
    value: function setGlobalDownloadConfig(cfg) {
      this._state.globalDownloadConfig = cfg;
    }
  }, {
    key: "setUnClickableCells",
    value: function setUnClickableCells(obj) {
      // { colKey: [list of keys] }
      this.dispatchFor(this.UNCLICKABLE_CELLS_UPDATED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updateUnClickableCells"])(obj));
    }
  }, {
    key: "closeAllPopUp",
    value: function closeAllPopUp() {
      this.dispatchFor(this.CLOSE_ALL_POPUP, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["closeAllPopUp"])());
    }
  }, {
    key: "closeAllFilterPopUp",
    value: function closeAllFilterPopUp() {
      this.dispatchFor(this.CLOSE_ALL_FILTER_POPUP, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["closeAllFilterPopUp"])());
    }
  }, {
    key: "scrollPositionUpdated",
    value: function scrollPositionUpdated(scrollX, scrollY) {
      this.dispatchFor(this.SCROLL_POSITION_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setUpdatedScrollPosition"])(scrollX, scrollY));
    }
  }, {
    key: "gotoScrollPosition",
    value: function gotoScrollPosition(scrollX, scrollY) {
      this.dispatchFor(this.GOTO_SCROLL_POSITION, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["gotoScrollPosition"])(scrollX, scrollY));
    }
  }, {
    key: "setColumnTempHiddenStatus",
    value: function setColumnTempHiddenStatus(obj) {
      this.dispatchFor(this.SET_COLUMNS_HIDDEN_TEMP, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updateColumnHiddenTemp"])(obj));
    }
  }]);

  return Store;
}();

var store;

var getStore = function getStore(appId) {
  if (!store) {
    store = {};
  }

  if (!(appId in store)) store[appId] = new Store(appId, _reducer__WEBPACK_IMPORTED_MODULE_1__["default"]);
  return store[appId];
};

/* harmony default export */ __webpack_exports__["default"] = (getStore);

/***/ }),

/***/ "./src/components/data_table/services/table_service.js":
/*!*************************************************************!*\
  !*** ./src/components/data_table/services/table_service.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TableService; });
/* harmony import */ var _entities_table__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../entities/table */ "./src/components/data_table/entities/table.js");
/* harmony import */ var _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../entities/custom_config */ "./src/components/data_table/entities/custom_config.js");
/* harmony import */ var _entities_column__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../entities/column */ "./src/components/data_table/entities/column.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }






var TableService = /*#__PURE__*/function () {
  function TableService() {
    _classCallCheck(this, TableService);
  }

  _createClass(TableService, [{
    key: "getAvailableListResult",
    value: function getAvailableListResult(dataList, tableConfig) {
      if (tableConfig.global) return {};
      var colListObj = {};
      tableConfig.columns.forEach(function (column) {
        console.log(column.type);

        if (column.type === _entities_column__WEBPACK_IMPORTED_MODULE_2__["TYPE_LIST"]) {
          var options = [];
          dataList.forEach(function (row) {
            if (!options.includes(row[column.key])) {
              options.push(row[column.key]);
            }
          });
          colListObj[column.key] = options;
        }
      });
      return colListObj;
    }
  }, {
    key: "genenerateTableConfig",
    value: function genenerateTableConfig(rawConfig) {
      return new _entities_table__WEBPACK_IMPORTED_MODULE_0__["default"](rawConfig);
    }
  }, {
    key: "genenerateCustomConfig",
    value: function genenerateCustomConfig(customConfig) {
      return new _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["default"](customConfig);
    }
  }, {
    key: "getNewColumnOrder",
    value: function getNewColumnOrder(originalColumnOrders, reorderColumn, columnAfter) {
      var columnsOrder = originalColumnOrders.filter(function (key) {
        return key !== reorderColumn;
      });

      if (columnAfter) {
        var index = columnsOrder.indexOf(columnAfter);
        columnsOrder.splice(index, 0, reorderColumn);
      } else {
        columnsOrder.push(reorderColumn);
      }

      return columnsOrder;
    }
  }, {
    key: "getColumnsOrder",
    value: function getColumnsOrder(tableConfig, customConfig) {
      if (customConfig && "columnsOrder" in customConfig && customConfig.columnsOrder.length > 0) {
        return customConfig.columnsOrder;
      } else {
        return tableConfig.getColumnsOrder();
      }
    }
  }, {
    key: "getNoneStickyColumnsOrder",
    value: function getNoneStickyColumnsOrder(tableConfig, customConfig, originalTableConfig) {
      var colOrders = [];

      if (customConfig && "columnsOrder" in customConfig && customConfig.columnsOrder.length > 0) {
        colOrders = customConfig.columnsOrder;
      } else {
        colOrders = tableConfig.getColumnsOrder();
      } //let's remove fixed ones


      colOrders = JSON.parse(JSON.stringify(colOrders));
      tableConfig.columns.forEach(function (col) {
        var originalColumnConfig = originalTableConfig.getColumnConfig(col.key);

        if (!colOrders.includes(col.key)) {
          colOrders.push(col.key);
        }

        if ((col.fixed || col.fixedRight || originalColumnConfig.hidden && originalColumnConfig.primaryKey) && colOrders.includes(col.key)) {
          colOrders.splice(colOrders.indexOf(col.key), 1);
        }
      });
      return colOrders;
    }
  }, {
    key: "getVisibleColumnsOrder",
    value: function getVisibleColumnsOrder(tableConfig, customConfig) {
      if (customConfig && "columnsOrder" in customConfig && customConfig.columnsOrder.length > 0) {
        return customConfig.columnsOrder;
      } else {
        return tableConfig.getVisibleColumnsOrder();
      }
    }
  }, {
    key: "getColumnsOrderFromState",
    value: function getColumnsOrderFromState(state) {
      return this.getColumnsOrder(state.config, state.customConfig);
    }
  }, {
    key: "getNoneStickyColumnsOrderFromState",
    value: function getNoneStickyColumnsOrderFromState(state) {
      return this.getNoneStickyColumnsOrder(state.config, state.customConfig, state.originalConfig);
    }
  }, {
    key: "restoreStickyColumnsFromState",
    value: function restoreStickyColumnsFromState(state, columns) {
      state.config.columns.forEach(function (col) {
        if (col.fixed) {
          //this is left fix
          columns.unshift(col.key);
        }

        if (col.fixedRight) {
          columns.push(col.key);
        }
      });
      return columns;
    }
  }, {
    key: "getVisibleColumnsOrderFromState",
    value: function getVisibleColumnsOrderFromState(state) {
      return this.getVisibleColumnsOrder(state.config, state.customConfig);
    }
  }, {
    key: "generateAllSelectedRowKeys",
    value: function generateAllSelectedRowKeys(tableConfig, dataList, allSelected) {
      var selectedRowKeys = [];

      if (allSelected) {
        var keyColumnKey = tableConfig.getPrimaryColumnKey();
        dataList.forEach(function (row) {
          selectedRowKeys.push(row[keyColumnKey]);
        });
      }

      return selectedRowKeys;
    }
  }, {
    key: "generateSelectedRowKeys",
    value: function generateSelectedRowKeys(tableConfig, dataList, currentSelectedKeys, index) {
      var selectedRowKey = dataList[index][tableConfig.getPrimaryColumnKey()];

      if (currentSelectedKeys.includes(selectedRowKey)) {
        //remove it
        currentSelectedKeys.splice(currentSelectedKeys.indexOf(selectedRowKey), 1);
      } else {
        //add it
        currentSelectedKeys.push(selectedRowKey);
      }

      currentSelectedKeys.sort();
      return currentSelectedKeys;
    }
  }, {
    key: "generateCheckedRowKeys",
    value: function generateCheckedRowKeys(tableConfig, dataList, currentSelectedKeys, payload) {
      var index = payload[0];
      var selected = payload[1];
      var selectedRowKey = dataList[index][tableConfig.getPrimaryColumnKey()];

      if (currentSelectedKeys.includes(selectedRowKey)) {
        //remove it
        currentSelectedKeys.splice(currentSelectedKeys.indexOf(selectedRowKey), 1);
      } else {
        //add it
        currentSelectedKeys.push(selectedRowKey);
      }

      currentSelectedKeys.sort();
      return currentSelectedKeys;
    }
  }, {
    key: "generateSingleSelectedRowKeys",
    value: function generateSingleSelectedRowKeys(tableConfig, dataList, currentSelectedKeys, index) {
      var selectedRowKey = dataList[index][tableConfig.getPrimaryColumnKey()];

      if (currentSelectedKeys.length == 1) {
        if (currentSelectedKeys[0] == selectedRowKey) {
          //untoggle it
          currentSelectedKeys = [];
        } else {
          currentSelectedKeys[0] = selectedRowKey;
        }
      } else {
        currentSelectedKeys = [selectedRowKey];
      }

      return currentSelectedKeys;
    }
  }, {
    key: "isAllRowSelected",
    value: function isAllRowSelected(dataList, tableConfig, selectedRowKeys) {
      var allSelected = dataList.length > 0; // if table has no data, should be false

      dataList.forEach(function (row) {
        if (!selectedRowKeys.includes(row[tableConfig.getPrimaryColumnKey()])) {
          allSelected = false;
        }
      });
      return allSelected;
    }
  }, {
    key: "isRowSelected",
    value: function isRowSelected(rowIndex, state) {
      var _this2 = this;

      var selected = false;
      state.selectedRowKeys.forEach(function (key) {
        if (key === _this2.getRowKeyValFromIndex(rowIndex, state)) selected = true;
      });
      return selected;
    }
  }, {
    key: "isRowChecked",
    value: function isRowChecked(rowIndex, state) {
      var _this3 = this;

      var checked = false;
      state.checkedRowKeys.forEach(function (key) {
        if (key === _this3.getRowKeyValFromIndex(rowIndex, state)) checked = true;
      });
      return checked;
    }
  }, {
    key: "getRowKeyValFromIndex",
    value: function getRowKeyValFromIndex(rowIndex, state) {
      var rowData = state.dataList[rowIndex];
      var keyColumnKey = state.config.getPrimaryColumnKey();
      return rowData ? rowData[keyColumnKey] : '';
    }
  }, {
    key: "findRowIndexFromRowKeyValue",
    value: function findRowIndexFromRowKeyValue(keyVal, state) {
      var rowIndex = 0;

      for (var i = 0; i < state.dataList.length; i++) {
        if (keyVal === this.getRowKeyValFromIndex(i, state)) {
          rowIndex = i;
          break;
        }
      }

      return rowIndex;
    }
  }, {
    key: "updateRowActionSelected",
    value: function updateRowActionSelected(rowIndex, action, state) {
      var rowKeyVal = this.getRowKeyValFromIndex(rowIndex, state);
      var currentRowActionSelected = state.rowActionSelected;
      currentRowActionSelected[rowKeyVal] = action;
      return currentRowActionSelected;
    }
  }, {
    key: "getRowActionSelectedFromIndex",
    value: function getRowActionSelectedFromIndex(rowIndex, state) {
      var rowKeyVal = this.getRowKeyValFromIndex(rowIndex, state);

      if (rowKeyVal in state.rowActionSelected) {
        return state.rowActionSelected[rowKeyVal];
      } else {
        return "";
      }
    }
  }, {
    key: "setColumnHidden",
    value: function setColumnHidden(columnKey, hidden, columns) {
      columns.forEach(function (column) {
        if (column.key == columnKey) {
          column.hidden = hidden;
        }
      });
      return columns;
    }
  }, {
    key: "setColumnsHidden",
    value: function setColumnsHidden(configObj, columns) {
      Object.keys(configObj).forEach(function (key) {
        columns.forEach(function (column) {
          if (column.key == key) {
            column.hidden = configObj[key];
          }
        });
      });
      return columns;
    }
  }, {
    key: "mergeCustomerConfig",
    value: function mergeCustomerConfig(tableConfig, customerConfig) {
      //step 1, merge hidden column status
      if (customerConfig["hiddenColumns"]) {
        tableConfig.columns.forEach(function (column) {
          if (customerConfig["hiddenColumns"].includes(column.key)) {
            column.hidden = true;
          }
        });
      } //step 2. merge columnWidths


      if (customerConfig['columnWidths']) {
        tableConfig.columns.forEach(function (column) {
          var columnKey = column.key;

          if (columnKey in customerConfig['columnWidths']) {
            column['width'] = customerConfig['columnWidths'][columnKey];
          }
        });
      }

      return tableConfig;
    }
  }, {
    key: "searchWholeData",
    value: function searchWholeData(state, term) {
      var originalDataList = JSON.parse(JSON.stringify(state.originalDataList));
      var sorter = state.customConfig.sorter;

      var _this = this;

      var _filter = function _filter(list, filter) {
        var filterResults = [];

        for (var i = 0; i < list.length; i++) {
          var bMatch = false;
          var row = list[i]; //we need to filer all the columns

          var colKeys = Object.keys(row);

          for (var j = 0; j < colKeys.length; j++) {
            if (row[colKeys[j]] && ('' + row[colKeys[j]]).toLowerCase().includes(('' + term).toLowerCase())) {
              bMatch = true;
              break;
            }
          }

          if (bMatch) filterResults.push(row);
        }

        return filterResults;
      };

      if (sorter.order == _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["ORDER_ASC"] || sorter.order == _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["ORDER_DESC"]) {
        originalDataList.sort(function (a, b) {
          if (sorter.order == _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["ORDER_ASC"]) {
            if (typeof a[sorter.by] === "string") {
              return _this.stripHtml(a[sorter.by]) > _this.stripHtml(b[sorter.by]) ? 1 : -1;
            } else if (typeof a[sorter.by] === "number") {
              return Number(a[sorter.by]) > Number(b[sorter.by]) ? 1 : -1;
            } else {
              return -1;
            }
          } else {
            if (typeof a[sorter.by] === "string") {
              return _this.stripHtml(a[sorter.by]) > _this.stripHtml(b[sorter.by]) ? -1 : 1;
            } else if (typeof a[sorter.by] === "number") {
              return Number(a[sorter.by]) > Number(b[sorter.by]) ? -1 : 1;
            } else {
              return -1;
            }
          }
        });
      } //now let's filter


      originalDataList = _filter(originalDataList, term);
      return originalDataList;
    }
  }, {
    key: "sortFilterData",
    value: function sortFilterData(state) {
      var originalDataList = JSON.parse(JSON.stringify(state.originalDataList));
      var sorter = state.customConfig.sorter;
      var filters = state.customConfig.filters;

      var _this = this;

      var tableConfig = state.config;

      if (state.tableSearchedTerm !== '') {
        originalDataList = this.searchWholeData(state, state.tableSearchedTerm);
      }

      var _filter = function _filter(list, filter) {
        var filterResults = [];
        list.forEach(function (item) {
          var bMatch = false;

          switch (filter.operator) {
            case _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["TYPE_CONTAINS"]:
              if (_this.stripHtml(item[filter.by]).toLowerCase().includes(filter.value1.toLowerCase())) {
                bMatch = true;
              }

              break;

            case _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["TYPE_EQUALS"]:
              if (Array.isArray(filter.value1)) {
                var _iterator = _createForOfIteratorHelper(filter.value1),
                    _step;

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var filterVal = _step.value;

                    if (_this.stripHtml(item[filter.by]).toLowerCase() === filterVal.toLowerCase()) {
                      bMatch = true;
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
              } else {
                bMatch = _this.stripHtml(item[filter.by]).toLowerCase() === filter.value1.toLowerCase();
              }

              break;

            case _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["TYPE_IN"]:
              var filteredValues = [];
              filter.value1.forEach(function (v) {
                filteredValues.push(v.toLowerCase());
              });
              if (filteredValues.includes(_this.stripHtml(item[filter.by]).toLowerCase())) bMatch = true;else {
                filter.value1.forEach(function (f) {
                  if (_this.stripHtml(item[filter.by]).toLowerCase().includes(f.toLowerCase())) {
                    bMatch = true;
                  }
                });
              }
              break;

            case _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["TYPE_BETWEEN"]:
              var columnType = tableConfig.getColumnConfig(filter.by).type;
              var value = item[filter.by];
              var start = filter.value1;
              var end = filter.value2;

              if (columnType === 'date' || columnType === 'date_time') {
                if (!isNaN(filter.value1)) {
                  start = new Date(start);
                }

                if (!isNaN(filter.value2)) {
                  end = new Date(end);
                }
              }

              var valueDate = new Date(value);
              bMatch = valueDate >= start && valueDate <= end;
          }

          if (bMatch) filterResults.push(item);
        });
        return filterResults;
      };

      if (sorter.by && (sorter.order == _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["ORDER_ASC"] || sorter.order == _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["ORDER_DESC"])) {
        originalDataList.sort(function (a, b) {
          if (sorter.order == _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["ORDER_ASC"]) {
            if (typeof a[sorter.by] === 'string') {
              return _this.stripHtml(a[sorter.by]) > _this.stripHtml(b[sorter.by]) ? 1 : -1;
            } else if (typeof a[sorter.by] === 'number') {
              return Number(a[sorter.by]) > Number(b[sorter.by]) ? 1 : -1;
            } else {
              return -1;
            }
          } else {
            if (typeof a[sorter.by] === 'string') {
              return _this.stripHtml(a[sorter.by]) > _this.stripHtml(b[sorter.by]) ? -1 : 1;
            } else if (typeof a[sorter.by] === 'number') {
              return Number(a[sorter.by]) > Number(b[sorter.by]) ? -1 : 1;
            } else {
              return -1;
            }
          }
        });
      } //now let's filter


      filters.forEach(function (filter) {
        originalDataList = _filter(originalDataList, filter);
      });
      return originalDataList;
    }
  }, {
    key: "updateSingleSelectedRowAction",
    value: function updateSingleSelectedRowAction(state, rowIndex, columnKey, newValue) {
      var dataList = JSON.parse(JSON.stringify(state.dataList));
      var oldValue = dataList[rowIndex][columnKey];
      dataList[rowIndex][columnKey] = newValue; //here we need to udpate originalDataList as well as dataList

      var rowKeyVal = this.getRowKeyValFromIndex(rowIndex, state);
      var originalDataList = JSON.parse(JSON.stringify(state.originalDataList));
      var primaryKey = state.config.getPrimaryColumnKey();

      for (var i = 0; i < originalDataList.length; i++) {
        if (originalDataList[i][primaryKey] == rowKeyVal) {
          originalDataList[i][columnKey] = newValue;
          break;
        }
      }

      return [dataList, originalDataList, rowKeyVal, columnKey, oldValue];
    }
  }, {
    key: "updateSingleCellValue",
    value: function updateSingleCellValue(state, rowKeyVal, columnKey, value) {
      //1. we need to use rowKeyVal to find out rowIndex
      var dataList = JSON.parse(JSON.stringify(state.dataList));
      var primaryKey = state.config.getPrimaryColumnKey();
      var originalDataList = JSON.parse(JSON.stringify(state.originalDataList));

      if (Array.isArray(rowKeyVal)) {
        for (var i = 0; i < dataList.length; i++) {
          if (Array.isArray(rowKeyVal) && rowKeyVal.includes(dataList[i][primaryKey])) {
            dataList[i][columnKey] = value;
          }
        }

        for (var i = 0; i < originalDataList.length; i++) {
          if (Array.isArray(rowKeyVal) && rowKeyVal.includes(originalDataList[i][primaryKey])) {
            originalDataList[i][columnKey] = value;
          }
        }
      } else {
        for (var i = 0; i < dataList.length; i++) {
          if (dataList[i][primaryKey] == rowKeyVal) {
            dataList[i][columnKey] = value;
            break;
          }
        }

        for (var i = 0; i < originalDataList.length; i++) {
          if (originalDataList[i][primaryKey] == rowKeyVal) {
            originalDataList[i][columnKey] = value;
            break;
          }
        }
      }

      return [dataList, originalDataList];
    }
  }, {
    key: "upgradeConfig",
    value: function upgradeConfig(table, rows) {
      var _this4 = this;

      table.columns.forEach(function (column) {
        if (column.type == _entities_column__WEBPACK_IMPORTED_MODULE_2__["TYPE_TEXT"] && _this4.isDataListType(column.key, rows, table.listDeliminator)) {
          column.type = _entities_column__WEBPACK_IMPORTED_MODULE_2__["TYPE_LIST"];
        }

        if (column.type == _entities_column__WEBPACK_IMPORTED_MODULE_2__["TYPE_HTML"] && _this4.isDataHTMLListType(column.key, rows)) {
          column.type = _entities_column__WEBPACK_IMPORTED_MODULE_2__["TYPE_HTML_LIST"];
        }
      });
    }
  }, {
    key: "isDataListType",
    value: function isDataListType(colKey, rows) {
      var deliminator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ",";
      //1 check length of each cell, exclude 'UNKNOWN'
      //2. we only check 10 records here, if neighbour two items has length differene more than 5, then not a list
      var lengthThreshold = 10;
      var checkingCount = 5;
      var bList = true;
      var commaRows = 0;

      for (var i = 0; i < rows.length; i++) {
        var row = rows[i];

        if (isNaN(row[colKey]) && row[colKey] && row[colKey].includes(deliminator)) {
          var avgLength = 0;
          commaRows++;
          var items = row[colKey].split(deliminator);

          for (var j = 0; j < items.length - 1; j++) {
            var item = items[j];

            if (item.toLowerCase() != "unknown" && item.toLowerCase() != "" && items[j + 1].toLowerCase() != "unknown" && items[j + 1].toLowerCase() != "") {
              if (Math.abs(items[j + 1].trim().length - item.trim().length) > lengthThreshold) {
                bList = false;
              }
            }
          }
        }

        if (i > checkingCount || !bList) break;
      }

      if (commaRows == 0) return false;
      return bList;
    }
  }, {
    key: "getWidthOfText",
    value: function getWidthOfText(txt, fontname, fontsize) {
      if (!fontname) fontname = 'Roboto, "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif';
      if (!fontsize) fontsize = '14px';

      if (this.getWidthOfText.c === undefined) {
        this.getWidthOfText.c = document.createElement("canvas");
        this.getWidthOfText.ctx = this.getWidthOfText.c.getContext("2d");
      }

      this.getWidthOfText.ctx.font = fontsize + " " + fontname;
      return this.getWidthOfText.ctx.measureText(txt).width + 20;
    }
  }, {
    key: "getWidthOfHTML",
    value: function getWidthOfHTML(html, fontname, fontsize) {
      //assuming only first character is used to decide html.
      var content = html;

      if (html.indexOf("<") === 0) {
        var x = html.indexOf(">");
        var y = html.lastIndexOf("<");
        content = html.substring(x + 1, y);
      }

      return this.getWidthOfText(content, fontname, fontsize);
    }
  }, {
    key: "getColumnConfig",
    value: function getColumnConfig(config, colKey) {
      var cfg = '';
      config.columns.forEach(function (item) {
        if (item.key === colKey) cfg = item;
      });
      return cfg;
    }
  }, {
    key: "getRowActualHeight",
    value: function getRowActualHeight(colWidths, rowIndex, dataList, rowHeight, config) {
      var _this5 = this;

      var rowData = dataList[rowIndex];
      var lines = 1;
      Object.keys(colWidths).forEach(function (colKey) {
        if (typeof rowData[colKey] === "string" && !_this5.getColumnConfig(config, colKey).hidden && _this5.getColumnConfig(config, colKey).type === 'text') {
          var contentLength = _this5.getWidthOfText(rowData[colKey]);

          var colWidth = colWidths[colKey];
          lines = Math.ceil(contentLength / colWidth) > lines ? Math.ceil(contentLength / colWidth) : lines;
        }
      });
      return lines * rowHeight;
    }
  }, {
    key: "getDefaultColumns",
    value: function getDefaultColumns(columns) {
      var columnKeys = [];
      columns.forEach(function (column) {
        if (!column.hidden) columnKeys.push(column.key);
      });
      return columnKeys;
    }
  }, {
    key: "fixingCustomerConfig",
    value: function fixingCustomerConfig(passedConfig, dataList) {
      if (dataList && dataList.length === 0) return passedConfig;
      var currentColumnsOrder = passedConfig.columnsOrder;
      var currentHiddenColumns = passedConfig.hiddenColumns;
      var acturalColumns = Object.keys(dataList[0]);

      for (var i = currentColumnsOrder.length - 1; i >= 0; i--) {
        if (!acturalColumns.includes(currentColumnsOrder[i])) {
          currentColumnsOrder.splice(i, 1);
        }
      } //PI-2216 - data fields and config are different here, so can not do below checking using dataList - for Zendesk
      // for (let i = currentHiddenColumns.length - 1; i >= 0; i--) {
      //     if (!acturalColumns.includes(currentHiddenColumns[i])) {
      //         currentHiddenColumns.splice(i, 1);
      //     }
      // }


      passedConfig.columnsOrder = currentColumnsOrder;
      passedConfig.hiddenColumns = currentHiddenColumns;
      return passedConfig;
    }
  }, {
    key: "getColumnPosition",
    value: function getColumnPosition(state, colKey) {
      var columnsOrder = this.getVisibleColumnsOrderFromState(state);
      var bFirst = false;
      var bLast = false;
      var bMiddle = true;

      for (var i = 0; i < columnsOrder.length; i++) {
        if (i == 0 && columnsOrder[i] == colKey) {
          bFirst = true;
          break;
        } else if (i == columnsOrder.length - 1 && columnsOrder[i] == colKey) {
          bLast = true;
          break;
        }
      }

      if (bFirst || bLast) bMiddle = false;
      return {
        bFirst: bFirst,
        bLast: bLast,
        bMiddle: bMiddle
      };
    }
  }, {
    key: "isDataHTMLListType",
    value: function isDataHTMLListType(colKey, rows) {
      var lengthThreshold = 5;
      var checkingCount = 100;
      var bList = false;

      for (var i = 0; i < rows.length; i++) {
        var row = rows[i];
        var html = row[colKey];
        var checkingResults = this.analyzeHTMLListContent(html);

        if (checkingResults.innerDivs.length > 1) {
          bList = true;
          break;
        }

        if (i > checkingCount++) break;
      }

      return bList;
    } //here all the html content should be provided as <div.><div></div><div></div></div>;

  }, {
    key: "analyzeHTMLListContent",
    value: function analyzeHTMLListContent(html) {
      var outerDiv, innerDivs;

      if (html) {
        //step 1, get outer div
        outerDiv = html.substr(0, html.indexOf('>') + 1);
        innerDivs = [];
        var innerPartStr = html.substr(html.indexOf('>') + 1, html.lastIndexOf('</div>') - 1); //step 2. let's split here

        innerPartStr.split('</div>').forEach(function (part) {
          if (part !== '') {
            innerDivs.push(part + "</div>");
          }
        });
      } else {
        outerDiv = '';
        innerDivs = [];
      }

      return {
        outerDiv: outerDiv,
        innerDivs: innerDivs
      };
    }
  }, {
    key: "analyzeTextListContent",
    value: function analyzeTextListContent(text) {
      return typeof text == 'string' ? text.split(",") : [];
    }
  }, {
    key: "calCountForInerDivs",
    value: function calCountForInerDivs(innerDivs, colWidth) {
      var text = '',
          i;
      if (colWidth > 200) colWidth = 200;

      for (i = 0; i < innerDivs.length; i++) {
        var newText = text + this.stripHtml(innerDivs[i]);

        if (this.getWidthOfText(newText) > colWidth) {
          break;
        }

        text = newText;
      }

      return i > 1 ? i : 1; // todo: this logic needs to be double checked
    }
  }, {
    key: "stripHtml",
    value: function stripHtml(html) {
      // Create a new div element
      var temporalDivElement = document.createElement("div"); // Set the HTML content with the providen

      temporalDivElement.innerHTML = html; // Retrieve the text property of the element (cross-browser support)

      return temporalDivElement.textContent || temporalDivElement.innerText || "";
    }
  }, {
    key: "formatNumber",
    value: function formatNumber(number, columnConfig) {
      if (columnConfig.format === 'COMMASEPERATED') {
        return ('' + number).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      } else if (columnConfig.format === 'SHORTENED') {
        if (number > 1000000000) {
          return Math.floor(number / 1000000000) + ' GB';
        } else if (number > 1000000) {
          return Math.floor(number / 1000000) + ' MB';
        } else if (number > 1000) {
          return Math.floor(number / 1000) + ' KB';
        } else {
          return '' + number;
        }
      } else {
        return number;
      }
    }
  }]);

  return TableService;
}();



/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DTC93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vQ0wvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQ0wvLi9zcmMvY29tcG9uZW50cy9kYXRhX3RhYmxlL2RhdGF0YWJsZS5zY3NzIiwid2VicGFjazovL0NMLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUgc3luYyBeXFwuXFwvLiokIiwid2VicGFjazovL0NMLy4vcHVibGljL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9DTC8uL3NyYy9jb21wb25lbnRzL2FudF9kZW1vL2FudERlbW9Db21wLmpzIiwid2VicGFjazovL0NMLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL2Nzdl9nZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vQ0wvLi9zcmMvY29tcG9uZW50cy9jb21tb24vdXRpbHMuanMiLCJ3ZWJwYWNrOi8vQ0wvLi9zcmMvY29tcG9uZW50cy9kYXRhX3RhYmxlL0RhdGFUYWJsZUNvbXAuanMiLCJ3ZWJwYWNrOi8vQ0wvLi9zcmMvY29tcG9uZW50cy9kYXRhX3RhYmxlL2NvbXBzL0JvdW5kZWRUZXRoZXJDb21wLmpzIiwid2VicGFjazovL0NMLy4vc3JjL2NvbXBvbmVudHMvZGF0YV90YWJsZS9jb21wcy9DbGVhckZpbHRlckNvbXAuanMiLCJ3ZWJwYWNrOi8vQ0wvLi9zcmMvY29tcG9uZW50cy9kYXRhX3RhYmxlL2NvbXBzL0Rvd25sb2FkQ29tcC5qcyIsIndlYnBhY2s6Ly9DTC8uL3NyYy9jb21wb25lbnRzL2RhdGFfdGFibGUvY29tcHMvUGFnaW5hdG9yQ29tcC5qcyIsIndlYnBhY2s6Ly9DTC8uL3NyYy9jb21wb25lbnRzL2RhdGFfdGFibGUvY29tcHMvU2VsZWN0QWxsSW5kaWNhdG9yQ29tcC5qcyIsIndlYnBhY2s6Ly9DTC8uL3NyYy9jb21wb25lbnRzL2RhdGFfdGFibGUvY29tcHMvU2V0dGluZ0NvbXAuanMiLCJ3ZWJwYWNrOi8vQ0wvLi9zcmMvY29tcG9uZW50cy9kYXRhX3RhYmxlL2NvbXBzL1RhYmxlQ29tcC5qcyIsIndlYnBhY2s6Ly9DTC8uL3NyYy9jb21wb25lbnRzL2RhdGFfdGFibGUvY29tcHMvVGFibGVTZWFyY2hDb21wLmpzIiwid2VicGFjazovL0NMLy4vc3JjL2NvbXBvbmVudHMvZGF0YV90YWJsZS9jb21wcy9jZWxscy9jZWxscy5qcyIsIndlYnBhY2s6Ly9DTC8uL3NyYy9jb21wb25lbnRzL2RhdGFfdGFibGUvY29tcHMvY2VsbHMvaGVhZGVyY2VsbC5qcyIsIndlYnBhY2s6Ly9DTC8uL3NyYy9jb21wb25lbnRzL2RhdGFfdGFibGUvZGF0YXRhYmxlLnNjc3M/MTIwYyIsIndlYnBhY2s6Ly9DTC8uL3NyYy9jb21wb25lbnRzL2RhdGFfdGFibGUvZW50aXRpZXMvY29sdW1uLmpzIiwid2VicGFjazovL0NMLy4vc3JjL2NvbXBvbmVudHMvZGF0YV90YWJsZS9lbnRpdGllcy9jdXN0b21fY29uZmlnLmpzIiwid2VicGFjazovL0NMLy4vc3JjL2NvbXBvbmVudHMvZGF0YV90YWJsZS9lbnRpdGllcy9tb3JlX29wdGlvbi5qcyIsIndlYnBhY2s6Ly9DTC8uL3NyYy9jb21wb25lbnRzL2RhdGFfdGFibGUvZW50aXRpZXMvcGFnZS5qcyIsIndlYnBhY2s6Ly9DTC8uL3NyYy9jb21wb25lbnRzL2RhdGFfdGFibGUvZW50aXRpZXMvdGFibGUuanMiLCJ3ZWJwYWNrOi8vQ0wvLi9zcmMvY29tcG9uZW50cy9kYXRhX3RhYmxlL3JlZHV4L0FjdGlvblR5cGUuanMiLCJ3ZWJwYWNrOi8vQ0wvLi9zcmMvY29tcG9uZW50cy9kYXRhX3RhYmxlL3JlZHV4L2FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vQ0wvLi9zcmMvY29tcG9uZW50cy9kYXRhX3RhYmxlL3JlZHV4L3JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vQ0wvLi9zcmMvY29tcG9uZW50cy9kYXRhX3RhYmxlL3JlZHV4L3N0b3JlLmpzIiwid2VicGFjazovL0NMLy4vc3JjL2NvbXBvbmVudHMvZGF0YV90YWJsZS9zZXJ2aWNlcy90YWJsZV9zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImNvbXBzIiwiQW50RGVtb0NvbXBvbmVudCIsIkRhdGFUYWJsZUNvbXAiLCJzdHJpcEh0bWwiLCJodG1sIiwidGVtcG9yYWxEaXZFbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwicHVyZVRleHQiLCJ0ZXh0Q29udGVudCIsImlubmVyVGV4dCIsInJlcGxhY2UiLCJDc3ZHZW5lcmF0b3IiLCJkYXRhQXJyYXlPYmoiLCJmaWxlTmFtZSIsInNlcGFyYXRvciIsImFkZFF1b3RlcyIsImRvd25sb2FkQ29sdW1ucyIsInRpdGxlcyIsIk9iamVjdCIsImtleXMiLCJkYXRhQXJyYXkiLCJnZXREb3dubG9hZExpbmsiLCJyb3dzIiwicm93RGF0YSIsInJvdyIsImZvckVhY2giLCJ0aXRsZSIsInB1c2giLCJqb2luIiwiZGF0YUl0ZW0iLCJBcnJheSIsImlzQXJyYXkiLCJ2YWwiLCJsZW5ndGgiLCJ0eXBlIiwiZGF0YSIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImRvd25sb2FkTGluayIsImdldExpbmtFbGVtZW50IiwibGlua1RleHQiLCJsaW5rRWxlbWVudCIsImEiLCJocmVmIiwiZG93bmxvYWQiLCJyZW1vdmVBZnRlckRvd25sb2FkIiwic3R5bGUiLCJkaXNwbGF5IiwiYm9keSIsImFwcGVuZENoaWxkIiwiY2xpY2siLCJyZW1vdmVDaGlsZCIsIlV0aWxzIiwiY2IiLCJ0aW1lb3V0IiwidGltZUlkIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInV0aWwiLCJnZXRVdGlsIiwicmVxdWlyZSIsInByb3BzIiwiYmluZGluZ0Z1bmN0aW9ucyIsInNlcnZpY2UiLCJUYWJsZVNlcnZpY2UiLCJzdG9yZSIsIlMiLCJhcHBJZCIsImp1bXBUb1Jvd0luZGV4IiwiY29uZmlnIiwic2V0T3JpZ2luYWxUYWJsZUNvbmZpZyIsImdlbmVuZXJhdGVUYWJsZUNvbmZpZyIsInNldFVwZGF0ZWRUYWJsZUNvbmZpZyIsInVwZGF0ZVBhZ2UiLCJQYWdlIiwic2VsZWN0ZWRSb3dLZXlzIiwic2V0Um93QWxsU2VsZWN0ZWQiLCJyb3dLZXkiLCJ0b2dnbGVSb3dTZWxlY3RlZFdpdGhLZXkiLCJ1bkNsaWNrYWJsZUNlbGxzIiwic2V0VW5DbGlja2FibGVDZWxscyIsInNldFVwZGF0ZWREYXRhIiwidXBncmFkZUNvbmZpZyIsImdldFN0YXRlIiwiZGF0YUxpc3QiLCJjZmciLCJjdXN0b21Db25maWciLCJjb2x1bW5zIiwiY3VzdG9tZXJDb25maWciLCJnZW5lbmVyYXRlQ3VzdG9tQ29uZmlnIiwic2V0Q3VzdG9tQ29uZmlnIiwibWVyZ2VDdXN0b21lckNvbmZpZyIsIl9zb3J0RmlsdGVyRGF0YXROb0Rpc3BhdGNoIiwiZmluZFJvd0luZGV4RnJvbVJvd0tleVZhbHVlIiwid2luZG93IiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50Iiwic2V0RG93bmxvYWREYXRhIiwidG90YWxUaXRsZSIsInVwZGF0ZWREYXRhT2JqIiwiX3Njcm9sbFRvIiwiZ290b1Njcm9sbFBvc2l0aW9uIiwic2Nyb2xsUG9zaXRpb24iLCJ0b3RhbCIsInNldFRvdGFsUmVjb3JkcyIsIm92ZXJXcml0ZVNlbGVjdGVkS2V5cyIsImdsb2JhbCIsInNvcnRlciIsImZpbHRlcnMiLCJzb3J0RmlsdGVyRGF0YSIsInJvd0tleVZhbCIsImNvbHVtbktleSIsInZhbHVlIiwic2V0VXBkYXRlZENlbGxWYWx1ZSIsInNldEFwcGVuZGVkRGF0YSIsImh0bWxDb250ZW50IiwidXBkYXRlSWNvbkRyb3BEb3duQ29udGVudCIsInRoZW1lIiwic2V0VGhlbWUiLCJ0b2dnbGVBbGxSb3dzIiwicGFnZSIsInJlc2V0IiwiX3VwZGF0ZVdpZHRoIiwiYmluZCIsIl9vbkN1c3RvbUNvbmZpZ1VwZGF0ZSIsIl9vblNlbGVjdGVkUm93Q2hhbmdlZCIsIl9vblJvd0FjdGlvblNlbGVjdGVkIiwiX29uU29ydEZpbHRlckRhdGEiLCJfb25TaW5nbGVBY3Rpb25VcGRhdGVkIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJfb25TZWxlY3RBbGxMZXZlbCIsIl9vblRhYmxlU2VhcmNoIiwiX29uQ2hlY2tCb3hDaGFuZ2VkIiwid2luIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50Iiwib25yZXNpemUiLCJfdG9nZ2xlQ2xpY2tPdXRzaWRlIiwic3Vic2NyaWJlVG8iLCJDVVNUT01fQ09ORklHX1VQREFURSIsInN0YXRlIiwiUk9XX0FMTF9TRUxFQ1RFRCIsIlJPV19TRUxFQ1RFRCIsIlNJTkdMRV9ST1dfU0VMRUNURUQiLCJDSEVDS0JPWF9DSEVDS0VEIiwiUkFXX0FDVElPTl9TRUxFQ1RFRCIsIlNPUlRfQ09MVU1OIiwiRklMVEVSX1VQREFURSIsIlVQREFURV9USEVNRSIsInNldFN0YXRlIiwiVVBEQVRFX1NJTkdMRV9TRUxFQ1RFRF9BQ1RJT04iLCJTRUxFQ1RfQUxMX0xFVkVMIiwiVEFCTEVfU0VBUkNIIiwidGFibGVTZWFyY2hlZFRlcm0iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJyZXNldEFsbCIsImV2ZW50IiwiZXhjbHVkZWRFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInNlbGVjdGVkRWxlbWVudCIsImNvbnRhaW5zIiwidGFyZ2V0IiwiY2xvc2VBbGxQb3BVcCIsImNsb3NlQWxsRmlsdGVyUG9wVXAiLCJvbkNoZWNrQm94Q2hhbmdlZCIsImNoZWNrZWRSb3dLZXlzIiwidXRpbHMiLCJfZGVib3VuY2UiLCJvblNlbGVjdEFsbExldmVsIiwic2VsZWN0QWxsTGV2ZWwiLCJvblNpbmdsZUFjdGlvblVwZGF0ZWQiLCJwYXJhbXMiLCJwYXNzZWRCYWNrUGFyYW1zIiwicm93a2V5VmFsIiwib2xkVmFsdWUiLCJvbGRDb2x1bW5LZXkiLCJvbkN1c3RvbUNvbmZpZ1VwZGF0ZSIsIm9uU2VsZWN0ZWRSb3dDaGFuZ2VkIiwib25Sb3dBY3Rpb25TZWxlY3RlZCIsInJvd0FjdGlvblNlbGVjdGVkIiwicmVzZXRQYWdlIiwib25Tb3J0aW5nRmlsdGVyaW5nIiwidGVybSIsInNlYXJjaFdob2xlRGF0YSIsIkNsYXNzTmFtZXMiLCJkdl90YWJsZV9jbCIsIm5vaXIiLCJsaWdodCIsIkNvbXBvbmVudCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyIsIm9iamVjdCIsImZ1bmMiLCJvblJvd0V4cGFuZGVkQ29udGVudCIsIm9uTmV4dFBhZ2VIYW5kbGVyIiwib25Hb3RvUGFnZSIsIm9uTmF2aWdhdGUiLCJvbkNlbGxDbGlja2VkIiwiYXJyYXkiLCJvbkxpc3RJdGVtQ2xpY2siLCJvbkdsb2JhbERvd25sb2FkIiwiZGVmYXVsdFByb3BzIiwiQm91bmRlZFRldGhlckNvbXAiLCJ0YWJsZUVsZW1lbnQiLCJ0byIsImF0dGFjaG1lbnQiLCJwaW4iLCJjaGlsZHJlbiIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsIkNsZWFyRmlsdGVyQ29tcCIsInNob3dpbmciLCJ1bnN1YnNyaWJlckZpbHRlckNvbHVtbiIsIl9zZXRGaWx0ZXJDZmciLCJyZXNldEZpbHRlciIsIkRvd25sb2FkT3B0aW9uQ29tcCIsInNldE9mZnNldCIsImNsb3NlIiwic2VsZWN0UmVjb3JkcyIsInBhZ2VTaXplIiwic2VsZWN0ZWRDb3VudHMiLCJvZmZzZXQiLCJvZmZzZXRFcnJvciIsImdsb2JhbERvd25sb2FkQ29uZmlnIiwib25DbG9zZVBvcHVwIiwiaXNOYU4iLCJvbkNvbmZpcm1Eb3dubG9hZCIsImUiLCJyZWciLCJ0ZXN0IiwidHJpbSIsIkRvd25sb2FkQ29tcCIsImdldERvd25sb2FkQ29sdW1ucyIsImNsb3NlUG9wdXAiLCJjb25maXJtRG93bmxvYWQiLCJfZG93bmxvYWQiLCJpc09wZW4iLCJkb3dubG9hZGluZyIsImJ0blRpdGxlIiwiX3RoaXMiLCJ1blN1YnNjcmliZURvd25sb2FkIiwiU0VUX0RPV05MT0FEX0RBVEEiLCJkb3dubG9hZERhdGFMaXN0IiwiY29sdW1uc09yZGVyIiwib3V0cHV0Q29sdW1ucyIsIm1hcCIsImkiLCJjb2x1bW5Ub0JlRG93bmxvYWRlZCIsImNzdkdlbmVyYXRvciIsInJlY29yZHMiLCJzZXRHbG9iYWxEb3dubG9hZENvbmZpZyIsImdldEVsZW1lbnRCeUlkIiwiUGFnaW5hdG9yQ29tcG9uZW50IiwiZmlyc3QiLCJwcmUiLCJuZXh0IiwibGFzdCIsInRvdGFsUmVjb3JkcyIsImVuYWJsZVBhZ2luYXRvciIsInVuU3Vic2NyaWJlUGFnZSIsIlBBR0VfVVBEQVRFIiwidW5TdWJzY3JpYmVGaWx0ZXIiLCJEQVRBX1VQREFURUQiLCJyZXNldFN0YXRlIiwiY3VycmVudFBhZ2UiLCJwYWdlU3RyIiwiaW5BY3RpdmUiLCJpc0ZpcnN0RW5hYmxlZCIsImlzUHJlRW5hYmxlZCIsImdldFBhZ2VSYW5nZSIsImlzTmV4dEVuYWJsZWQiLCJpc0xhc3RFbmFibGVkIiwiaGlkZVRvdGFsIiwiU2VsZWN0QWxsSW5kaWNhdG9yQ29tcG9uZW50Iiwic2VsZWN0ZWRSb3dzQ291bnQiLCJzZWxlY3RMZXZlbCIsIl9zZXRTZWxlY3RlZCIsInRvZ2dsZVNlbGVjdEFsbCIsInVuc3Vic3JpYmVyQWxsU2VsZWN0ZWQiLCJ1bnN1YnNyaWJlclNpbmdsZVNlbGVjdGVkIiwiaXNBbGxSb3dTZWxlY3RlZCIsImxldmVsIiwic2V0U2VsZWN0QWxsTGV2ZWwiLCJ0b2dnbGVSb3dTZWxlY3RlZCIsImNvbXAiLCJTZXR0aW5nQ29tcG9uZW50Q29sdW1uSXRlbSIsIm9uQ2hhbmdlIiwiY2hlY2tlZCIsImFsbFNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiY29sdW1uSGlkZGVuVG1wIiwiY29sdW1uIiwiZ2V0Q29sdW1uQ29uZmlnIiwiY29sdW1uSGlkZGVuIiwic3Vic2NyaWJlcl9hbGwiLCJTRUxFQ1RfQUxMX0NPTFVNTlMiLCJvcGVuIiwic3Vic2NyaWJlcl9kZWZhdWx0IiwiU0VMRUNUX0RFRkFVTFRfQ09MVU1OUyIsIm9uSXRlbUNoZWNrZWQiLCJkZWZhdWx0Q29sdW1ucyIsImluY2x1ZGVzIiwiU2V0dGluZ0NvbXBvbmVudENvbHVtbnMiLCJzYXZlQ29sdW1ucyIsIm9uQ2hhbmdlQWxsIiwib25DaGFuZ2VEZWZhdWx0IiwidXBkYXRlZENvbHVtblN0YXR1cyIsImNvbHVtbk9yZGVyQ2hhbmdlZCIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsImdldE5vbmVTdGlja3lDb2x1bW5zT3JkZXJGcm9tU3RhdGUiLCJ1bnN1YnNjcmliZXJDbG9zZUFsbFBvcFVwIiwiQ0xPU0VfQUxMX1BPUFVQIiwib25DbG9zZSIsImpRdWVyeSIsInJlZnMiLCJjb2x1bXNXcmFwcGVyIiwic29ydGFibGUiLCJzdGFydFBvcyIsImVuZFBvcyIsImhhbmRsZSIsInN0YXJ0IiwidWkiLCJpdGVtIiwiaW5kZXgiLCJzdG9wIiwic3BsaWNlIiwic2V0Q29sdW1uVGVtcEhpZGRlblN0YXR1cyIsImtleSIsIm9uT3JkZXJDaGFuZ2VkIiwicmVzdG9yZVN0aWNreUNvbHVtbnNGcm9tU3RhdGUiLCJzZXRDb2x1bW5zSGlkZGVuIiwidHJpZ2dlclNlbGVjdEFsbENvbHVtbnMiLCJ0cmlnZ2VyRGVmYXVsdENvbHVtbnMiLCJzdG9wUHJvcGFnYXRpb24iLCJNYXRoIiwicmFuZG9tIiwiU2V0dGluZ0NvbXBvbmVudCIsInRvZ2dsZURyb3BEb3duIiwiZXhjbHVkZWRFbGVtZW50MSIsInNlbGVjdGVkRWxlbWVudDEiLCJUYWJsZUNvbXAiLCJ0YWJsZUNvbmZpZyIsImF1dG9TY3JvbGxpbmciLCJjb2x1bW5XaWR0aHMiLCJ3aWR0aCIsImhlaWdodCIsImdldENvbHVtbnNPcmRlckZyb21TdGF0ZSIsImNvbGxhcHNlZFJvd3MiLCJTZXQiLCJleHBhbmRlZFJvd3MiLCJzY3JvbGxUb1JvdyIsInNjcm9sbFRvcCIsIl9nZXRTY3JvbGxUb3BWYWx1ZSIsInVuU3Vic2NyaWJlQ29uZmlnIiwiQ09ORklHX1VQREFURSIsInN0YXRlT2JqIiwidW5TdWJzY3JpYmVEYXRhIiwidW5TdWJzY3JpYmVDZWxsRGF0YSIsIkNFTExfREFUQV9VUERBVEVEIiwidW5TdWJzY3JpYmVSZXNpemluZyIsIlJFU0laSU5HIiwidW5TdWJzY3JpYmVDb2x1bW5IaWRkZW4iLCJTRVRfQ09MVU1OU19ISURERU4iLCJfY3VzdG9tZXJDb25maWdVcGRhdGUiLCJ1blN1YnNjcmliZXJTZWxlY3RBbGxMZXZlbCIsInVuU3Vic2NyaWJlU2Nyb2xsVG8iLCJHT1RPX1NDUk9MTF9QT1NJVElPTiIsInJvd0luZGV4Iiwicm93SGVpZ2h0IiwidW5TdWJzY3JpYmVUaGVtZVVwZGF0ZSIsIl9vbkNvbHVtblJlc2l6ZUVuZENhbGxiYWNrIiwiX29uQ29sdW1uUmVvcmRlckVuZENhbGxiYWNrIiwiX2hhbmRsZUNvbGxhcHNlQ2xpY2siLCJfc3ViUm93SGVpZ2h0R2V0dGVyIiwiX3Jvd0V4cGFuZGVkR2V0dGVyIiwiX29uU2Nyb2xsRW5kQ2FsbEJhY2siLCJfb25Sb3dDbGljayIsIl9yb3dDbGFzc05hbWVHZXR0ZXIiLCJyb3dIZWlnaHRHZXR0ZXIiLCJfaGFuZGxlQ29sbGFwc2VBbGxDbGljayIsIm5ld0NvbHVtbk9yZGVyIiwic2V0Q29sdW1uc09yZGVyIiwic2V0SGlkZGVuQ29sdW1ucyIsImdldEhpZGRlbkNvbHVtbktleXMiLCJuZXdDb2x1bW5XaWR0aCIsInNldENvbHVtbldpZHRocyIsIm5ld09yZGVyIiwibmV3Q29sc09yZGVyIiwiZ2V0TmV3Q29sdW1uT3JkZXIiLCJyZW9yZGVyQ29sdW1uIiwiY29sdW1uQWZ0ZXIiLCJzaGFsbG93Q29weU9mQ29sbGFwc2VkUm93cyIsImhhcyIsImFkZCIsInJvd0NvbGxhcHNlYWJsZSIsImNvbGxhcHNlUm93SGVpZ2h0IiwiZ2V0Um93S2V5VmFsRnJvbUluZGV4Iiwicm93RXhwYW5kYWJsZSIsImdldFJvd0FjdHVhbEhlaWdodCIsInNjcm9sbFgiLCJzY3JvbGxZIiwidG90YWxIZWlnaHQiLCJzY3JvbGxQb3NpdGlvblVwZGF0ZWQiLCJkZUNvdXBsZVJvd1NlbGVjdEFuZENoZWNrYm94IiwidG9nZ2xlU2luZ2xlUm93U2VsZWN0ZWQiLCJ0YXJnZXRDaGVja2JveCIsImNsYXNzTmFtZSIsInRhcmdldFJhZGlvIiwiZW5hYmxlQ2hlY2tCb3giLCJlbmFibGVSYWRpb0J1dHRvbiIsInNpbmdsZVJvd1RvZ2dsZWFibGUiLCJyb3dDbGFzc05hbWVzIiwib25Sb3dDbGFzc05hbWVHZXR0ZXIiLCJpc1Jvd1NlbGVjdGVkIiwicm93SW5kZXhlcyIsImNoZWNrQ29sdW1uIiwiY29sbGFwc2VDb2x1bW4iLCJleHBhbmRhYmxlQ29sdW1uIiwiY29udHJvbGxlckNvbHVtbiIsIm5hdmlnYXRlQ29sdW1uIiwibmF2aWdhdGVhYmxlIiwiZG93bmxvYWRhYmxlIiwiZW5mb3JjZVJlc2V0RmlsdGVyQnRuIiwidGFibGVTZWFyY2giLCJoaWRlU2V0dGluZyIsImVuYWJsZUFsbEdsb2JhbFNlbGVjdG9yIiwidGFibGVCb2R5IiwibGlzdFZpZXciLCJ0YWJsZUdsb2JhbEFsbCIsImhlYWRlckhlaWdodCIsImNvbHVtbkNvbmZpZyIsIlRZUEVfU0lOR0xFX1NFTEVDVF9BQ1RJT05TIiwicmVvcmRhYmxlIiwiZml4ZWRSaWdodCIsInJlc2l6YWJsZSIsImZsZXhHcm93IiwiZml4ZWQiLCJtaW5XaWR0aCIsIlRhYmxlU2VhcmNoQ29tcCIsInVwZGF0ZSIsIm9uRm9jdXMiLCJvbkJsdXIiLCJmb2N1c2VkIiwidGV4dCIsInNldEdsb2JhbFNlYXJjaFRlcm0iLCJ0YWJsZVNlYXJjaFdyYXBwZXIiLCJDZWxsV3JhcHBlciIsIlRZUEVfTU9SRV9PUFRJT05TIiwiVFlQRV9OVU1CRVIiLCJUWVBFX1RFWFQiLCJUWVBFX1BVUkVfVEVYVCIsIlRZUEVfREFURSIsIlRZUEVfREFURVRJTUUiLCJkaXNhYmxlVG9vbHRpcCIsImdldFdpZHRoT2ZUZXh0IiwiVFlQRV9IVE1MIiwiZ2V0V2lkdGhPZkhUTUwiLCJUWVBFX0xJU1QiLCJUWVBFX0lDT05fQ0FMTF9CQUNLIiwiVFlQRV9DTElDS0FCTEUiLCJUWVBFX1BVUkVfQ0xJQ0tBQkxFIiwiVFlQRV9IVE1MX0xJU1QiLCJNb3JlT3B0aW9uQ2VsbCIsIm9uQ2xpY2siLCJ0b2dnbGVPcGVuIiwib3B0aW9uSXRlbXMiLCJvbk1vcmVPcHRpb25JdGVtQ2xpY2tlZCIsImZpbmRCeVZhbHVlIiwiZ2V0QXR0cmlidXRlIiwiX3VwZGF0ZVN0YXRlIiwibmV4dFByb3BzIiwiY2VsbFZhbHVlIiwiTW9yZU9wdGlvbkl0ZW1zIiwibW9yZU9wdGlvbkl0ZW1zIiwiaXRlbXMiLCJvcHRpb24iLCJvcHRpb25JdGVtIiwiaWNvblBhcnQiLCJjb250ZW50IiwiZHZDbFBvcFVwV3JhcHBlciIsIkljb25DYWxsQmFja0NlbGwiLCJfb25JY29uRGF0YVVwZGF0ZSIsInNob3dEZXRhaWwiLCJwb3BVcENvbnRlbnQiLCJzdWJzY3JpYmVyIiwiSUNPTl9DRUxMX0NMSUNLRURfQUNUSU9OIiwib25JY29uQ2xpY2tlZCIsImNvbFBvc2l0aW9uT2JqIiwiZ2V0Q29sdW1uUG9zaXRpb24iLCJwb3NpdGlvbiIsImJGaXJzdCIsImJMYXN0IiwiX19odG1sIiwiU2luZ2xlU2VsZWN0QWN0aW9uQ2VsbCIsInNlbGVjdGVkVmFsdWUiLCJkaXNhYmxlZCIsInNlbGVjdGVkIiwiZ2V0QWN0aW9uT3B0aW9ucyIsInVwZGF0ZVNpbmdsZVNlbGVjdEFjdGlvbiIsInBhc2VkSW5DZWxsRGF0YSIsInBhc3NlZEluQ2VsbERhdGEiLCJwcmltYXJ5S2V5IiwiZ2V0UHJpbWFyeUNvbHVtbktleSIsImNvbnRyb2xsZXJzIiwiaGlkZGVuIiwiU2luZ2xlU2VsZWN0T3B0aW9ucyIsImFjdGlvbk9wdGlvbnMiLCJzZWxlY3RhYmxlIiwiSHRtbExpc3RFeHBhbmRlZENlbGwiLCJjaGVja2luZ1Jlc3VsdHMiLCJhbmFseXplSFRNTExpc3RDb250ZW50Iiwib3V0ZXJEaXYiLCJpbm5lckRpdnMiLCJodG1sQ29tcHMiLCJIdG1sTGlzdENlbGwiLCJ0b2dnbGVNb3JlIiwic2hvd01vcmUiLCJodG1sQ250IiwicmVtYWluaW5nQ291bnQiLCJ1bnN1YnNjcmliZXIiLCJpbm5lckRpdkNvdW50cyIsImNhbENvdW50Rm9ySW5lckRpdnMiLCJjb2x1bW5XaWR0aCIsIkh0bWxMaXN0U2luZ2xlQ2xpY2thYmxlSXRlbSIsInByZXZlbnREZWZhdWx0IiwiY29udGVudHMiLCJIdG1sTGlzdENlbGxJdGVtcyIsImh0bWxEaXZzIiwiaHRtbExpc3QiLCJMaXN0Q2VsbCIsInRleHRDbnQiLCJ0ZXh0Q250cyIsImFuYWx5emVUZXh0TGlzdENvbnRlbnQiLCJkZWxpbWluYXRvciIsImxpc3REZWxpbWluYXRvciIsInNwbGl0IiwicGFydGlhbExpc3RUZXh0IiwiTGlzdENlbGxJdGVtcyIsIlRvb2xUaXBUZXh0Q2VsbCIsInNob3dUb29sVGlwIiwiaGlkZVRvb2xUaXAiLCJvcGVuVG9vbHRpcCIsInRleHRDbGFzcyIsImF1dG9FbGxpcHNlIiwidG9vbHRpcFdyYXBwZXIiLCJUb29sVGlwQ29tcCIsImR2VG9vbHRpcFRleHQiLCJUZXh0Q2VsbCIsImVkaXRpbmciLCJlZGl0YWJsZSIsIk51bWJlckNlbGwiLCJzdmMiLCJmb3JtYXROdW1iZXIiLCJUb29sVGlwSHRtbENlbGwiLCJIdG1sQ2VsbCIsIlB1cmVDbGlja2FibGVDZWxsIiwidXBkYXRlQ2xpY2thYmxlIiwidW5DbGlja2FibGUiLCJVTkNMSUNLQUJMRV9DRUxMU19VUERBVEVEIiwiQ2xpY2thYmxlQ2VsbCIsIkNvbGxhcHNlSGVhZGVyQ2VsbCIsImFsbE9wZW5lZCIsIl90b2dnbGUiLCJjYWxsYmFjayIsImFycmF5X3JpZ2h0IiwiYXJyYXlfcmlnaHRfZG93biIsIkNvbGxhcHNlQ2VsbCIsIl90b2dnbGVSb3ciLCJUT0dHTEVfQUxMX1JPV1MiLCJDb2x1bW5DaGVja0JveENlbGwiLCJfb25DaGFuZ2UiLCJ1blN1YnNjcmliZVNlbGVjdEFsbCIsInJvd0FsbFNlbGVjdGVkIiwidW5TdWJzY3JpYlJvd1NlbGVjdGVkIiwidW5TdWJzY3JpYmVTaW5nbGVSb3dTZWxlY3RlZCIsInRvZ2dsZUNoZWNrQm94Q2hhbmdlZCIsIkNvbHVtblJhZGlvQnV0dG9uQ2VsbCIsInVuU3Vic2NyaWJlUm93U2VsZWN0ZWQiLCJ1blN1YnNjcmliZUNoZWNrQm94Q2hlY2tlZCIsImlzUm93Q2hlY2tlZCIsImRlY291cGxlU2VsZWN0aW9uIiwiQ29sdW1uSGVhZGVyQ2hlY2tCb3hDZWxsIiwiX3Jvd0NoZWNrZWQiLCJ1blN1YnNjcmliZXJTZWxlY3RPbmUiLCJ1blN1YnNjcmliZXJTZWxlY3RBbGwiLCJuZXdDaGVja2VkIiwiTmF2aWdhdGVDZWxsIiwiX2NsaWNrIiwicm93U2VsZWN0ZWQiLCJ1blN1YnNjcmliZXJTZWxlY3RSb3ciLCJ1blN1YnNjcmliZXJTZWxlY3RBbGxSb3ciLCJuYXZXcmFwcGVyIiwibmF2V3JhcHBlclNlbGVjdGVkIiwiRGF0ZXRpbWUiLCJIZWFkZXJDZWxsIiwib3BlbkZpbHRlciIsIm1vdXNlSG92ZXIiLCJjdXJyZW50RmlsdGVyZWQiLCJfc2V0Q2ZnIiwic29ydCIsImZpbHRlciIsIm9uTW91c2VFbnRlclNvcnQiLCJvbk1vdXNlTGVhdmVTb3J0Iiwib25GaWx0ZXJVcGRhdGUiLCJDTE9TRV9BTExfRklMVEVSX1BPUFVQIiwidW5zdWJzcmliZXJTb3J0Q29sdW1uIiwiY3VycmVudFNvcnRlZCIsInNvcnRJY29uIiwiZ2V0Q29sdW1uU29ydE9yZGVyIiwiT1JERVJfTk9ORSIsIm9yZGVyIiwiT1JERVJfREVTQyIsImdldEZpbHRlckZvciIsInNldENvbHVtblNvcnQiLCJzZXRGaWx0ZXIiLCJmaWx0ZXJJY29uIiwiZmlsdGVyYWJsZSIsInVwIiwiZG93biIsInRvb2x0aXAiLCJzb3J0SWNvbldyYXBwZXIiLCJob3ZlclNvcnQiLCJmaWx0ZXJJY29uV3JhcHBlciIsInNlbGVjdGVkRmlsdGVyIiwiSGVhZGVyRmlsdGVyQ29tcCIsImZpbHRlckNvbXAiLCJmaWx0ZXJPcHRpb25zIiwiSGVhZGVyRmlsdGVyTnVtYmVyQ29tcCIsInVwZGF0ZVN0YXJ0TnVtIiwidXBkYXRlRW5kTnVtIiwiY29uZmlybSIsImNsb3NlbWUiLCJjdXJyZW50RmlsdGVyIiwiRmlsdGVyIiwiYnkiLCJvcGVyYXRvciIsIlRZUEVfQkVUV0VFTiIsInZhbHVlMSIsInZhbHVlMiIsIkhlYWRlckZpbHRlckRhdGVUaW1lQ29tcCIsImludmFsaWQiLCJ1cGRhdGVTdGFydERhdGUiLCJ1cGRhdGVFbmREYXRlIiwiRGF0ZSIsIl9kIiwiZ2V0VGltZSIsImNoZWNrVmFsaWRhdGUiLCJpblZhbGlkIiwiSGVhZGVyRmlsdGVyTGlzdENoZWNrQm94Q29tcCIsInVwZGF0ZUZpbHRlciIsIkhlYWRlckZpbHRlckxpc3RDb21wIiwia2V5c01hcCIsImNoZWNrTGlzdCIsImZpbHRlck9iaiIsInVuc2hpZnQiLCJUWVBFX0VRVUFMUyIsImVsZSIsImZpbHRlclZhbHVlIiwiaiIsInVuY2hlY2siLCJmaW5kIiwiY2hlY2tUaGlzIiwiSGVhZGVyRmlsdGVyQ29tcFRleHRIdG1sIiwiZmlsdGVyU2VhcmNoV3JhcHBlciIsIkRPV05MT0FEX1NUQU5EQVJEX0FMV0FZUyIsIkRPV05MT0FEX1NUQU5EQVJEX05FVkVSIiwiVFlQRV9OVU1CRVJfRk9STUFUX0NPTU1BU0VQRVJBVEVEIiwiVFlQRV9OVU1CRVJfRk9STUFUX1NIT1JURU5FRCIsIkNvbHVtbkFjdGlvbk9wdGlvbiIsIkNvbHVtbiIsImZvcm1hdCIsImRvd25sb2FkU3RhbmRhcmQiLCJvcHRpb25WYWx1ZSIsInRvTG93ZXJDYXNlIiwidHh0IiwiZm9udE5hbWUiLCJmb250U2l6ZSIsImMiLCJ1bmRlZmluZWQiLCJjdHgiLCJnZXRDb250ZXh0IiwiZm9udCIsIm1lYXN1cmVUZXh0IiwiQ3VzdG9tQ29uZmlnIiwiU29ydGVyIiwid2lkdGhzIiwidG9nZ2xlIiwidG9SZW1vdmUiLCJUWVBFX0NPTlRBSU5TIiwiVFlQRV9HUkVBVEVSX09SX0VRVUFMIiwiVFlQRV9MRVNTX09SX0VRVUFMIiwiVFlQRV9JTiIsImNvbEtleSIsIk9SREVSX0FTQyIsInJlc2V0U29ydCIsInRvZ2dsZVNvcnQiLCJuZXh0T3JkZXIiLCJlcnJvckNvZGUiLCJNb3JlT3B0aW9uSXRlbSIsImxpc3QiLCJmb3VuZEl0ZW0iLCJ0b3RhbFBhZ2UiLCJjZWlsIiwiZW5kIiwibWluIiwiVGFibGUiLCJjb2wiLCJjb2x1bW5LZXlzIiwiU0VUX0NPTFVNTl9ISURERU4iLCJSRVNFVF9GSUxURVIiLCJTSU5HTEVfUk9XX1NFTEVDVEVEX1dJVEhfS0VZIiwiT1JJR0lOQUxfQ09ORklHX1VQREFURSIsIlNDUk9MTF9QT1NJVElPTl9VUERBVEUiLCJTRVRfQ09MVU1OU19ISURERU5fVEVNUCIsInRhYmxlU2VhcmNoZWQiLCJhY3Rpb25UeXBlIiwicGF5bG9hZCIsInNldFVwZGF0ZWRTY3JvbGxQb3NpdGlvbiIsInNldE9yaWdpbmFsQ29uZmlnIiwic2V0VXBkYXRlZENlbGxEYXRhIiwicmVzaXppbmdUYWJsZSIsInNldFVwZGF0ZWRDb25maWciLCJzZXRSb3dTZWxlY3RlZCIsInNldFNpbmdsZVJvd1NlbGVjdGVkIiwic2V0U2luZ2xlUm93U2VsZWN0ZWRXaXRoS2V5Iiwic2V0U2luZ2xlU2VsZWN0ZWRBY3Rpb24iLCJuZXdWYWx1ZSIsInNldFJvd0FjdGlvblNlbGVjdGVkIiwiYWN0aW9uIiwic2V0Q29sdW1uSGlkZGVuIiwidWRwYXRlVGhlbWUiLCJzZXRUYWJsZVNlYXJjaFRlcm0iLCJyb3dDaGVja2JveENoYW5nZWQiLCJ1cGRhdGVVbkNsaWNrYWJsZUNlbGxzIiwib2JqIiwidXBkYXRlQ29sdW1uSGlkZGVuVGVtcCIsIkRhdGFUYWJsZVJlZHVjZXIiLCJuZXdTdGF0ZSIsImFzc2lnbiIsIm9yaWdpbmFsQ29uZmlnIiwiZ2V0RGVmYXVsdENvbHVtbnMiLCJmaXhpbmdDdXN0b21lckNvbmZpZyIsImdlbmVyYXRlQWxsU2VsZWN0ZWRSb3dLZXlzIiwiZ2VuZXJhdGVTZWxlY3RlZFJvd0tleXMiLCJnZW5lcmF0ZVNpbmdsZVNlbGVjdGVkUm93S2V5cyIsImN1cnJlbnRSb3dLZXlzIiwidXBkYXRlZFJlc3VsdHMiLCJ1cGRhdGVTaW5nbGVTZWxlY3RlZFJvd0FjdGlvbiIsIm9yaWdpbmFsRGF0YUxpc3QiLCJ1cGRhdGVSb3dBY3Rpb25TZWxlY3RlZCIsInVwZGF0ZVNvcnRlciIsInVwZGF0ZVNpbmdsZUNlbGxWYWx1ZSIsImNoZWNrZWRSb3dzIiwiZ2VuZXJhdGVDaGVja2VkUm93S2V5cyIsIlN0b3JlIiwicmVkdWNlciIsIlJFU0VUX0RBVEEiLCJfYXBwSWQiLCJfc3RhdGUiLCJnbG9iYWxBbGwiLCJfbGlzdGVuZXJzIiwiX2xpc3RlbmVyc0ZvciIsIl9yZWR1Y2VyIiwibGlzdGVuZXIiLCJnZXRTdG9yZSIsImwiLCJzZXRUb3RhbCIsImRpc3BhdGNoRm9yIiwicmVzdWx0c09iaiIsImFzT3JpZ2luYWwiLCJzZXREZWZhdWx0U2VsZWN0ZWRSb3dLZXlzIiwiY29uY2F0IiwiY29uZmlnT2JqIiwicGFnZU9iaiIsImRlZmF1bHRSb3dLZXlzIiwiY29sTGlzdE9iaiIsImNvbnNvbGUiLCJsb2ciLCJvcHRpb25zIiwicmF3Q29uZmlnIiwib3JpZ2luYWxDb2x1bW5PcmRlcnMiLCJpbmRleE9mIiwiZ2V0Q29sdW1uc09yZGVyIiwib3JpZ2luYWxUYWJsZUNvbmZpZyIsImNvbE9yZGVycyIsIm9yaWdpbmFsQ29sdW1uQ29uZmlnIiwiZ2V0VmlzaWJsZUNvbHVtbnNPcmRlciIsImdldE5vbmVTdGlja3lDb2x1bW5zT3JkZXIiLCJrZXlDb2x1bW5LZXkiLCJjdXJyZW50U2VsZWN0ZWRLZXlzIiwic2VsZWN0ZWRSb3dLZXkiLCJrZXlWYWwiLCJjdXJyZW50Um93QWN0aW9uU2VsZWN0ZWQiLCJfZmlsdGVyIiwiZmlsdGVyUmVzdWx0cyIsImJNYXRjaCIsImNvbEtleXMiLCJiIiwiTnVtYmVyIiwiZmlsdGVyVmFsIiwiZmlsdGVyZWRWYWx1ZXMiLCJ2IiwiZiIsImNvbHVtblR5cGUiLCJ2YWx1ZURhdGUiLCJ0YWJsZSIsImlzRGF0YUxpc3RUeXBlIiwiaXNEYXRhSFRNTExpc3RUeXBlIiwibGVuZ3RoVGhyZXNob2xkIiwiY2hlY2tpbmdDb3VudCIsImJMaXN0IiwiY29tbWFSb3dzIiwiYXZnTGVuZ3RoIiwiYWJzIiwiZm9udG5hbWUiLCJmb250c2l6ZSIsIngiLCJ5IiwibGFzdEluZGV4T2YiLCJzdWJzdHJpbmciLCJjb2xXaWR0aHMiLCJsaW5lcyIsImNvbnRlbnRMZW5ndGgiLCJjb2xXaWR0aCIsInBhc3NlZENvbmZpZyIsImN1cnJlbnRDb2x1bW5zT3JkZXIiLCJjdXJyZW50SGlkZGVuQ29sdW1ucyIsImhpZGRlbkNvbHVtbnMiLCJhY3R1cmFsQ29sdW1ucyIsImdldFZpc2libGVDb2x1bW5zT3JkZXJGcm9tU3RhdGUiLCJiTWlkZGxlIiwic3Vic3RyIiwiaW5uZXJQYXJ0U3RyIiwicGFydCIsIm5ld1RleHQiLCJudW1iZXIiLCJmbG9vciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELE87UUNWQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLFFBQVEsb0JBQW9CO1FBQzVCO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsaUJBQWlCLDRCQUE0QjtRQUM3QztRQUNBO1FBQ0Esa0JBQWtCLDJCQUEyQjtRQUM3QztRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOzs7UUFHQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMENBQTBDLGdDQUFnQztRQUMxRTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLHdEQUF3RCxrQkFBa0I7UUFDMUU7UUFDQSxpREFBaUQsY0FBYztR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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFOzs7Ozs7Ozs7Ozs7QUMvUkE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBLElBQUlBLEtBQUssR0FBRztBQUNSQyxrQkFBZ0IsRUFB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QUNaO0FBQ0EsVUFBSUMsa0JBQWtCLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixLQUF2QixDQUF6QixDQUZZLENBR1o7O0FBQ0FGLHdCQUFrQixDQUFDRyxTQUFuQixHQUErQkosSUFBL0IsQ0FKWSxDQUtaOztBQUNBLGFBQU9DLGtCQUFrQixDQUFDSyxXQUFuQixJQUFrQ0wsa0JBQWtCLENBQUNNLFNBQXJELElBQWtFLEVBQXpFO0FBQ0g7OztpQ0FFWSt6QixNLEVBQVFyWixZLEVBQWE7QUFDOUIsVUFBR0EsWUFBWSxDQUFDZ1AsTUFBYixLQUFzQixnQkFBekIsRUFBMEM7QUFDdEMsZUFBTyxDQUFDLEtBQUdxSyxNQUFKLEVBQVk5ekIsT0FBWixDQUFvQix1QkFBcEIsRUFBNkMsR0FBN0MsQ0FBUDtBQUNILE9BRkQsTUFFTSxJQUFHeWEsWUFBWSxDQUFDZ1AsTUFBYixLQUFzQixXQUF6QixFQUFxQztBQUN2QyxZQUFJcUssTUFBTSxHQUFHLFVBQWIsRUFBeUI7QUFDckIsaUJBQU9yZixJQUFJLENBQUNzZixLQUFMLENBQVdELE1BQU0sR0FBRyxVQUFwQixJQUFrQyxLQUF6QztBQUNILFNBRkQsTUFFTyxJQUFJQSxNQUFNLEdBQUcsT0FBYixFQUFzQjtBQUN6QixpQkFBT3JmLElBQUksQ0FBQ3NmLEtBQUwsQ0FBV0QsTUFBTSxHQUFHLE9BQXBCLElBQStCLEtBQXRDO0FBQ0gsU0FGTSxNQUVBLElBQUlBLE1BQU0sR0FBRyxJQUFiLEVBQW1CO0FBQ3RCLGlCQUFPcmYsSUFBSSxDQUFDc2YsS0FBTCxDQUFXRCxNQUFNLEdBQUcsSUFBcEIsSUFBNEIsS0FBbkM7QUFDSCxTQUZNLE1BRUE7QUFDSCxpQkFBTyxLQUFLQSxNQUFaO0FBQ0g7QUFDSixPQVZLLE1BVUQ7QUFDRCxlQUFPQSxNQUFQO0FBQ0g7QUFDSiIsImZpbGUiOiJjbC1jb21wb25lbnRzLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiQ0xcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiQ0xcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiQ0xcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGRhdGEpIHtcbiBcdFx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcbiBcdFx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcbiBcdFx0dmFyIGV4ZWN1dGVNb2R1bGVzID0gZGF0YVsyXTtcblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0XHQvLyBhZGQgZW50cnkgbW9kdWxlcyBmcm9tIGxvYWRlZCBjaHVuayB0byBkZWZlcnJlZCBsaXN0XG4gXHRcdGRlZmVycmVkTW9kdWxlcy5wdXNoLmFwcGx5KGRlZmVycmVkTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMgfHwgW10pO1xuXG4gXHRcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gYWxsIGNodW5rcyByZWFkeVxuIFx0XHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiBcdH07XG4gXHRmdW5jdGlvbiBjaGVja0RlZmVycmVkTW9kdWxlcygpIHtcbiBcdFx0dmFyIHJlc3VsdDtcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlZmVycmVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBkZWZlcnJlZE1vZHVsZSA9IGRlZmVycmVkTW9kdWxlc1tpXTtcbiBcdFx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcbiBcdFx0XHRmb3IodmFyIGogPSAxOyBqIDwgZGVmZXJyZWRNb2R1bGUubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBkZXBJZCA9IGRlZmVycmVkTW9kdWxlW2pdO1xuIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2RlcElkXSAhPT0gMCkgZnVsZmlsbGVkID0gZmFsc2U7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKGZ1bGZpbGxlZCkge1xuIFx0XHRcdFx0ZGVmZXJyZWRNb2R1bGVzLnNwbGljZShpLS0sIDEpO1xuIFx0XHRcdFx0cmVzdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBkZWZlcnJlZE1vZHVsZVswXSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdFwiY2wtY29tcG9uZW50c1wiOiAwXG4gXHR9O1xuXG4gXHR2YXIgZGVmZXJyZWRNb2R1bGVzID0gW107XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHRoaXNbXCJ3ZWJwYWNrSnNvbnBDTFwiXSA9IHRoaXNbXCJ3ZWJwYWNrSnNvbnBDTFwiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gYWRkIGVudHJ5IG1vZHVsZSB0byBkZWZlcnJlZCBsaXN0XG4gXHRkZWZlcnJlZE1vZHVsZXMucHVzaChbXCIuL3B1YmxpYy9zcmMvaW5kZXguanNcIixcInZlbmRvcnN+Y2wtY29tcG9uZW50c1wiXSk7XG4gXHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIHJlYWR5XG4gXHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubm9pciB7XFxuICBjb2xvcjogI2QyZDhlNztcXG4gIGxldHRlci1zcGFjaW5nOiAwLjVweDsgfVxcbiAgLm5vaXIgLmZpeGVkRGF0YVRhYmxlUm93TGF5b3V0X2ZpeGVkQ29sdW1uc0RpdmlkZXIge1xcbiAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkIHJnYmEoMjUyLCAyNTMsIDI1NSwgMC4wNikgIWltcG9ydGFudDsgfVxcbiAgLm5vaXIgLnB1YmxpY19maXhlZERhdGFUYWJsZV90b3BTaGFkb3cge1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDAsIDAsIDAsIDAuMjUpLCByZ2JhKDAsIDAsIDAsIDApKTsgfVxcbiAgLm5vaXIgLnB1YmxpY19maXhlZERhdGFUYWJsZV9ib3R0b21TaGFkb3cge1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoMGRlZywgcmdiYSgwLCAwLCAwLCAwLjI1KSwgcmdiYSgwLCAwLCAwLCAwKSk7IH1cXG4gIC5ub2lyIC5maXhlZERhdGFUYWJsZVJvd0xheW91dF9jb2x1bW5zUmlnaHRTaGFkb3cge1xcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoOTBkZWcsIHJnYmEoMCwgMCwgMCwgMC4yNSksIHJnYmEoMCwgMCwgMCwgMCkpOyB9XFxuICAubm9pciAuZml4ZWREYXRhVGFibGVSb3dMYXlvdXRfY29sdW1uc1NoYWRvdyB7XFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCg5MGRlZywgcmdiYSgwLCAwLCAwLCAwLjI1KSwgcmdiYSgwLCAwLCAwLCAwKSk7IH1cXG4gIC5ub2lyIC5oZWFkZXJGaWx0ZXJXcmFwcGVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE1MUMyQjsgfVxcbiAgICAubm9pciAuaGVhZGVyRmlsdGVyV3JhcHBlciAuZmlsdGVyU2VhcmNoVGl0bGUge1xcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XFxuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDsgfVxcbiAgICAubm9pciAuaGVhZGVyRmlsdGVyV3JhcHBlciAuZmlsdGVyU2VhcmNoV3JhcHBlciB7XFxuICAgICAgYm9yZGVyLWNvbG9yOiAjNjI3OWFjO1xcbiAgICAgIG1hcmdpbi1ib3R0b206IDVweDsgfVxcbiAgICAgIC5ub2lyIC5oZWFkZXJGaWx0ZXJXcmFwcGVyIC5maWx0ZXJTZWFyY2hXcmFwcGVyIGlucHV0IHtcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTsgfVxcbiAgICAubm9pciAuaGVhZGVyRmlsdGVyV3JhcHBlciAuaGVhZGVyRmlsdGVyQnV0dG9ucyB7XFxuICAgICAgcGFkZGluZy1ib3R0b206IDVweDsgfVxcbiAgICAgIC5ub2lyIC5oZWFkZXJGaWx0ZXJXcmFwcGVyIC5oZWFkZXJGaWx0ZXJCdXR0b25zIC5tYXRlcmlhbC1pY29ucyB7XFxuICAgICAgICBtYXJnaW4tbGVmdDogNXB4OyB9XFxuICAubm9pciAudGFibGVXcmFwcGVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFlMjUzODsgfVxcbiAgLm5vaXIgLnB1YmxpY19maXhlZERhdGFUYWJsZVJvd19tYWluIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzI0MzA0MjsgfVxcbiAgLm5vaXIgLnB1YmxpY19maXhlZERhdGFUYWJsZVJvd19oaWdobGlnaHRlZCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxZTI1Mzg7IH1cXG4gIC5ub2lyIC5wdWJsaWNfZml4ZWREYXRhVGFibGVfYm9keVJvdzpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM0NjUzNjY7IH1cXG4gICAgLm5vaXIgLnB1YmxpY19maXhlZERhdGFUYWJsZV9ib2R5Um93OmhvdmVyIC5wdWJsaWNfZml4ZWREYXRhVGFibGVDZWxsX21haW4ge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICM0NjUzNjY7IH1cXG4gIC5ub2lyIC5wdWJsaWNfZml4ZWREYXRhVGFibGVDZWxsX21haW4ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjQzMDQyO1xcbiAgICBib3JkZXI6IG5vbmU7IH1cXG4gIC5ub2lyIC5zZWxlY3RBbGxXcmFwcGVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzM0NDM2MzsgfVxcbiAgICAubm9pciAuc2VsZWN0QWxsV3JhcHBlciAuc3BhbkFsbEluZGljYXRvciB7XFxuICAgICAgY29sb3I6ICMwZDkxZTk7IH1cXG4gIC5ub2lyIC5wdWJsaWNfZml4ZWREYXRhVGFibGVSb3dfaGlnaGxpZ2h0ZWQgLnB1YmxpY19maXhlZERhdGFUYWJsZUNlbGxfbWFpbiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxRDI1Mzc7IH1cXG4gIC5ub2lyIC5wdWJsaWNfZml4ZWREYXRhVGFibGVfaGVhZGVyIHtcXG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHJnYmEoMjUyLCAyNTMsIDI1NSwgMC4wNikgIWltcG9ydGFudDtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMjUyLCAyNTMsIDI1NSwgMC4wNikgIWltcG9ydGFudDsgfVxcbiAgLm5vaXIgLnB1YmxpY19maXhlZERhdGFUYWJsZV9oZWFkZXIsXFxuICAubm9pciAucHVibGljX2ZpeGVkRGF0YVRhYmxlX2hlYWRlciAucHVibGljX2ZpeGVkRGF0YVRhYmxlQ2VsbF9tYWluLFxcbiAgLm5vaXIgLnB1YmxpY19maXhlZERhdGFUYWJsZV9zY3JvbGxiYXJTcGFjZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWUyNTM4ICFpbXBvcnRhbnQ7XFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7IH1cXG4gIC5ub2lyIC5tZGwtcmFkaW9fX291dGVyLWNpcmNsZSB7XFxuICAgIGJvcmRlci1jb2xvcjogI2ZmZjsgfVxcbiAgLm5vaXIgLm1kbC1yYWRpby5pcy1jaGVja2VkIC5tZGwtcmFkaW9fX291dGVyLWNpcmNsZSB7XFxuICAgIGJvcmRlci1jb2xvcjogIzBkOTFlOTsgfVxcbiAgLm5vaXIgLm1kbC1yYWRpb19faW5uZXItY2lyY2xlIHtcXG4gICAgYmFja2dyb3VuZDogIzBkOTFlOTsgfVxcbiAgLm5vaXIgLm1kbC1jaGVja2JveF9fYm94LW91dGxpbmUge1xcbiAgICBib3JkZXItY29sb3I6ICNmZmY7IH1cXG4gIC5ub2lyIC5maXhlZERhdGFUYWJsZUNlbGxMYXlvdXRfY29sdW1uUmVvcmRlckNvbnRhaW5lciB7XFxuICAgIGJvcmRlci1jb2xvcjogIzAyODRmZjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzMzM2M1MTtcXG4gICAgd2lkdGg6IDEycHg7XFxuICAgIGN1cnNvcjogbW92ZTsgfVxcbiAgICAubm9pciAuZml4ZWREYXRhVGFibGVDZWxsTGF5b3V0X2NvbHVtblJlb3JkZXJDb250YWluZXI6OmFmdGVyIHtcXG4gICAgICB0b3A6IGNhbGMoNTAlIC0gNXB4KTsgfVxcbiAgLm5vaXIgLmRyb3Bkb3duV3JhcHBlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyODM1NDggIWltcG9ydGFudDsgfVxcbiAgICAubm9pciAuZHJvcGRvd25XcmFwcGVyIC5jb2x1bXNXcmFwcGVyLFxcbiAgICAubm9pciAuZHJvcGRvd25XcmFwcGVyIC5jb250cm9sbGVyV3JhcHBlciB7XFxuICAgICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICMzOTQ5NmQ7IH1cXG4gICAgLm5vaXIgLmRyb3Bkb3duV3JhcHBlciAuY2xvc2VCdG4ge1xcbiAgICAgIGNvbG9yOiAjZDJkOGU3OyB9XFxuICAubm9pciAubmF2V3JhcHBlciBpIHtcXG4gICAgY29sb3I6ICMzNWE4ZjQ7IH1cXG4gIC5ub2lyIC5uYXZXcmFwcGVyOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzM1YThmNDsgfVxcbiAgICAubm9pciAubmF2V3JhcHBlcjpob3ZlciBpIHtcXG4gICAgICBjb2xvcjogI2ZmZjsgfVxcbiAgLm5vaXIgLm5hdldyYXBwZXJTZWxlY3RlZCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwZDkxZTk7IH1cXG4gICAgLm5vaXIgLm5hdldyYXBwZXJTZWxlY3RlZCBpIHtcXG4gICAgICBjb2xvcjogI2ZmZjsgfVxcbiAgLm5vaXIgLnRhYmxlU2VhcmNoV3JhcHBlciB7XFxuICAgIGJvcmRlci1jb2xvcjogIzYyNzlhYyAhaW1wb3J0YW50OyB9XFxuICAgIC5ub2lyIC50YWJsZVNlYXJjaFdyYXBwZXIgaSB7XFxuICAgICAgY29sb3I6IHdoaXRlOyB9XFxuICAgIC5ub2lyIC50YWJsZVNlYXJjaFdyYXBwZXIgaW5wdXQge1xcbiAgICAgIGNvbG9yOiB3aGl0ZTsgfVxcbiAgICAgIC5ub2lyIC50YWJsZVNlYXJjaFdyYXBwZXIgaW5wdXQ6OnBsYWNlaG9sZGVyIHtcXG4gICAgICAgIGNvbG9yOiAjOWVhNWI1OyB9XFxuICAubm9pciAudGFibGVIZWFkZXJUYWlsIC5lZGl0Q29sdW1uc0J1dHRvbiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2Mjc5YWMgIWltcG9ydGFudDsgfVxcbiAgLm5vaXIgLmRyb3Bkb3duU2VsZWN0VW5kZXJsaW5lIHtcXG4gICAgYm9yZGVyLWNvbG9yOiAjZDJkOGU3OyB9XFxuICAubm9pciAubGlzdFZpZXcgLnB1YmxpY19maXhlZERhdGFUYWJsZVJvd19oaWdobGlnaHRlZCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyNDMwNDI7IH1cXG4gIC5ub2lyIC5saXN0VmlldyAucHVibGljX2ZpeGVkRGF0YVRhYmxlQ2VsbF9tYWluIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzI0MzA0MjsgfVxcblxcbi5saWdodCAuZml4ZWREYXRhVGFibGVSb3dMYXlvdXRfZml4ZWRDb2x1bW5zRGl2aWRlciB7XFxuICBib3JkZXItbGVmdDogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4wNikgIWltcG9ydGFudDsgfVxcblxcbi5saWdodCAudGFibGVIZWFkIHtcXG4gIGJhY2tncm91bmQ6ICNmNGY0ZjQgIWltcG9ydGFudDsgfVxcblxcbi5saWdodCAudGFibGVXcmFwcGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNGY0ZjQ7IH1cXG5cXG4ubGlnaHQgLnRhYmxlU2VhcmNoV3JhcHBlciB7XFxuICBib3JkZXItY29sb3I6ICM1ZjVmNWYgIWltcG9ydGFudDsgfVxcblxcbi5saWdodCAuaGVhZGVyRmlsdGVyV3JhcHBlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOyB9XFxuICAubGlnaHQgLmhlYWRlckZpbHRlcldyYXBwZXIgLmZpbHRlclNlYXJjaFdyYXBwZXIge1xcbiAgICBib3JkZXItY29sb3I6ICM1ZjVmNWY7IH1cXG4gICAgLmxpZ2h0IC5oZWFkZXJGaWx0ZXJXcmFwcGVyIC5maWx0ZXJTZWFyY2hXcmFwcGVyIGlucHV0IHtcXG4gICAgICBjb2xvcjogYmxhY2s7IH1cXG5cXG4ubGlnaHQgLlNjcm9sbGJhckxheW91dF9tYWluIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNGY0ZjQgIWltcG9ydGFudDsgfVxcblxcbi5saWdodCAucHVibGljX2ZpeGVkRGF0YVRhYmxlX2hlYWRlciB7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2U4ZTllYiAhaW1wb3J0YW50O1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlOGU5ZWIgIWltcG9ydGFudDsgfVxcblxcbi5saWdodCAucHVibGljX2ZpeGVkRGF0YVRhYmxlX2hlYWRlcixcXG4ubGlnaHQgLnB1YmxpY19maXhlZERhdGFUYWJsZV9oZWFkZXIgLnB1YmxpY19maXhlZERhdGFUYWJsZUNlbGxfbWFpbixcXG4ubGlnaHQgLnB1YmxpY19maXhlZERhdGFUYWJsZV9zY3JvbGxiYXJTcGFjZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y0ZjRmNCAhaW1wb3J0YW50O1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTsgfVxcblxcbi5saWdodCAucHVibGljX2ZpeGVkRGF0YVRhYmxlQ2VsbF9tYWluIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7IH1cXG5cXG4ubGlnaHQgLnB1YmxpY19maXhlZERhdGFUYWJsZVJvd19oaWdobGlnaHRlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjRmNGY0OyB9XFxuXFxuLmxpZ2h0IC5wdWJsaWNfZml4ZWREYXRhVGFibGVfYm9keVJvdzpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBlMGUwOyB9XFxuICAubGlnaHQgLnB1YmxpY19maXhlZERhdGFUYWJsZV9ib2R5Um93OmhvdmVyIC5wdWJsaWNfZml4ZWREYXRhVGFibGVDZWxsX21haW4ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBlMGUwOyB9XFxuXFxuLmxpZ2h0IC50YWJsZUhlYWRlclRhaWwgLmVkaXRDb2x1bW5zQnV0dG9uIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM2MDYwNjAgIWltcG9ydGFudDsgfVxcblxcbi5saWdodCAuZHJvcGRvd25TZWxlY3RVbmRlcmxpbmUge1xcbiAgYm9yZGVyLWNvbG9yOiAjMjAyMDIwOyB9XFxuXFxuLmxpZ2h0IC5maXhlZERhdGFUYWJsZUNlbGxMYXlvdXRfY29sdW1uUmVvcmRlckNvbnRhaW5lcjo6YWZ0ZXIge1xcbiAgY29sb3I6ICM5NzllYWYgIWltcG9ydGFudDsgfVxcblxcbi5saWdodCAuZHZfdGFibGVfY2wgLm1hdGVyaWFsLWljb25zIHtcXG4gIGNvbG9yOiAjNjA2MDYwICFpbXBvcnRhbnQ7IH1cXG5cXG4ubGlnaHQgLmRyb3Bkb3duV3JhcHBlciAuY29sdW1zV3JhcHBlcixcXG4ubGlnaHQgLmRyb3Bkb3duV3JhcHBlciAuY29udHJvbGxlcldyYXBwZXIge1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICNkMmQ4ZTc7IH1cXG5cXG4ubGlnaHQgLm1kbC1yYWRpb19fb3V0ZXItY2lyY2xlIHtcXG4gIGJvcmRlci1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjU0KTsgfVxcblxcbi5saWdodCAubWRsLXJhZGlvLmlzLWNoZWNrZWQgLm1kbC1yYWRpb19fb3V0ZXItY2lyY2xlIHtcXG4gIGJvcmRlci1jb2xvcjogIzBkOTFlOTsgfVxcblxcbi5saWdodCAubWRsLXJhZGlvX19pbm5lci1jaXJjbGUge1xcbiAgYmFja2dyb3VuZDogIzBkOTFlOSAhaW1wb3J0YW50OyB9XFxuXFxuLmxpZ2h0IC5saXN0VmlldyAucHVibGljX2ZpeGVkRGF0YVRhYmxlUm93X2hpZ2hsaWdodGVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7IH1cXG5cXG4ubGlnaHQgLmxpc3RWaWV3IC5wdWJsaWNfZml4ZWREYXRhVGFibGVDZWxsX21haW4ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjsgfVxcblxcbi5TY3JvbGxiYXJMYXlvdXRfbWFpblZlcnRpY2FsIHtcXG4gIHotaW5kZXg6IDAgIWltcG9ydGFudDsgfVxcblxcbi5wdWJsaWNfZml4ZWREYXRhVGFibGVfaG9yaXpvbnRhbFNjcm9sbGJhciB7XFxuICBib3R0b206IDJweCAhaW1wb3J0YW50OyB9XFxuXFxuLm9mZnNldEVycm9yIHtcXG4gIGNvbG9yOiAjZmQ2YzZlO1xcbiAgbWFyZ2luLXRvcDogLTIxcHg7XFxuICBtYXJnaW4tYm90dG9tOiAxMHB4OyB9XFxuXFxuLmR2X3RhYmxlX2NsIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdG91Y2gtYWN0aW9uOiBub25lICFpbXBvcnRhbnQ7IH1cXG4gIC5kdl90YWJsZV9jbCAubGlzdFZpZXcgLnB1YmxpY19maXhlZERhdGFUYWJsZV9ib2R5Um93IHtcXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxMHB4KSAhaW1wb3J0YW50OyB9XFxuICAuZHZfdGFibGVfY2wgLmxpc3RWaWV3IC5tb3JlT3B0aW9uc1dyYXBwZXIge1xcbiAgICBtYXJnaW4tdG9wOiAtMnB4OyB9XFxuICAuZHZfdGFibGVfY2wgLmxpc3RWaWV3IC5jb2xsYXBzZVRvZ2dsZXIge1xcbiAgICBtYXJnaW4tdG9wOiAtMXB4OyB9XFxuICAuZHZfdGFibGVfY2wgLmNvbGxhcHNlVG9nZ2xlciB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgZm9udC1zaXplOiAxMnB4OyB9XFxuICAuZHZfdGFibGVfY2wgLmhlYWRlckNvbnRyb2xsZXJJY29uIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDE1cHg7IH1cXG4gIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBtaW4taGVpZ2h0OiAzMHB4OyB9XFxuICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC5kb3duIHtcXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xcbiAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAzMDBtcyBlYXNlOyB9XFxuICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC51cCB7XFxuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDMwMG1zIGVhc2U7IH1cXG4gICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLmFycmF5X3JpZ2h0IHtcXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMzAwbXMgZWFzZTsgfVxcbiAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAuYXJyYXlfcmlnaHRfZG93biB7XFxuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpO1xcbiAgICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAzMDBtcyBlYXNlOyB9XFxuICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC50YWJsZUhlYWQge1xcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgICB3aWR0aDogMTAwJTtcXG4gICAgICBoZWlnaHQ6IDUwcHg7IH1cXG4gICAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAudGFibGVIZWFkIC5tZGwtYnV0dG9uIHtcXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICAgICAgbGluZS1oZWlnaHQ6IHVuc2V0OyB9XFxuICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJIZWFkIHtcXG4gICAgICAgIHBhZGRpbmctbGVmdDogMzBweDsgfVxcbiAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJIZWFkIC50b3RhbFRpdGxlIHtcXG4gICAgICAgICAgZm9udC1zaXplOiAyMHB4OyB9XFxuICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIHtcXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIGhlaWdodDogaW5oZXJpdDsgfVxcbiAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC5jbGVhckZpbHRlckNvbXAge1xcbiAgICAgICAgICBjb2xvcjogI2QyOGMwMztcXG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgICBmbG9hdDogcmlnaHQ7XFxuICAgICAgICAgIG1hcmdpbi1yaWdodDogMTVweDsgfVxcbiAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC5kb3dubG9hZEJ0bldyYXBwZXIge1xcbiAgICAgICAgICBmbG9hdDogcmlnaHQ7XFxuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7IH1cXG4gICAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC5kb3dubG9hZEJ0bldyYXBwZXIgLmRvd25sb2FkQnRuIHtcXG4gICAgICAgICAgICBoZWlnaHQ6IDMwcHg7XFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2UgIWltcG9ydGFudDtcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAjNjI3OWFjOyB9XFxuICAgICAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC5kb3dubG9hZEJ0bldyYXBwZXIgLmRvd25sb2FkQnRuIC5tYXRlcmlhbC1pY29ucyB7XFxuICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogLTZweDtcXG4gICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogNnB4OyB9XFxuICAgICAgICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC50YWJsZUhlYWQgLnRhYmxlSGVhZGVyVGFpbCAuZG93bmxvYWRCdG5XcmFwcGVyIC5tZGwtYnV0dG9uIHtcXG4gICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTsgfVxcbiAgICAgICAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAudGFibGVIZWFkIC50YWJsZUhlYWRlclRhaWwgLmRvd25sb2FkQnRuV3JhcHBlciAuZG93bmxvd09wdGlvbldyYXBwZXIge1xcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgICAgICB0b3A6IDM3cHg7XFxuICAgICAgICAgICAgcmlnaHQ6IC0xMjhweDtcXG4gICAgICAgICAgICB6LWluZGV4OiAxMDAwO1xcbiAgICAgICAgICAgIHdpZHRoOiAyMDBweDsgfVxcbiAgICAgICAgICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC50YWJsZUhlYWQgLnRhYmxlSGVhZGVyVGFpbCAuZG93bmxvYWRCdG5XcmFwcGVyIC5kb3dubG93T3B0aW9uV3JhcHBlciAuZG93bmxvYWRDb250ZW50IHtcXG4gICAgICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzYzUxO1xcbiAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDQwcHg7IH1cXG4gICAgICAgICAgICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC50YWJsZUhlYWQgLnRhYmxlSGVhZGVyVGFpbCAuZG93bmxvYWRCdG5XcmFwcGVyIC5kb3dubG93T3B0aW9uV3JhcHBlciAuZG93bmxvYWRDb250ZW50IC5jbG9zZUJ0biB7XFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDEwcHg7XFxuICAgICAgICAgICAgICAgIHRvcDogN3B4OyB9XFxuICAgICAgICAgICAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAudGFibGVIZWFkIC50YWJsZUhlYWRlclRhaWwgLmRvd25sb2FkQnRuV3JhcHBlciAuZG93bmxvd09wdGlvbldyYXBwZXIgLmRvd25sb2FkQ29udGVudCB1bCB7XFxuICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMDtcXG4gICAgICAgICAgICAgICAgbGlzdC1zdHlsZTogbm9uZTsgfVxcbiAgICAgICAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC5kb3dubG9hZEJ0bldyYXBwZXIgLmRvd25sb3dPcHRpb25XcmFwcGVyIC5kb3dubG9hZENvbnRlbnQgQnV0dG9uIHtcXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgICAgICAgICBib3R0b206IDEwcHg7XFxuICAgICAgICAgICAgICAgIHJpZ2h0OiAxMHB4OyB9XFxuICAgICAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAudGFibGVIZWFkIC50YWJsZUhlYWRlclRhaWwgLnBhZ2luYXRvcldyYXBwZXIge1xcbiAgICAgICAgICBmbG9hdDogcmlnaHQ7XFxuICAgICAgICAgIG1hcmdpbi1yaWdodDogMTVweDsgfVxcbiAgICAgICAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAudGFibGVIZWFkIC50YWJsZUhlYWRlclRhaWwgLnBhZ2luYXRvcldyYXBwZXIgLnRvdGFsUmVjb3Jkc1dyYXBwZXIge1xcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDE1cHg7XFxuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOyB9XFxuICAgICAgICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC50YWJsZUhlYWQgLnRhYmxlSGVhZGVyVGFpbCAucGFnaW5hdG9yV3JhcHBlciB1bCB7XFxuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAwO1xcbiAgICAgICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICAgICAgICAgICAgd2lkdGg6IDI1MHB4OyB9XFxuICAgICAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC5wYWdpbmF0b3JXcmFwcGVyIHVsIGxpIHtcXG4gICAgICAgICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICAgICAgICAgICAgICBoZWlnaHQ6IDMwcHg7XFxuICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cXG4gICAgICAgICAgICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC50YWJsZUhlYWQgLnRhYmxlSGVhZGVyVGFpbCAucGFnaW5hdG9yV3JhcHBlciB1bCBsaS5pbkFjdGl2ZSB7XFxuICAgICAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgICAgICAgICAgICAgICBjb2xvcjogZ3JheTsgfVxcbiAgICAgICAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC5wYWdpbmF0b3JXcmFwcGVyIHVsIGxpIGkge1xcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7IH1cXG4gICAgICAgICAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC5wYWdpbmF0b3JXcmFwcGVyIHVsIGxpIGk6OnNlbGVjdGlvbiB7XFxuICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogbm9uZTsgfVxcbiAgICAgICAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC5wYWdpbmF0b3JXcmFwcGVyIHVsIGxpIC5pbmZvIHtcXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzMHB4O1xcbiAgICAgICAgICAgICAgICB3aWR0aDogMTUwcHg7XFxuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XFxuICAgICAgICAgICAgICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC50YWJsZUhlYWQgLnRhYmxlSGVhZGVyVGFpbCAucGFnaW5hdG9yV3JhcHBlciB1bCBsaSAuaW5mbyAuaW5uZXIge1xcbiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgICAgICAgICAgICB0b3A6IDZweDtcXG4gICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTsgfVxcbiAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC53cmFwcGVyIHtcXG4gICAgICAgICAgZmxvYXQ6IHJpZ2h0O1xcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICAgIG1hcmdpbi1yaWdodDogMTVweDsgfVxcbiAgICAgICAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAudGFibGVIZWFkIC50YWJsZUhlYWRlclRhaWwgLndyYXBwZXIgLmVkaXRDb2x1bW5zQnV0dG9uIHtcXG4gICAgICAgICAgICBoZWlnaHQ6IDMwcHg7XFxuICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XFxuICAgICAgICAgICAgYm94LXNoYWRvdzogbm9uZTsgfVxcbiAgICAgICAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAudGFibGVIZWFkIC50YWJsZUhlYWRlclRhaWwgLndyYXBwZXIgLmRyb3Bkb3duV3JhcHBlciB7XFxuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgICAgIHRvcDogMjVweDtcXG4gICAgICAgICAgICByaWdodDogLTE1cHg7XFxuICAgICAgICAgICAgei1pbmRleDogMTAwMDtcXG4gICAgICAgICAgICBoZWlnaHQ6IDQzMHB4O1xcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgICAgICAgICBib3gtc2hhZG93OiAwIDJweCAycHggMCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwIDNweCAxcHggLTJweCByZ2JhKDAsIDAsIDAsIDAuMiksIDAgMXB4IDVweCAwIHJnYmEoMCwgMCwgMCwgMC4xMik7IH1cXG4gICAgICAgICAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAudGFibGVIZWFkIC50YWJsZUhlYWRlclRhaWwgLndyYXBwZXIgLmRyb3Bkb3duV3JhcHBlciAuZHJvcGRvd25Db250ZW50IHtcXG4gICAgICAgICAgICAgIHdpZHRoOiA2MjBweDsgfVxcbiAgICAgICAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC53cmFwcGVyIC5kcm9wZG93bldyYXBwZXIgLmRyb3Bkb3duQ29udGVudCAuY29udHJvbGxlcldyYXBwZXIge1xcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDcwcHg7XFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTBweCAyNHB4IDA7IH1cXG4gICAgICAgICAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC53cmFwcGVyIC5kcm9wZG93bldyYXBwZXIgLmRyb3Bkb3duQ29udGVudCAuY29udHJvbGxlcldyYXBwZXIgLmNvbHVtblRpdGxlIHtcXG4gICAgICAgICAgICAgICAgICBjb2xvcjogIzYyNzlhYzsgfVxcbiAgICAgICAgICAgICAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAudGFibGVIZWFkIC50YWJsZUhlYWRlclRhaWwgLndyYXBwZXIgLmRyb3Bkb3duV3JhcHBlciAuZHJvcGRvd25Db250ZW50IC5jb250cm9sbGVyV3JhcHBlciAubWRsLWNoZWNrYm94X19sYWJlbCB7XFxuICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiBpbmhlcml0OyB9XFxuICAgICAgICAgICAgICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC50YWJsZUhlYWQgLnRhYmxlSGVhZGVyVGFpbCAud3JhcHBlciAuZHJvcGRvd25XcmFwcGVyIC5kcm9wZG93bkNvbnRlbnQgLmNvbnRyb2xsZXJXcmFwcGVyIHVsIHtcXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDA7IH1cXG4gICAgICAgICAgICAgICAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAudGFibGVIZWFkIC50YWJsZUhlYWRlclRhaWwgLndyYXBwZXIgLmRyb3Bkb3duV3JhcHBlciAuZHJvcGRvd25Db250ZW50IC5jb250cm9sbGVyV3JhcHBlciB1bCBsaSB7XFxuICAgICAgICAgICAgICAgICAgICBsaXN0LXN0eWxlOiBub25lO1xcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lO1xcbiAgICAgICAgICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDIwcHg7IH1cXG4gICAgICAgICAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC53cmFwcGVyIC5kcm9wZG93bldyYXBwZXIgLmRyb3Bkb3duQ29udGVudCAuY29udHJvbGxlcldyYXBwZXIgLmNsb3NlQnRuIHtcXG4gICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICAgICAgICAgICAgcmlnaHQ6IDA7XFxuICAgICAgICAgICAgICAgICAgdG9wOiAwO1xcbiAgICAgICAgICAgICAgICAgIG1pbi13aWR0aDogMzZweDtcXG4gICAgICAgICAgICAgICAgICBtYXJnaW46IDRweDtcXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwOyB9XFxuICAgICAgICAgICAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAudGFibGVIZWFkIC50YWJsZUhlYWRlclRhaWwgLndyYXBwZXIgLmRyb3Bkb3duV3JhcHBlciAuZHJvcGRvd25Db250ZW50IC5jb2x1bXNXcmFwcGVyIHtcXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyODBweDtcXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87XFxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAgMjRweDsgfVxcbiAgICAgICAgICAgICAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAudGFibGVIZWFkIC50YWJsZUhlYWRlclRhaWwgLndyYXBwZXIgLmRyb3Bkb3duV3JhcHBlciAuZHJvcGRvd25Db250ZW50IC5jb2x1bXNXcmFwcGVyIC5jb2x1bW5JdGVtIHtcXG4gICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICAgICAgICAgICAgd2lkdGg6IDIwMHB4O1xcbiAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxuICAgICAgICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgICAgICAgICAgIGZsb2F0OiBsZWZ0OyB9XFxuICAgICAgICAgICAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC53cmFwcGVyIC5kcm9wZG93bldyYXBwZXIgLmRyb3Bkb3duQ29udGVudCAuY29sdW1zV3JhcHBlciAuY29sdW1uSXRlbSAucmVvcmRlciB7XFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjVweDtcXG4gICAgICAgICAgICAgICAgICAgIGZsb2F0OiBsZWZ0OyB9XFxuICAgICAgICAgICAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC53cmFwcGVyIC5kcm9wZG93bldyYXBwZXIgLmRyb3Bkb3duQ29udGVudCAuY29sdW1zV3JhcHBlciAuY29sdW1uSXRlbSAuY2hlY2tib3hXcmFwcGVyIHtcXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA4NSU7XFxuICAgICAgICAgICAgICAgICAgICBmbG9hdDogbGVmdDsgfVxcbiAgICAgICAgICAgICAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC53cmFwcGVyIC5kcm9wZG93bldyYXBwZXIgLmRyb3Bkb3duQ29udGVudCAuY29sdW1zV3JhcHBlciAuY29sdW1uSXRlbSAuY2hlY2tib3hXcmFwcGVyIGxhYmVsIHtcXG4gICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBhbGwtc2Nyb2xsOyB9XFxuICAgICAgICAgICAgICAgICAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAudGFibGVIZWFkIC50YWJsZUhlYWRlclRhaWwgLndyYXBwZXIgLmRyb3Bkb3duV3JhcHBlciAuZHJvcGRvd25Db250ZW50IC5jb2x1bXNXcmFwcGVyIC5jb2x1bW5JdGVtIC5jaGVja2JveFdyYXBwZXIgLmNoZWNrYm94TGFibGUge1xcbiAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDI1cHg7XFxuICAgICAgICAgICAgICAgICAgICAgIHRvcDogMDsgfVxcbiAgICAgICAgICAgICAgICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC50YWJsZUhlYWQgLnRhYmxlSGVhZGVyVGFpbCAud3JhcHBlciAuZHJvcGRvd25XcmFwcGVyIC5kcm9wZG93bkNvbnRlbnQgLmNvbHVtc1dyYXBwZXIgLmNvbHVtbkl0ZW0gLnRpdGxlIHtcXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxNTBweDtcXG4gICAgICAgICAgICAgICAgICAgIGZsb2F0OiBsZWZ0O1xcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDMwcHg7IH1cXG4gICAgICAgICAgICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC50YWJsZUhlYWQgLnRhYmxlSGVhZGVyVGFpbCAud3JhcHBlciAuZHJvcGRvd25XcmFwcGVyIC5kcm9wZG93bkNvbnRlbnQgLmJ1dHRvbnNXcmFwcGVyIHtcXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1MHB4O1xcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMCAyNHB4OyB9XFxuICAgICAgICAgICAgICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC50YWJsZUhlYWQgLnRhYmxlSGVhZGVyVGFpbCAud3JhcHBlciAuZHJvcGRvd25XcmFwcGVyIC5kcm9wZG93bkNvbnRlbnQgLmJ1dHRvbnNXcmFwcGVyIC5tZGwtYnV0dG9uIHtcXG4gICAgICAgICAgICAgICAgICBjb2xvcjogIzYyNzlhYztcXG4gICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogNXB4OyB9XFxuICAgICAgICAgICAgICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC50YWJsZUhlYWQgLnRhYmxlSGVhZGVyVGFpbCAud3JhcHBlciAuZHJvcGRvd25XcmFwcGVyIC5kcm9wZG93bkNvbnRlbnQgLmJ1dHRvbnNXcmFwcGVyIC5tZGwtYnV0dG9uLS1yYWlzZWQubWRsLWJ1dHRvbi0tY29sb3JlZCB7XFxuICAgICAgICAgICAgICAgICAgY29sb3I6ICNmZmY7IH1cXG4gICAgICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC50YWJsZUhlYWQgLnRhYmxlSGVhZGVyVGFpbCAudGFibGVTZWFyY2hXcmFwcGVyIHtcXG4gICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICBoZWlnaHQ6IDMwcHg7XFxuICAgICAgICAgIG1hcmdpbi1yaWdodDogMTVweDtcXG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkO1xcbiAgICAgICAgICB0cmFuc2l0aW9uOiBib3JkZXItYm90dG9tIGVhc2UtaW4tb3V0IDMwMG1zOyB9XFxuICAgICAgICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC50YWJsZUhlYWQgLnRhYmxlSGVhZGVyVGFpbCAudGFibGVTZWFyY2hXcmFwcGVyIGkge1xcbiAgICAgICAgICAgIHdpZHRoOiAzMHB4O1xcbiAgICAgICAgICAgIGhlaWdodDogMzBweDtcXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgICAgICAgZm9udC1zaXplOiAyMXB4O1xcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsgfVxcbiAgICAgICAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAudGFibGVIZWFkIC50YWJsZUhlYWRlclRhaWwgLnRhYmxlU2VhcmNoV3JhcHBlciBpbnB1dCB7XFxuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gICAgICAgICAgICBwYWRkaW5nOiAwO1xcbiAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0OyB9XFxuICAgICAgICAgICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlSGVhZCAudGFibGVIZWFkZXJUYWlsIC50YWJsZVNlYXJjaFdyYXBwZXIgaW5wdXQ6Zm9jdXMge1xcbiAgICAgICAgICAgICAgb3V0bGluZTogbm9uZTsgfVxcbiAgICAgICAgICAuZHZfdGFibGVfY2wgLnRhYmxlV3JhcHBlciAudGFibGVIZWFkIC50YWJsZUhlYWRlclRhaWwgLnRhYmxlU2VhcmNoV3JhcHBlci5mb2N1c2VkIHtcXG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgIzBkOTFlOSAhaW1wb3J0YW50OyB9XFxuICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC50YWJsZUJvZHkge1xcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICB0b3A6IDUwcHg7IH1cXG4gICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnRhYmxlR2xvYmFsQWxsIHtcXG4gICAgICB0b3A6IDkwcHg7IH1cXG4gICAgLmR2X3RhYmxlX2NsIC50YWJsZVdyYXBwZXIgLnNlbGVjdEFsbFdyYXBwZXIge1xcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICB0b3A6IDUwcHg7XFxuICAgICAgbGVmdDogMDtcXG4gICAgICByaWdodDogMDtcXG4gICAgICBoZWlnaHQ6IDQwcHg7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgIHBhZGRpbmctbGVmdDogMjBweDsgfVxcbiAgICAgIC5kdl90YWJsZV9jbCAudGFibGVXcmFwcGVyIC5zZWxlY3RBbGxXcmFwcGVyIC5zcGFuQWxsSW5kaWNhdG9yIHtcXG4gICAgICAgIGNvbG9yOiAjMGQ5MWU5O1xcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDIwcHg7XFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7IH1cXG4gIC5kdl90YWJsZV9jbCAuaGVhZGVyV3JhcHBlciB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICAgIGxlZnQ6IDE1cHg7XFxuICAgIHJpZ2h0OiAwOyB9XFxuICAgIC5kdl90YWJsZV9jbCAuaGVhZGVyV3JhcHBlciAuc29ydEljb25XcmFwcGVyIHtcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgcGFkZGluZy1sZWZ0OiAycHg7IH1cXG4gICAgICAuZHZfdGFibGVfY2wgLmhlYWRlcldyYXBwZXIgLnNvcnRJY29uV3JhcHBlciAubWF0ZXJpYWwtaWNvbnMge1xcbiAgICAgICAgZm9udC1zaXplOiAyMHB4OyB9XFxuICAgIC5kdl90YWJsZV9jbCAuaGVhZGVyV3JhcHBlciAuZmlsdGVySWNvbldyYXBwZXIge1xcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICBsZWZ0OiAtMnB4O1xcbiAgICAgIGN1cnNvcjogcG9pbnRlcjsgfVxcbiAgICAgIC5kdl90YWJsZV9jbCAuaGVhZGVyV3JhcHBlciAuZmlsdGVySWNvbldyYXBwZXIgLm1hdGVyaWFsLWljb25zIHtcXG4gICAgICAgIGZvbnQtc2l6ZTogMjBweDsgfVxcbiAgICAuZHZfdGFibGVfY2wgLmhlYWRlcldyYXBwZXIgLnNlbGVjdGVkRmlsdGVyIHtcXG4gICAgICBjb2xvcjogI2QyOGMwMzsgfVxcbiAgICAuZHZfdGFibGVfY2wgLmhlYWRlcldyYXBwZXIgLmhvdmVyU29ydCB7XFxuICAgICAgb3BhY2l0eTogMC42OyB9XFxuICAgIC5kdl90YWJsZV9jbCAuaGVhZGVyV3JhcHBlciAuc29ydEljb25VcCB7XFxuICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDMwMG1zIGVhc2U7XFxuICAgICAgdHJhbnNmb3JtOiByb3RhdGVaKDBkZWcpOyB9XFxuICAgIC5kdl90YWJsZV9jbCAuaGVhZGVyV3JhcHBlciAuc29ydEljb25Eb3duIHtcXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZVooMTgwZGVnKTsgfVxcbiAgICAuZHZfdGFibGVfY2wgLmhlYWRlcldyYXBwZXIgLnRpdGxlIHtcXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgbGVmdDogMjNweDtcXG4gICAgICB0b3A6IDVweDsgfVxcbiAgICAuZHZfdGFibGVfY2wgLmhlYWRlcldyYXBwZXIgLmZpbHRlckF0dGFjaFBvaW50IHtcXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgbGVmdDogMDtcXG4gICAgICB0b3A6IDIzcHg7IH1cXG4gIC5kdl90YWJsZV9jbCAuZml4ZWREYXRhVGFibGVDZWxsTGF5b3V0X2NvbHVtblJlb3JkZXJDb250YWluZXI6OmFmdGVyIHtcXG4gICAgdG9wOiBjYWxjKDUwJSAtIDVweCk7IH1cXG4gIC5kdl90YWJsZV9jbCAucm93U2VsZWN0ZWQgLnB1YmxpY19maXhlZERhdGFUYWJsZUNlbGxfbWFpbiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHllbGxvdzsgfVxcbiAgLmR2X3RhYmxlX2NsIC5saWdodHJvd1NlbGVjdGVkIC5wdWJsaWNfZml4ZWREYXRhVGFibGVDZWxsX21haW4ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7IH1cXG4gIC5kdl90YWJsZV9jbCAubm9pcnJvd1NlbGVjdGVkIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzM5NDk2RDsgfVxcbiAgICAuZHZfdGFibGVfY2wgLm5vaXJyb3dTZWxlY3RlZCAucHVibGljX2ZpeGVkRGF0YVRhYmxlQ2VsbF9tYWluIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzk0OTZEOyB9XFxuICAuZHZfdGFibGVfY2wgLm1vcmVIb29rIHtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcXG4gICAgd2lkdGg6IDUwcHg7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxcbiAgLmR2X3RhYmxlX2NsIC5kcm9wRG93bkFjdGlvbldyYXBwZXIge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGxlZnQ6IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICB0b3A6IDA7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IH1cXG4gICAgLmR2X3RhYmxlX2NsIC5kcm9wRG93bkFjdGlvbldyYXBwZXIgLnRpdGxlIHtcXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgbGVmdDogMjBweDtcXG4gICAgICB0b3A6IDEwcHg7XFxuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgICAgIHdpZHRoOiBjYWxjKDEwMCUgLSA2MHB4KTsgfVxcbiAgICAuZHZfdGFibGVfY2wgLmRyb3BEb3duQWN0aW9uV3JhcHBlciAubWF0ZXJpYWwtaWNvbnMge1xcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICByaWdodDogMDtcXG4gICAgICB0b3A6IDlweDsgfVxcbiAgICAuZHZfdGFibGVfY2wgLmRyb3BEb3duQWN0aW9uV3JhcHBlciAub3BlbiB7XFxuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTE4MGRlZyk7XFxuICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDE1MG1zIGVhc2U7IH1cXG4gICAgLmR2X3RhYmxlX2NsIC5kcm9wRG93bkFjdGlvbldyYXBwZXIgLmFjdGlvbkRyb3BEb3duQXR0YWNoUG9pbnQge1xcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICB0b3A6IDM2cHg7XFxuICAgICAgbGVmdDogMzVweDsgfVxcbiAgICAuZHZfdGFibGVfY2wgLmRyb3BEb3duQWN0aW9uV3JhcHBlciAuZHJvcGRvd25TZWxlY3RVbmRlcmxpbmUge1xcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICB0b3A6IDIwcHg7XFxuICAgICAgbGVmdDogMjBweDtcXG4gICAgICB3aWR0aDogY2FsYygxMDAlIC0gMjdweCk7IH1cXG4gICAgLmR2X3RhYmxlX2NsIC5kcm9wRG93bkFjdGlvbldyYXBwZXIgLmRyb3BEb3duQ29udGVudCB7XFxuICAgICAgY29sb3I6IHJlZDtcXG4gICAgICBmb250LXNpemU6IDQwcHg7IH1cXG4gICAgLmR2X3RhYmxlX2NsIC5kcm9wRG93bkFjdGlvbldyYXBwZXIgLmhpZGRlbiB7XFxuICAgICAgZGlzcGxheTogbm9uZTsgfVxcbiAgLmR2X3RhYmxlX2NsIC5kcm9wRG93bkFjdGlvbldyYXBwZXJEaXNhYmxlZCB7XFxuICAgIGN1cnNvcjogZGVmYXVsdDtcXG4gICAgb3BhY2l0eTogMC41OyB9XFxuICAuZHZfdGFibGVfY2wgLmljb25DYWxsQmFja0NlbGxXcmFwcGVyIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyOyB9XFxuICAuZHZfdGFibGVfY2wgLmh0bWxMaXN0Q2VsbFdyYXBwZXIge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXG5cXG4ubWRsLWNoZWNrYm94LmlzLWNoZWNrZWQgLm1kbC1jaGVja2JveF9fdGljay1vdXRsaW5lIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyMTk2ZjM7IH1cXG5cXG4ucHVibGljX2ZpeGVkRGF0YVRhYmxlQ2VsbF9jZWxsQ29udGVudCAuaHRtbENlbGwge1xcbiAgcGFkZGluZy1sZWZ0OiAzOHB4ICFpbXBvcnRhbnQ7IH1cXG4gIC5wdWJsaWNfZml4ZWREYXRhVGFibGVDZWxsX2NlbGxDb250ZW50IC5odG1sQ2VsbCAubGlzdF9jZWxsIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAwICFpbXBvcnRhbnQ7IH1cXG5cXG4ucHVibGljX2ZpeGVkRGF0YVRhYmxlQ2VsbF9jZWxsQ29udGVudCAudGV4dFRvb2x0aXBDZWxsIC50b29sdGlwV3JhcHBlcixcXG4ucHVibGljX2ZpeGVkRGF0YVRhYmxlQ2VsbF9jZWxsQ29udGVudCAuaHRtbFRvb2x0aXBDZWxsIC50b29sdGlwV3JhcHBlciB7XFxuICBwYWRkaW5nLWxlZnQ6IDI3cHggIWltcG9ydGFudDsgfVxcblxcbi5ub3JtYUZpbHRlcmxXcmFwcGVyIHtcXG4gIHdpZHRoOiAzMDBweDtcXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgcGFkZGluZzogMTBweCAxMHB4IDA7IH1cXG5cXG4uaGVhZGVyRmlsZXJOdW1iZXIgLmhlYWRlckZpbGVyTnVtYmVyRmlsdGVycyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgfVxcbiAgLmhlYWRlckZpbGVyTnVtYmVyIC5oZWFkZXJGaWxlck51bWJlckZpbHRlcnMgaW5wdXQge1xcbiAgICB3aWR0aDogMTEwcHg7IH1cXG5cXG4uZGF0ZVRpbWVQaWNrZXJXcmFwcGVyIHtcXG4gIHdpZHRoOiAzNTBweDtcXG4gIHBhZGRpbmc6IDIwcHg7IH1cXG4gIC5kYXRlVGltZVBpY2tlcldyYXBwZXIgLmhlYWRlckZpbGVyRGF0ZVRpbWUgLmhlYWRlckZpbHRlckJ1dHRvbnMge1xcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XFxuICAgIC5kYXRlVGltZVBpY2tlcldyYXBwZXIgLmhlYWRlckZpbGVyRGF0ZVRpbWUgLmhlYWRlckZpbHRlckJ1dHRvbnMgaSB7XFxuICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7XFxuICAgICAgY3Vyc29yOiBwb2ludGVyOyB9XFxuICAgIC5kYXRlVGltZVBpY2tlcldyYXBwZXIgLmhlYWRlckZpbGVyRGF0ZVRpbWUgLmhlYWRlckZpbHRlckJ1dHRvbnMgLmhpZGRlbiB7XFxuICAgICAgZGlzcGxheTogbm9uZTsgfVxcbiAgICAuZGF0ZVRpbWVQaWNrZXJXcmFwcGVyIC5oZWFkZXJGaWxlckRhdGVUaW1lIC5oZWFkZXJGaWx0ZXJCdXR0b25zIC5lcnJvciB7XFxuICAgICAgY29sb3I6IHJlZDtcXG4gICAgICBmb250LXNpemU6IDEycHg7XFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgIGxlZnQ6IDIwcHg7XFxuICAgICAgdG9wOiA1cHg7IH1cXG4gIC5kYXRlVGltZVBpY2tlcldyYXBwZXIgLmhlYWRlckZpbGVyRGF0ZVRpbWUgLmhlYWRlckRhdGVUaW1lRmlsdGVycyB7XFxuICAgIGRpc3BsYXk6IGZsZXg7IH1cXG4gICAgLmRhdGVUaW1lUGlja2VyV3JhcHBlciAuaGVhZGVyRmlsZXJEYXRlVGltZSAuaGVhZGVyRGF0ZVRpbWVGaWx0ZXJzIC5zdGFydERUV3JhcHBlciB7XFxuICAgICAgd2lkdGg6IDUwJTtcXG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXG4gICAgLmRhdGVUaW1lUGlja2VyV3JhcHBlciAuaGVhZGVyRmlsZXJEYXRlVGltZSAuaGVhZGVyRGF0ZVRpbWVGaWx0ZXJzIC5lbmREVFdyYXBlciB7XFxuICAgICAgd2lkdGg6IDUwJTtcXG4gICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXG5cXG4uaGVhZGVyRmlsdGVyV3JhcHBlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJveC1zaGFkb3c6IDAgMnB4IDRweCAtMXB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMCA0cHggNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjE0KSwgMCAxcHggMTBweCAwIHJnYmEoMCwgMCwgMCwgMC4xMikgIWltcG9ydGFudDsgfVxcbiAgLmhlYWRlckZpbHRlcldyYXBwZXIgLmZpbHRlclNlYXJjaFdyYXBwZXIge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIG1hcmdpbjogMnB4IDA7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZDtcXG4gICAgdHJhbnNpdGlvbjogYm9yZGVyLWJvdHRvbSBlYXNlLWluLW91dCAzMDBtczsgfVxcbiAgICAuaGVhZGVyRmlsdGVyV3JhcHBlciAuZmlsdGVyU2VhcmNoV3JhcHBlciBpbnB1dCB7XFxuICAgICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIwcHgpO1xcbiAgICAgIGJvcmRlcjogbm9uZTtcXG4gICAgICBvdXRsaW5lOiBub25lO1xcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcXG4gICAgICBwYWRkaW5nOiA0cHggMDtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0OyB9XFxuICAgICAgLmhlYWRlckZpbHRlcldyYXBwZXIgLmZpbHRlclNlYXJjaFdyYXBwZXIgaW5wdXQ6OnBsYWNlaG9sZGVyIHtcXG4gICAgICAgIGNvbG9yOiAjOWVhNWI1OyB9XFxuICAgIC5oZWFkZXJGaWx0ZXJXcmFwcGVyIC5maWx0ZXJTZWFyY2hXcmFwcGVyIGkge1xcbiAgICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gICAgICBoZWlnaHQ6IDIycHg7IH1cXG4gICAgLmhlYWRlckZpbHRlcldyYXBwZXIgLmZpbHRlclNlYXJjaFdyYXBwZXIuZm9jdXNlZCB7XFxuICAgICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICMwZDkxZTkgIWltcG9ydGFudDsgfVxcbiAgLmhlYWRlckZpbHRlcldyYXBwZXIgLmhlYWRlckxpc3RXcmFwcGVyIHtcXG4gICAgbWFyZ2luLXRvcDogLTEwcHg7IH1cXG4gICAgLmhlYWRlckZpbHRlcldyYXBwZXIgLmhlYWRlckxpc3RXcmFwcGVyIC5oZWFkZXJMaXN0VGl0bGUge1xcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XFxuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDsgfVxcbiAgLmhlYWRlckZpbHRlcldyYXBwZXIgLmhlYWRlckZpbHRlckJ1dHRvbnMge1xcbiAgICBtYXJnaW4tYm90dG9tOiAtMzBweDtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XFxuICAgIC5oZWFkZXJGaWx0ZXJXcmFwcGVyIC5oZWFkZXJGaWx0ZXJCdXR0b25zIGkge1xcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgICBmb250LXNpemU6IDIwcHg7XFxuICAgICAgcGFkZGluZy10b3A6IDVweDtcXG4gICAgICB6LWluZGV4OiAyOyB9XFxuICAuaGVhZGVyRmlsdGVyV3JhcHBlciAuaGVhZGVyRmlsdGVyT3B0aW9ucyB7XFxuICAgIG1hcmdpbjogMjBweCAwO1xcbiAgICBjb2xvcjogIzBkOTFlOTsgfVxcbiAgICAuaGVhZGVyRmlsdGVyV3JhcHBlciAuaGVhZGVyRmlsdGVyT3B0aW9ucyAudGV4dC1idXR0b24ge1xcbiAgICAgIGN1cnNvcjogcG9pbnRlcjsgfVxcbiAgLmhlYWRlckZpbHRlcldyYXBwZXIgLmNoZWNrQm94Um93V3JhcHBlciB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjsgfVxcbiAgICAuaGVhZGVyRmlsdGVyV3JhcHBlciAuY2hlY2tCb3hSb3dXcmFwcGVyIGxhYmVsIHtcXG4gICAgICB3aWR0aDogMzNweDtcXG4gICAgICBmbG9hdDogbGVmdDsgfVxcbiAgICAuaGVhZGVyRmlsdGVyV3JhcHBlciAuY2hlY2tCb3hSb3dXcmFwcGVyIC50aXRsZSB7XFxuICAgICAgZmxvYXQ6IGxlZnQ7IH1cXG5cXG4ucHVibGljX2ZpeGVkRGF0YVRhYmxlX21haW4ge1xcbiAgb3V0bGluZTogbm9uZTsgfVxcblxcbnNlbGVjdCB7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbiAgd2lkdGg6IDEwMHB4O1xcbiAgaGVpZ2h0OiAyMHB4OyB9XFxuXFxuLm1kbC1yYWRpb19fb3V0ZXItY2lyY2xlIHtcXG4gIGhlaWdodDogMjBweCAhaW1wb3J0YW50O1xcbiAgd2lkdGg6IDIwcHggIWltcG9ydGFudDsgfVxcblxcbi5tZGwtcmFkaW9fX2lubmVyLWNpcmNsZSB7XFxuICBoZWlnaHQ6IDEycHggIWltcG9ydGFudDtcXG4gIHdpZHRoOiAxMnB4ICFpbXBvcnRhbnQ7IH1cXG5cXG4ubmF2V3JhcHBlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAwO1xcbiAgdG9wOiAwO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgfVxcbiAgLm5hdldyYXBwZXI6aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkOyB9XFxuICAgIC5uYXZXcmFwcGVyOmhvdmVyIGkge1xcbiAgICAgIGNvbG9yOiAjZmZmOyB9XFxuXFxuLm5hdldyYXBwZXJTZWxlY3RlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjOyB9XFxuICAubmF2V3JhcHBlclNlbGVjdGVkIGkge1xcbiAgICBjb2xvcjogI2ZmZjsgfVxcblxcbi5hdXRvRWxsaXBzZSB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMTBweDtcXG4gIHJpZ2h0OiAwOyB9XFxuXFxuLmhlYWRlclRpdGxlIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICBwYWRkaW5nLWxlZnQ6IDIycHg7IH1cXG5cXG4uY2xpY2thYmxlQ2VsbCB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBjb2xvcjogIzREQTVGRTsgfVxcbiAgLmNsaWNrYWJsZUNlbGw6aG92ZXIge1xcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsgfVxcblxcbi50ZXh0Q2VsbCB7XFxuICAvKiBUaGVzZSBhcmUgdGVjaG5pY2FsbHkgdGhlIHNhbWUsIGJ1dCB1c2UgYm90aCAqL1xcbiAgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDtcXG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcXG4gIC1tcy13b3JkLWJyZWFrOiBicmVhay1hbGw7XFxuICAvKiBUaGlzIGlzIHRoZSBkYW5nZXJvdXMgb25lIGluIFdlYktpdCwgYXMgaXQgYnJlYWtzIHRoaW5ncyB3aGVyZXZlciAqL1xcbiAgd29yZC1icmVhazogYnJlYWstYWxsO1xcbiAgLyogSW5zdGVhZCB1c2UgdGhpcyBub24tc3RhbmRhcmQgb25lOiAqL1xcbiAgd29yZC1icmVhazogYnJlYWstd29yZDtcXG4gIC8qIEFkZHMgYSBoeXBoZW4gd2hlcmUgdGhlIHdvcmQgYnJlYWtzLCBpZiBzdXBwb3J0ZWQgKE5vIEJsaW5rKSAqL1xcbiAgLW1zLWh5cGhlbnM6IGF1dG87XFxuICAtbW96LWh5cGhlbnM6IGF1dG87XFxuICAtd2Via2l0LWh5cGhlbnM6IGF1dG87XFxuICBoeXBoZW5zOiBhdXRvOyB9XFxuXFxuLmh0bWxDZWxsIHtcXG4gIC8qIFRoZXNlIGFyZSB0ZWNobmljYWxseSB0aGUgc2FtZSwgYnV0IHVzZSBib3RoICovXFxuICBvdmVyZmxvdy13cmFwOiBicmVhay13b3JkO1xcbiAgd29yZC13cmFwOiBicmVhay13b3JkO1xcbiAgLW1zLXdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcXG4gIC8qIFRoaXMgaXMgdGhlIGRhbmdlcm91cyBvbmUgaW4gV2ViS2l0LCBhcyBpdCBicmVha3MgdGhpbmdzIHdoZXJldmVyICovXFxuICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XFxuICAvKiBJbnN0ZWFkIHVzZSB0aGlzIG5vbi1zdGFuZGFyZCBvbmU6ICovXFxuICB3b3JkLWJyZWFrOiBicmVhay13b3JkO1xcbiAgLyogQWRkcyBhIGh5cGhlbiB3aGVyZSB0aGUgd29yZCBicmVha3MsIGlmIHN1cHBvcnRlZCAoTm8gQmxpbmspICovXFxuICAtbXMtaHlwaGVuczogYXV0bztcXG4gIC1tb3otaHlwaGVuczogYXV0bztcXG4gIC13ZWJraXQtaHlwaGVuczogYXV0bztcXG4gIGh5cGhlbnM6IGF1dG87IH1cXG5cXG4udG9vbHRpcFdyYXBwZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XFxuXFxuLmh0bWxMaXN0VG9nZ2xlciB7XFxuICB0b3A6IDVweDtcXG4gIHJpZ2h0OiAtNjBweDsgfVxcblxcbi50b29sVGlwRG9jayB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiA1MCU7IH1cXG5cXG4udG9vbFRpcERvY2tIVE1MIHtcXG4gIGZsb2F0OiByaWdodDsgfVxcblxcbi5tb3JlT3B0aW9uRG9jayB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiA3cHg7IH1cXG5cXG4ubW9yZU9wdGlvbkF0dGFjaFBvaW50IHtcXG4gIHRvcDogLTZweDtcXG4gIGxlZnQ6IDMzcHg7IH1cXG5cXG4udG9vbHRpcEF0dGFjaFBvaW50IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIC8qIGJvdHRvbTogMHB4OyAqL1xcbiAgdG9wOiAyMHB4OyB9XFxuXFxuLmhlYWRlclRvb2x0aXBBdHRhY2hQb2ludCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiBjYWxjKDUwJSArIDIycHgpO1xcbiAgdG9wOiAyNXB4OyB9XFxuXFxuLmR2Q2xQb3BVcFdyYXBwZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XFxuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XFxuICBtaW4td2lkdGg6IDEyNXB4O1xcbiAgcGFkZGluZzogMTBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDJweDtcXG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGNvbG9yOiBibGFjazsgfVxcbiAgLmR2Q2xQb3BVcFdyYXBwZXIgLmNsb3NlSWNvbiB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgcmlnaHQ6IDM0cHg7XFxuICAgIHRvcDogMTBweDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBmb250LXNpemU6IDE0cHg7XFxuICAgIGNvbG9yOiBibGFjazsgfVxcbiAgLmR2Q2xQb3BVcFdyYXBwZXIgLm9wdGlvbkl0ZW0ge1xcbiAgICBwYWRkaW5nOiAwIDIwcHggMCA1cHg7IH1cXG4gIC5kdkNsUG9wVXBXcmFwcGVyIHVsIHtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBtYXgtaGVpZ2h0OiAyMDBweDtcXG4gICAgb3ZlcmZsb3c6IGF1dG87IH1cXG4gICAgLmR2Q2xQb3BVcFdyYXBwZXIgdWwgbGkge1xcbiAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICAgICAgY29sb3I6IGJsYWNrOyB9XFxuICAgICAgLmR2Q2xQb3BVcFdyYXBwZXIgdWwgbGkuc2VsZWN0YWJsZSB7XFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7IH1cXG4gICAgICAgIC5kdkNsUG9wVXBXcmFwcGVyIHVsIGxpLnNlbGVjdGFibGU6aG92ZXIge1xcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkOyB9XFxuICAgICAgICAuZHZDbFBvcFVwV3JhcHBlciB1bCBsaS5zZWxlY3RhYmxlLnNlbGVjdGVkIHtcXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2NjYzsgfVxcblxcbi5odG1sTGlzdCB1bCBsaSB7XFxuICBtYXJnaW4tYm90dG9tOiAxMHB4OyB9XFxuXFxuLmR2VGV0aGVyZWRUb29sVGlwIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgbWF4LXdpZHRoOiA1MCU7IH1cXG5cXG4uZHZUb29sdGlwVGV4dCB7XFxuICB3b3JkLWJyZWFrOiBicmVhay13b3JkOyB9XFxuXFxuLnRldGhlci1lbGVtZW50IHtcXG4gIHotaW5kZXg6IDEwMDAwOyB9XFxuXFxuLmNmeCB7XFxuICBjbGVhcjogYm90aDsgfVxcblxcbi5kdkNsUG9wVXBXcmFwcGVyLFxcbi5kdkNsUG9wVXBXcmFwcGVyLmh0bWxMaXN0IHtcXG4gIGJveC1zaGFkb3c6IDAgMnB4IDRweCAtMXB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMCA0cHggNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjE0KSwgMCAxcHggMTBweCAwIHJnYmEoMCwgMCwgMCwgMC4xMikgIWltcG9ydGFudDsgfVxcbiAgLmR2Q2xQb3BVcFdyYXBwZXIgdWwgbGksXFxuICAuZHZDbFBvcFVwV3JhcHBlci5odG1sTGlzdCB1bCBsaSB7XFxuICAgIHBhZGRpbmctbGVmdDogNXB4OyB9XFxuICAuZHZDbFBvcFVwV3JhcHBlci5ub2lyLFxcbiAgLmR2Q2xQb3BVcFdyYXBwZXIuaHRtbExpc3Qubm9pciB7XFxuICAgIGJhY2tncm91bmQ6ICMxNTFDMkI7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgY29sb3I6ICNGNEY2Rjk7IH1cXG4gICAgLmR2Q2xQb3BVcFdyYXBwZXIubm9pciAuY2xvc2VJY29uLFxcbiAgICAuZHZDbFBvcFVwV3JhcHBlci5ub2lyIHVsIGxpLFxcbiAgICAuZHZDbFBvcFVwV3JhcHBlci5odG1sTGlzdC5ub2lyIC5jbG9zZUljb24sXFxuICAgIC5kdkNsUG9wVXBXcmFwcGVyLmh0bWxMaXN0Lm5vaXIgdWwgbGkge1xcbiAgICAgIGNvbG9yOiAjRjRGNkY5OyB9XFxuICAgIC5kdkNsUG9wVXBXcmFwcGVyLm5vaXIgdWwgbGk6aG92ZXIsXFxuICAgIC5kdkNsUG9wVXBXcmFwcGVyLmh0bWxMaXN0Lm5vaXIgdWwgbGk6aG92ZXIge1xcbiAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4wNSk7IH1cXG4gICAgLmR2Q2xQb3BVcFdyYXBwZXIubm9pciB1bCBsaS5zZWxlY3RhYmxlLnNlbGVjdGVkLFxcbiAgICAuZHZDbFBvcFVwV3JhcHBlci5odG1sTGlzdC5ub2lyIHVsIGxpLnNlbGVjdGFibGUuc2VsZWN0ZWQge1xcbiAgICAgIGJhY2tncm91bmQ6ICMzOTQ5NkQ7IH1cXG4gICAgLmR2Q2xQb3BVcFdyYXBwZXIubm9pciAudXNlclN1bW1hcnlSZXZpZXdzUG9wdXAgdGFibGUgdHI6bnRoLWNoaWxkKGV2ZW4pLFxcbiAgICAuZHZDbFBvcFVwV3JhcHBlci5odG1sTGlzdC5ub2lyIC51c2VyU3VtbWFyeVJldmlld3NQb3B1cCB0YWJsZSB0cjpudGgtY2hpbGQoZXZlbikge1xcbiAgICAgIGJhY2tncm91bmQ6ICMyNDMwNDI7IH1cXG4gIC5kdkNsUG9wVXBXcmFwcGVyLmxpZ2h0LFxcbiAgLmR2Q2xQb3BVcFdyYXBwZXIuaHRtbExpc3QubGlnaHQge1xcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBjb2xvcjogIzI4MzU0ODsgfVxcbiAgICAuZHZDbFBvcFVwV3JhcHBlci5saWdodCAuY2xvc2VJY29uLFxcbiAgICAuZHZDbFBvcFVwV3JhcHBlci5saWdodCB1bCBsaSxcXG4gICAgLmR2Q2xQb3BVcFdyYXBwZXIuaHRtbExpc3QubGlnaHQgLmNsb3NlSWNvbixcXG4gICAgLmR2Q2xQb3BVcFdyYXBwZXIuaHRtbExpc3QubGlnaHQgdWwgbGkge1xcbiAgICAgIGNvbG9yOiAjMjgzNTQ4OyB9XFxuICAgIC5kdkNsUG9wVXBXcmFwcGVyLmxpZ2h0IHVsIGxpOmhvdmVyLFxcbiAgICAuZHZDbFBvcFVwV3JhcHBlci5odG1sTGlzdC5saWdodCB1bCBsaTpob3ZlciB7XFxuICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjA1KTsgfVxcbiAgICAuZHZDbFBvcFVwV3JhcHBlci5saWdodCB1bCBsaS5zZWxlY3RhYmxlLnNlbGVjdGVkLFxcbiAgICAuZHZDbFBvcFVwV3JhcHBlci5odG1sTGlzdC5saWdodCB1bCBsaS5zZWxlY3RhYmxlLnNlbGVjdGVkIHtcXG4gICAgICBiYWNrZ3JvdW5kOiAjZDJkOGU3OyB9XFxuICAgIC5kdkNsUG9wVXBXcmFwcGVyLmxpZ2h0IC51c2VyU3VtbWFyeVJldmlld3NQb3B1cCB0YWJsZSB0cjpudGgtY2hpbGQoZXZlbiksXFxuICAgIC5kdkNsUG9wVXBXcmFwcGVyLmh0bWxMaXN0LmxpZ2h0IC51c2VyU3VtbWFyeVJldmlld3NQb3B1cCB0YWJsZSB0cjpudGgtY2hpbGQoZXZlbikge1xcbiAgICAgIGJhY2tncm91bmQ6ICNmNGY0ZjQ7IH1cXG5cXG4uY2xpY2thYmxlIHtcXG4gIGN1cnNvcjogcG9pbnRlcjsgfVxcblxcbi5tb3JlT3B0aW9uc1dyYXBwZXIgaSB7XFxuICBjdXJzb3I6IHBvaW50ZXI7IH1cXG5cXG4ubW9yZU9wdGlvbkF0dGFjaFBvaW50IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxcblxcbi5tb3JlT3B0aW9uc1dyYXBwZXJJbm5lciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXG4gIC5tb3JlT3B0aW9uc1dyYXBwZXJJbm5lciB1bCBsaSB7XFxuICAgIGNvbG9yOiAjRjRGNkY5OyB9XFxuICAubW9yZU9wdGlvbnNXcmFwcGVySW5uZXIgdWwgbGk6aG92ZXIge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7IH1cXG4gIC5tb3JlT3B0aW9uc1dyYXBwZXJJbm5lciAuY2xvc2VJY29uIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBjb2xvcjogI2QyZDhlNztcXG4gICAgdG9wOiA3cHg7XFxuICAgIGZvbnQtc2l6ZTogMTVweDtcXG4gICAgcmlnaHQ6IDI2cHg7XFxuICAgIGN1cnNvcjogcG9pbnRlcjsgfVxcbiAgLm1vcmVPcHRpb25zV3JhcHBlcklubmVyIC5ub2lyIHtcXG4gICAgYmFja2dyb3VuZDogIzE1MUMyQjtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBjb2xvcjogI0Y0RjZGOTtcXG4gICAgYm94LXNoYWRvdzogNXB4IDVweCA1cHggIzAwMDAwMDsgfVxcbiAgICAubW9yZU9wdGlvbnNXcmFwcGVySW5uZXIgLm5vaXIgLmNsb3NlSWNvbixcXG4gICAgLm1vcmVPcHRpb25zV3JhcHBlcklubmVyIC5ub2lyIHVsIGxpIHtcXG4gICAgICBjb2xvcjogI0Y0RjZGOTsgfVxcbiAgICAubW9yZU9wdGlvbnNXcmFwcGVySW5uZXIgLm5vaXIgLnVzZXJTdW1tYXJ5UmV2aWV3c1BvcHVwIHRhYmxlIHRyOm50aC1jaGlsZChldmVuKSB7XFxuICAgICAgYmFja2dyb3VuZDogIzI0MzA0MjsgfVxcbiAgLm1vcmVPcHRpb25zV3JhcHBlcklubmVyIC5saWdodCB7XFxuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGNvbG9yOiAjMjgzNTQ4O1xcbiAgICBib3gtc2hhZG93OiAycHggMnB4IDhweCA0cHggIzkxOGI4YjsgfVxcbiAgICAubW9yZU9wdGlvbnNXcmFwcGVySW5uZXIgLmxpZ2h0IC5jbG9zZUljb24sXFxuICAgIC5tb3JlT3B0aW9uc1dyYXBwZXJJbm5lciAubGlnaHQgdWwgbGkge1xcbiAgICAgIGNvbG9yOiAjMjgzNTQ4OyB9XFxuICAgIC5tb3JlT3B0aW9uc1dyYXBwZXJJbm5lciAubGlnaHQgLnVzZXJTdW1tYXJ5UmV2aWV3c1BvcHVwIHRhYmxlIHRyOm50aC1jaGlsZChldmVuKSB7XFxuICAgICAgYmFja2dyb3VuZDogI2Y0ZjRmNDsgfVxcblxcbi8qIVxcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Zb3VDYW5Cb29rTWUvcmVhY3QtZGF0ZXRpbWVcXG4gKi9cXG4ucmR0IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxcblxcbi5yZHRQaWNrZXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAyNTBweDtcXG4gIHBhZGRpbmc6IDRweDtcXG4gIG1hcmdpbi10b3A6IDFweDtcXG4gIHotaW5kZXg6IDk5OTk5ICFpbXBvcnRhbnQ7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgYm94LXNoYWRvdzogMCAxcHggM3B4IHJnYmEoMCwgMCwgMCwgMC4xKTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNmOWY5Zjk7IH1cXG5cXG4ucmR0T3BlbiAucmR0UGlja2VyIHtcXG4gIGRpc3BsYXk6IGJsb2NrOyB9XFxuXFxuLnJkdFN0YXRpYyAucmR0UGlja2VyIHtcXG4gIGJveC1zaGFkb3c6IG5vbmU7XFxuICBwb3NpdGlvbjogc3RhdGljOyB9XFxuXFxuLnJkdFBpY2tlciAucmR0VGltZVRvZ2dsZSB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7IH1cXG5cXG4ucmR0UGlja2VyIHRhYmxlIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWFyZ2luOiAwOyB9XFxuXFxuLnJkdFBpY2tlciB0ZCxcXG4ucmR0UGlja2VyIHRoIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGhlaWdodDogMjhweDsgfVxcblxcbi5yZHRQaWNrZXIgdGQge1xcbiAgY3Vyc29yOiBwb2ludGVyOyB9XFxuXFxuLnJkdFBpY2tlciAucmR0VGltZVRvZ2dsZTpob3ZlcixcXG4ucmR0UGlja2VyIHRkLnJkdERheTpob3ZlcixcXG4ucmR0UGlja2VyIHRkLnJkdEhvdXI6aG92ZXIsXFxuLnJkdFBpY2tlciB0ZC5yZHRNaW51dGU6aG92ZXIsXFxuLnJkdFBpY2tlciB0ZC5yZHRTZWNvbmQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZDogI2VlZWVlZTtcXG4gIGN1cnNvcjogcG9pbnRlcjsgfVxcblxcbi5yZHRQaWNrZXIgdGQucmR0TmV3LFxcbi5yZHRQaWNrZXIgdGQucmR0T2xkIHtcXG4gIGNvbG9yOiAjOTk5OTk5OyB9XFxuXFxuLnJkdFBpY2tlciB0ZC5yZHRUb2RheSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXG5cXG4ucmR0UGlja2VyIHRkLnJkdFRvZGF5OmJlZm9yZSB7XFxuICBjb250ZW50OiAnJztcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJvcmRlci1sZWZ0OiA3cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItYm90dG9tOiA3cHggc29saWQgIzQyOGJjYTtcXG4gIGJvcmRlci10b3AtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yKTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogNHB4O1xcbiAgcmlnaHQ6IDRweDsgfVxcblxcbi5yZHRQaWNrZXIgdGQucmR0QWN0aXZlLFxcbi5yZHRQaWNrZXIgdGQucmR0QWN0aXZlOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM0MjhiY2E7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHRleHQtc2hhZG93OiAwIC0xcHggMCByZ2JhKDAsIDAsIDAsIDAuMjUpOyB9XFxuXFxuLnJkdFBpY2tlciB0ZC5yZHRBY3RpdmUucmR0VG9kYXk6YmVmb3JlIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICNmZmY7IH1cXG5cXG4ucmR0UGlja2VyIHRkLnJkdERpc2FibGVkLFxcbi5yZHRQaWNrZXIgdGQucmR0RGlzYWJsZWQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGNvbG9yOiAjOTk5OTk5O1xcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDsgfVxcblxcbi5yZHRQaWNrZXIgdGQgc3Bhbi5yZHRPbGQge1xcbiAgY29sb3I6ICM5OTk5OTk7IH1cXG5cXG4ucmR0UGlja2VyIHRkIHNwYW4ucmR0RGlzYWJsZWQsXFxuLnJkdFBpY2tlciB0ZCBzcGFuLnJkdERpc2FibGVkOmhvdmVyIHtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxuICBjb2xvcjogIzk5OTk5OTtcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7IH1cXG5cXG4ucmR0UGlja2VyIHRoIHtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZjlmOWY5OyB9XFxuXFxuLnJkdFBpY2tlciAuZG93IHtcXG4gIHdpZHRoOiAxNC4yODU3JTtcXG4gIGJvcmRlci1ib3R0b206IG5vbmU7XFxuICBjdXJzb3I6IGRlZmF1bHQ7IH1cXG5cXG4ucmR0UGlja2VyIHRoLnJkdFN3aXRjaCB7XFxuICB3aWR0aDogMTAwcHg7IH1cXG5cXG4ucmR0UGlja2VyIHRoLnJkdE5leHQsXFxuLnJkdFBpY2tlciB0aC5yZHRQcmV2IHtcXG4gIGZvbnQtc2l6ZTogMjFweDtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7IH1cXG5cXG4ucmR0TmV4dCBzcGFuLFxcbi5yZHRQcmV2IHNwYW4ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7XFxuICAvKiBpT1MgU2FmYXJpICovXFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLyogQ2hyb21lL1NhZmFyaS9PcGVyYSAqL1xcbiAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lO1xcbiAgLyogS29ucXVlcm9yICovXFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLyogRmlyZWZveCAqL1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgLyogSW50ZXJuZXQgRXhwbG9yZXIvRWRnZSAqL1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7IH1cXG5cXG4ucmR0UGlja2VyIHRoLnJkdERpc2FibGVkLFxcbi5yZHRQaWNrZXIgdGgucmR0RGlzYWJsZWQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGNvbG9yOiAjOTk5OTk5O1xcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDsgfVxcblxcbi5yZHRQaWNrZXIgdGhlYWQgdHI6Zmlyc3QtY2hpbGQgdGgge1xcbiAgY3Vyc29yOiBwb2ludGVyOyB9XFxuXFxuLnJkdFBpY2tlciB0aGVhZCB0cjpmaXJzdC1jaGlsZCB0aDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiAjZWVlZWVlOyB9XFxuXFxuLnJkdFBpY2tlciB0Zm9vdCB7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2Y5ZjlmOTsgfVxcblxcbi5yZHRQaWNrZXIgYnV0dG9uIHtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7IH1cXG5cXG4ucmR0UGlja2VyIGJ1dHRvbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlOyB9XFxuXFxuLnJkdFBpY2tlciB0aGVhZCBidXR0b24ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7IH1cXG5cXG50ZC5yZHRNb250aCxcXG50ZC5yZHRZZWFyIHtcXG4gIGhlaWdodDogNTBweDtcXG4gIHdpZHRoOiAyNSU7XFxuICBjdXJzb3I6IHBvaW50ZXI7IH1cXG5cXG50ZC5yZHRNb250aDpob3ZlcixcXG50ZC5yZHRZZWFyOmhvdmVyIHtcXG4gIGJhY2tncm91bmQ6ICNlZWU7IH1cXG5cXG4ucmR0Q291bnRlcnMge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XFxuXFxuLnJkdENvdW50ZXJzID4gZGl2IHtcXG4gIGZsb2F0OiBsZWZ0OyB9XFxuXFxuLnJkdENvdW50ZXIge1xcbiAgaGVpZ2h0OiAxMDBweDsgfVxcblxcbi5yZHRDb3VudGVyIHtcXG4gIHdpZHRoOiA0MHB4OyB9XFxuXFxuLnJkdENvdW50ZXJTZXBhcmF0b3Ige1xcbiAgbGluZS1oZWlnaHQ6IDEwMHB4OyB9XFxuXFxuLnJkdENvdW50ZXIgLnJkdEJ0biB7XFxuICBoZWlnaHQ6IDQwJTtcXG4gIGxpbmUtaGVpZ2h0OiA0MHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7XFxuICAvKiBpT1MgU2FmYXJpICovXFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLyogQ2hyb21lL1NhZmFyaS9PcGVyYSAqL1xcbiAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lO1xcbiAgLyogS29ucXVlcm9yICovXFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLyogRmlyZWZveCAqL1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgLyogSW50ZXJuZXQgRXhwbG9yZXIvRWRnZSAqL1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7IH1cXG5cXG4ucmR0Q291bnRlciAucmR0QnRuOmhvdmVyIHtcXG4gIGJhY2tncm91bmQ6ICNlZWU7IH1cXG5cXG4ucmR0Q291bnRlciAucmR0Q291bnQge1xcbiAgaGVpZ2h0OiAyMCU7XFxuICBmb250LXNpemU6IDEuMmVtOyB9XFxuXFxuLnJkdE1pbGxpIHtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBwYWRkaW5nLWxlZnQ6IDhweDtcXG4gIHdpZHRoOiA0OHB4OyB9XFxuXFxuLnJkdE1pbGxpIGlucHV0IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZm9udC1zaXplOiAxLjJlbTtcXG4gIG1hcmdpbi10b3A6IDM3cHg7IH1cXG5cXG4ucmR0VGltZSB0ZCB7XFxuICBjdXJzb3I6IGRlZmF1bHQ7IH1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwidmFyIG1hcCA9IHtcblx0XCIuL2FmXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hZi5qc1wiLFxuXHRcIi4vYWYuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FmLmpzXCIsXG5cdFwiLi9hclwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXIuanNcIixcblx0XCIuL2FyLWR6XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1kei5qc1wiLFxuXHRcIi4vYXItZHouanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLWR6LmpzXCIsXG5cdFwiLi9hci1rd1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXIta3cuanNcIixcblx0XCIuL2FyLWt3LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1rdy5qc1wiLFxuXHRcIi4vYXItbHlcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLWx5LmpzXCIsXG5cdFwiLi9hci1seS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItbHkuanNcIixcblx0XCIuL2FyLW1hXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1tYS5qc1wiLFxuXHRcIi4vYXItbWEuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLW1hLmpzXCIsXG5cdFwiLi9hci1zYVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItc2EuanNcIixcblx0XCIuL2FyLXNhLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1zYS5qc1wiLFxuXHRcIi4vYXItdG5cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLXRuLmpzXCIsXG5cdFwiLi9hci10bi5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXItdG4uanNcIixcblx0XCIuL2FyLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci5qc1wiLFxuXHRcIi4vYXpcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2F6LmpzXCIsXG5cdFwiLi9hei5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYXouanNcIixcblx0XCIuL2JlXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iZS5qc1wiLFxuXHRcIi4vYmUuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JlLmpzXCIsXG5cdFwiLi9iZ1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYmcuanNcIixcblx0XCIuL2JnLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iZy5qc1wiLFxuXHRcIi4vYm1cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JtLmpzXCIsXG5cdFwiLi9ibS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm0uanNcIixcblx0XCIuL2JuXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ibi5qc1wiLFxuXHRcIi4vYm4uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JuLmpzXCIsXG5cdFwiLi9ib1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYm8uanNcIixcblx0XCIuL2JvLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iby5qc1wiLFxuXHRcIi4vYnJcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JyLmpzXCIsXG5cdFwiLi9ici5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvYnIuanNcIixcblx0XCIuL2JzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9icy5qc1wiLFxuXHRcIi4vYnMuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JzLmpzXCIsXG5cdFwiLi9jYVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY2EuanNcIixcblx0XCIuL2NhLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jYS5qc1wiLFxuXHRcIi4vY3NcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2NzLmpzXCIsXG5cdFwiLi9jcy5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3MuanNcIixcblx0XCIuL2N2XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jdi5qc1wiLFxuXHRcIi4vY3YuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2N2LmpzXCIsXG5cdFwiLi9jeVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvY3kuanNcIixcblx0XCIuL2N5LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jeS5qc1wiLFxuXHRcIi4vZGFcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RhLmpzXCIsXG5cdFwiLi9kYS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGEuanNcIixcblx0XCIuL2RlXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS5qc1wiLFxuXHRcIi4vZGUtYXRcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RlLWF0LmpzXCIsXG5cdFwiLi9kZS1hdC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUtYXQuanNcIixcblx0XCIuL2RlLWNoXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS1jaC5qc1wiLFxuXHRcIi4vZGUtY2guanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RlLWNoLmpzXCIsXG5cdFwiLi9kZS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZGUuanNcIixcblx0XCIuL2R2XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kdi5qc1wiLFxuXHRcIi4vZHYuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2R2LmpzXCIsXG5cdFwiLi9lbFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZWwuanNcIixcblx0XCIuL2VsLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbC5qc1wiLFxuXHRcIi4vZW4tYXVcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWF1LmpzXCIsXG5cdFwiLi9lbi1hdS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tYXUuanNcIixcblx0XCIuL2VuLWNhXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1jYS5qc1wiLFxuXHRcIi4vZW4tY2EuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWNhLmpzXCIsXG5cdFwiLi9lbi1nYlwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tZ2IuanNcIixcblx0XCIuL2VuLWdiLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1nYi5qc1wiLFxuXHRcIi4vZW4taWVcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWllLmpzXCIsXG5cdFwiLi9lbi1pZS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4taWUuanNcIixcblx0XCIuL2VuLWlsXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1pbC5qc1wiLFxuXHRcIi4vZW4taWwuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWlsLmpzXCIsXG5cdFwiLi9lbi1pblwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4taW4uanNcIixcblx0XCIuL2VuLWluLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1pbi5qc1wiLFxuXHRcIi4vZW4tbnpcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLW56LmpzXCIsXG5cdFwiLi9lbi1uei5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW4tbnouanNcIixcblx0XCIuL2VuLXNnXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1zZy5qc1wiLFxuXHRcIi4vZW4tc2cuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLXNnLmpzXCIsXG5cdFwiLi9lb1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZW8uanNcIixcblx0XCIuL2VvLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lby5qc1wiLFxuXHRcIi4vZXNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VzLmpzXCIsXG5cdFwiLi9lcy1kb1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtZG8uanNcIixcblx0XCIuL2VzLWRvLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy1kby5qc1wiLFxuXHRcIi4vZXMtdXNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VzLXVzLmpzXCIsXG5cdFwiLi9lcy11cy5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXMtdXMuanNcIixcblx0XCIuL2VzLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy5qc1wiLFxuXHRcIi4vZXRcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2V0LmpzXCIsXG5cdFwiLi9ldC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZXQuanNcIixcblx0XCIuL2V1XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ldS5qc1wiLFxuXHRcIi4vZXUuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2V1LmpzXCIsXG5cdFwiLi9mYVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmEuanNcIixcblx0XCIuL2ZhLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mYS5qc1wiLFxuXHRcIi4vZmlcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZpLmpzXCIsXG5cdFwiLi9maS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmkuanNcIixcblx0XCIuL2ZpbFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZmlsLmpzXCIsXG5cdFwiLi9maWwuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZpbC5qc1wiLFxuXHRcIi4vZm9cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZvLmpzXCIsXG5cdFwiLi9mby5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZm8uanNcIixcblx0XCIuL2ZyXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mci5qc1wiLFxuXHRcIi4vZnItY2FcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLWNhLmpzXCIsXG5cdFwiLi9mci1jYS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnItY2EuanNcIixcblx0XCIuL2ZyLWNoXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mci1jaC5qc1wiLFxuXHRcIi4vZnItY2guanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLWNoLmpzXCIsXG5cdFwiLi9mci5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZnIuanNcIixcblx0XCIuL2Z5XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9meS5qc1wiLFxuXHRcIi4vZnkuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2Z5LmpzXCIsXG5cdFwiLi9nYVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2EuanNcIixcblx0XCIuL2dhLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nYS5qc1wiLFxuXHRcIi4vZ2RcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dkLmpzXCIsXG5cdFwiLi9nZC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ2QuanNcIixcblx0XCIuL2dsXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nbC5qc1wiLFxuXHRcIi4vZ2wuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dsLmpzXCIsXG5cdFwiLi9nb20tZGV2YVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ29tLWRldmEuanNcIixcblx0XCIuL2dvbS1kZXZhLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nb20tZGV2YS5qc1wiLFxuXHRcIi4vZ29tLWxhdG5cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dvbS1sYXRuLmpzXCIsXG5cdFwiLi9nb20tbGF0bi5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvZ29tLWxhdG4uanNcIixcblx0XCIuL2d1XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ndS5qc1wiLFxuXHRcIi4vZ3UuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2d1LmpzXCIsXG5cdFwiLi9oZVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaGUuanNcIixcblx0XCIuL2hlLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oZS5qc1wiLFxuXHRcIi4vaGlcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hpLmpzXCIsXG5cdFwiLi9oaS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaGkuanNcIixcblx0XCIuL2hyXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oci5qc1wiLFxuXHRcIi4vaHIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hyLmpzXCIsXG5cdFwiLi9odVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHUuanNcIixcblx0XCIuL2h1LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9odS5qc1wiLFxuXHRcIi4vaHktYW1cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2h5LWFtLmpzXCIsXG5cdFwiLi9oeS1hbS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaHktYW0uanNcIixcblx0XCIuL2lkXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pZC5qc1wiLFxuXHRcIi4vaWQuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2lkLmpzXCIsXG5cdFwiLi9pc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXMuanNcIixcblx0XCIuL2lzLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pcy5qc1wiLFxuXHRcIi4vaXRcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2l0LmpzXCIsXG5cdFwiLi9pdC1jaFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvaXQtY2guanNcIixcblx0XCIuL2l0LWNoLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pdC1jaC5qc1wiLFxuXHRcIi4vaXQuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2l0LmpzXCIsXG5cdFwiLi9qYVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvamEuanNcIixcblx0XCIuL2phLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9qYS5qc1wiLFxuXHRcIi4vanZcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2p2LmpzXCIsXG5cdFwiLi9qdi5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvanYuanNcIixcblx0XCIuL2thXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rYS5qc1wiLFxuXHRcIi4va2EuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2thLmpzXCIsXG5cdFwiLi9ra1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva2suanNcIixcblx0XCIuL2trLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ray5qc1wiLFxuXHRcIi4va21cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ttLmpzXCIsXG5cdFwiLi9rbS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva20uanNcIixcblx0XCIuL2tuXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rbi5qc1wiLFxuXHRcIi4va24uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2tuLmpzXCIsXG5cdFwiLi9rb1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva28uanNcIixcblx0XCIuL2tvLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rby5qc1wiLFxuXHRcIi4va3VcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2t1LmpzXCIsXG5cdFwiLi9rdS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUva3UuanNcIixcblx0XCIuL2t5XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9reS5qc1wiLFxuXHRcIi4va3kuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2t5LmpzXCIsXG5cdFwiLi9sYlwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbGIuanNcIixcblx0XCIuL2xiLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sYi5qc1wiLFxuXHRcIi4vbG9cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2xvLmpzXCIsXG5cdFwiLi9sby5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbG8uanNcIixcblx0XCIuL2x0XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sdC5qc1wiLFxuXHRcIi4vbHQuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2x0LmpzXCIsXG5cdFwiLi9sdlwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbHYuanNcIixcblx0XCIuL2x2LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sdi5qc1wiLFxuXHRcIi4vbWVcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21lLmpzXCIsXG5cdFwiLi9tZS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWUuanNcIixcblx0XCIuL21pXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9taS5qc1wiLFxuXHRcIi4vbWkuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21pLmpzXCIsXG5cdFwiLi9ta1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWsuanNcIixcblx0XCIuL21rLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tay5qc1wiLFxuXHRcIi4vbWxcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21sLmpzXCIsXG5cdFwiLi9tbC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbWwuanNcIixcblx0XCIuL21uXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tbi5qc1wiLFxuXHRcIi4vbW4uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21uLmpzXCIsXG5cdFwiLi9tclwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXIuanNcIixcblx0XCIuL21yLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tci5qc1wiLFxuXHRcIi4vbXNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21zLmpzXCIsXG5cdFwiLi9tcy1teVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXMtbXkuanNcIixcblx0XCIuL21zLW15LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tcy1teS5qc1wiLFxuXHRcIi4vbXMuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21zLmpzXCIsXG5cdFwiLi9tdFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXQuanNcIixcblx0XCIuL210LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tdC5qc1wiLFxuXHRcIi4vbXlcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL215LmpzXCIsXG5cdFwiLi9teS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbXkuanNcIixcblx0XCIuL25iXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9uYi5qc1wiLFxuXHRcIi4vbmIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25iLmpzXCIsXG5cdFwiLi9uZVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmUuanNcIixcblx0XCIuL25lLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9uZS5qc1wiLFxuXHRcIi4vbmxcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25sLmpzXCIsXG5cdFwiLi9ubC1iZVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbmwtYmUuanNcIixcblx0XCIuL25sLWJlLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubC1iZS5qc1wiLFxuXHRcIi4vbmwuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25sLmpzXCIsXG5cdFwiLi9ublwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvbm4uanNcIixcblx0XCIuL25uLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubi5qc1wiLFxuXHRcIi4vb2MtbG5jXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9vYy1sbmMuanNcIixcblx0XCIuL29jLWxuYy5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvb2MtbG5jLmpzXCIsXG5cdFwiLi9wYS1pblwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcGEtaW4uanNcIixcblx0XCIuL3BhLWluLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wYS1pbi5qc1wiLFxuXHRcIi4vcGxcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3BsLmpzXCIsXG5cdFwiLi9wbC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcGwuanNcIixcblx0XCIuL3B0XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wdC5qc1wiLFxuXHRcIi4vcHQtYnJcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3B0LWJyLmpzXCIsXG5cdFwiLi9wdC1ici5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcHQtYnIuanNcIixcblx0XCIuL3B0LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wdC5qc1wiLFxuXHRcIi4vcm9cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3JvLmpzXCIsXG5cdFwiLi9yby5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvcm8uanNcIixcblx0XCIuL3J1XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ydS5qc1wiLFxuXHRcIi4vcnUuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3J1LmpzXCIsXG5cdFwiLi9zZFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2QuanNcIixcblx0XCIuL3NkLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zZC5qc1wiLFxuXHRcIi4vc2VcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NlLmpzXCIsXG5cdFwiLi9zZS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2UuanNcIixcblx0XCIuL3NpXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zaS5qc1wiLFxuXHRcIi4vc2kuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NpLmpzXCIsXG5cdFwiLi9za1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2suanNcIixcblx0XCIuL3NrLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zay5qc1wiLFxuXHRcIi4vc2xcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NsLmpzXCIsXG5cdFwiLi9zbC5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc2wuanNcIixcblx0XCIuL3NxXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zcS5qc1wiLFxuXHRcIi4vc3EuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NxLmpzXCIsXG5cdFwiLi9zclwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3IuanNcIixcblx0XCIuL3NyLWN5cmxcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NyLWN5cmwuanNcIixcblx0XCIuL3NyLWN5cmwuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NyLWN5cmwuanNcIixcblx0XCIuL3NyLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zci5qc1wiLFxuXHRcIi4vc3NcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NzLmpzXCIsXG5cdFwiLi9zcy5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3MuanNcIixcblx0XCIuL3N2XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zdi5qc1wiLFxuXHRcIi4vc3YuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3N2LmpzXCIsXG5cdFwiLi9zd1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3cuanNcIixcblx0XCIuL3N3LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zdy5qc1wiLFxuXHRcIi4vdGFcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RhLmpzXCIsXG5cdFwiLi90YS5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGEuanNcIixcblx0XCIuL3RlXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ZS5qc1wiLFxuXHRcIi4vdGUuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RlLmpzXCIsXG5cdFwiLi90ZXRcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RldC5qc1wiLFxuXHRcIi4vdGV0LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ZXQuanNcIixcblx0XCIuL3RnXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90Zy5qc1wiLFxuXHRcIi4vdGcuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RnLmpzXCIsXG5cdFwiLi90aFwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGguanNcIixcblx0XCIuL3RoLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90aC5qc1wiLFxuXHRcIi4vdGtcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RrLmpzXCIsXG5cdFwiLi90ay5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGsuanNcIixcblx0XCIuL3RsLXBoXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bC1waC5qc1wiLFxuXHRcIi4vdGwtcGguanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RsLXBoLmpzXCIsXG5cdFwiLi90bGhcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RsaC5qc1wiLFxuXHRcIi4vdGxoLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bGguanNcIixcblx0XCIuL3RyXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ci5qc1wiLFxuXHRcIi4vdHIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RyLmpzXCIsXG5cdFwiLi90emxcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bC5qc1wiLFxuXHRcIi4vdHpsLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90emwuanNcIixcblx0XCIuL3R6bVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHptLmpzXCIsXG5cdFwiLi90em0tbGF0blwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHptLWxhdG4uanNcIixcblx0XCIuL3R6bS1sYXRuLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90em0tbGF0bi5qc1wiLFxuXHRcIi4vdHptLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90em0uanNcIixcblx0XCIuL3VnLWNuXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91Zy1jbi5qc1wiLFxuXHRcIi4vdWctY24uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3VnLWNuLmpzXCIsXG5cdFwiLi91a1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdWsuanNcIixcblx0XCIuL3VrLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ay5qc1wiLFxuXHRcIi4vdXJcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3VyLmpzXCIsXG5cdFwiLi91ci5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXIuanNcIixcblx0XCIuL3V6XCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ei5qc1wiLFxuXHRcIi4vdXotbGF0blwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXotbGF0bi5qc1wiLFxuXHRcIi4vdXotbGF0bi5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdXotbGF0bi5qc1wiLFxuXHRcIi4vdXouanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3V6LmpzXCIsXG5cdFwiLi92aVwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdmkuanNcIixcblx0XCIuL3ZpLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS92aS5qc1wiLFxuXHRcIi4veC1wc2V1ZG9cIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3gtcHNldWRvLmpzXCIsXG5cdFwiLi94LXBzZXVkby5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUveC1wc2V1ZG8uanNcIixcblx0XCIuL3lvXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS95by5qc1wiLFxuXHRcIi4veW8uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3lvLmpzXCIsXG5cdFwiLi96aC1jblwiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvemgtY24uanNcIixcblx0XCIuL3poLWNuLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC1jbi5qc1wiLFxuXHRcIi4vemgtaGtcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLWhrLmpzXCIsXG5cdFwiLi96aC1oay5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvemgtaGsuanNcIixcblx0XCIuL3poLW1vXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC1tby5qc1wiLFxuXHRcIi4vemgtbW8uanNcIjogXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLW1vLmpzXCIsXG5cdFwiLi96aC10d1wiOiBcIi4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvemgtdHcuanNcIixcblx0XCIuL3poLXR3LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS96aC10dy5qc1wiXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gXCIuL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlIHN5bmMgcmVjdXJzaXZlIF5cXFxcLlxcXFwvLiokXCI7IiwiaW1wb3J0IEFudERlbW9Db21wb25lbnQgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvYW50X2RlbW8vYW50RGVtb0NvbXAnO1xuaW1wb3J0IERhdGFUYWJsZUNvbXAgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvZGF0YV90YWJsZS9EYXRhVGFibGVDb21wJztcblxudmFyIGNvbXBzID0ge1xuICAgIEFudERlbW9Db21wb25lbnQ6IEFudERlbW9Db21wb25lbnQsXG4gICAgRGF0YVRhYmxlQ29tcDogRGF0YVRhYmxlQ29tcFxufVxuXG5leHBvcnQgZGVmYXVsdCBjb21wcztcbiIsImltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuLy8gQWNjZXNzIGFsbCBjb21wb25lbnRzIGZyb20gYG11aWNzcy9yZWFjdGAgbW9kdWxlXG5pbXBvcnQge1xuICAgIEFwcGJhcixcbiAgICBCdXR0b24sXG4gICAgQ29udGFpbmVyLFxuICAgIENoZWNrYm94LFxuICAgIFNlbGVjdCxcbiAgICBPcHRpb24sXG4gICAgRHJvcGRvd24sXG4gICAgRHJvcGRvd25JdGVtXG59IGZyb20gJ211aWNzcy9yZWFjdCc7XG5cbmNvbnN0IEFudERlbW9Db21wb25lbnQgPSAoKSA9PiB7XG4gICAgcmV0dXJuICg8ZGl2PlxuICAgICAgICA8QXBwYmFyPjwvQXBwYmFyPlxuICAgICAgICA8Q29udGFpbmVyPlxuICAgICAgICAgICAgPEJ1dHRvbiBjb2xvcj1cInByaW1hcnlcIj5idXR0b248L0J1dHRvbj5cbiAgICAgICAgICAgIDxmb3JtPlxuICAgICAgICAgICAgICAgIDxDaGVja2JveCBuYW1lPVwiaW5wdXRBMVwiIGxhYmVsPVwiT3B0aW9uIG9uZVwiIGRlZmF1bHRDaGVja2VkPXt0cnVlfS8+XG4gICAgICAgICAgICAgICAgPENoZWNrYm94IG5hbWU9XCJpbnB1dEEyXCIgbGFiZWw9XCJPcHRpb24gdHdvXCIvPlxuICAgICAgICAgICAgICAgIDxDaGVja2JveCBuYW1lPVwiaW5wdXRBM1wiIGxhYmVsPVwiT3B0aW9uIHRocmVlIGlzIGRpc2FibGVkXCIgZGlzYWJsZWQ9e3RydWV9Lz5cblxuICAgICAgICAgICAgICAgIDxTZWxlY3QgbmFtZT1cImlucHV0XCIgbGFiZWw9XCJTZWxlY3QgRXhhbXBsZVwiIGRlZmF1bHRWYWx1ZT1cIm9wdGlvbjJcIj5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cIm9wdGlvbjFcIiBsYWJlbD1cIk9wdGlvbiAxXCIvPlxuICAgICAgICAgICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwib3B0aW9uMlwiIGxhYmVsPVwiT3B0aW9uIDJcIi8+XG4gICAgICAgICAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJvcHRpb24zXCIgbGFiZWw9XCJPcHRpb24gM1wiLz5cbiAgICAgICAgICAgICAgICAgICAgPE9wdGlvbiB2YWx1ZT1cIm9wdGlvbjRcIiBsYWJlbD1cIk9wdGlvbiA0XCIvPlxuICAgICAgICAgICAgICAgIDwvU2VsZWN0PlxuICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgPERyb3Bkb3duIGNvbG9yPVwicHJpbWFyeVwiIGxhYmVsPVwiRHJvcGRvd25cIj5cbiAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtIGxpbms9XCIjL2xpbmsxXCI+T3B0aW9uIDE8L0Ryb3Bkb3duSXRlbT5cbiAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtPk9wdGlvbiAyPC9Ecm9wZG93bkl0ZW0+XG4gICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbT5PcHRpb24gMzwvRHJvcGRvd25JdGVtPlxuICAgICAgICAgICAgICAgIDxEcm9wZG93bkl0ZW0+T3B0aW9uIDQ8L0Ryb3Bkb3duSXRlbT5cbiAgICAgICAgICAgIDwvRHJvcGRvd24+XG4gICAgICAgIDwvQ29udGFpbmVyPlxuICAgIDwvZGl2Pik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFudERlbW9Db21wb25lbnQ7XG4iLCJjb25zdCBzdHJpcEh0bWwgPSBmdW5jdGlvbiAoaHRtbCkge1xuICAgIHZhciB0ZW1wb3JhbERpdkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRlbXBvcmFsRGl2RWxlbWVudC5pbm5lckhUTUwgPSBodG1sO1xuICAgIHZhciBwdXJlVGV4dD0gdGVtcG9yYWxEaXZFbGVtZW50LnRleHRDb250ZW50IHx8IHRlbXBvcmFsRGl2RWxlbWVudC5pbm5lclRleHQgfHwgXCJcIjtcbiAgICB2YXIgcHVyZVRleHQgPSBwdXJlVGV4dC5yZXBsYWNlKC9cXFwiL2csIFwiJ1wiKTtcbiAgICByZXR1cm4gcHVyZVRleHQ7XG59XG5cbmNvbnN0IENzdkdlbmVyYXRvciA9IGZ1bmN0aW9uIChkYXRhQXJyYXlPYmosIGZpbGVOYW1lLCBzZXBhcmF0b3IsIGFkZFF1b3RlcywgZG93bmxvYWRDb2x1bW5zKSB7XG4gICAgaWYgKGRvd25sb2FkQ29sdW1ucykge1xuICAgICAgICB0aGlzLnRpdGxlcyA9IGRvd25sb2FkQ29sdW1ucztcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRpdGxlcyA9IE9iamVjdC5rZXlzKGRhdGFBcnJheU9ialswXSk7XG4gICAgfVxuXG4gICAgdGhpcy5kYXRhQXJyYXkgPSBbXTtcbiAgICB0aGlzLmZpbGVOYW1lID0gZmlsZU5hbWU7XG4gICAgdGhpcy5zZXBhcmF0b3IgPSBzZXBhcmF0b3IgfHwgJywnO1xuICAgIHRoaXMuYWRkUXVvdGVzID0gISFhZGRRdW90ZXM7XG4gICAgaWYgKHRoaXMuYWRkUXVvdGVzKSB7XG4gICAgICAgIHRoaXMuc2VwYXJhdG9yID0gJ1wiJyArIHRoaXMuc2VwYXJhdG9yICsgJ1wiJztcbiAgICB9XG4gICAgdGhpcy5nZXREb3dubG9hZExpbmsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZXBhcmF0b3IgPSB0aGlzLnNlcGFyYXRvcjtcbiAgICAgICAgdmFyIGFkZFF1b3RlcyA9IHRoaXMuYWRkUXVvdGVzO1xuICAgICAgICB2YXIgcm93cyA9IFtdO1xuICAgICAgICB2YXIgcm93RGF0YTtcblxuICAgICAgICAvL2FkZGluZyB0aXRsZSBmaXJzdFxuICAgICAgICBsZXQgcm93ID0gW107XG4gICAgICAgIHRoaXMudGl0bGVzLmZvckVhY2godGl0bGUgPT4ge1xuICAgICAgICAgICAgcm93LnB1c2godGl0bGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcm93RGF0YSA9IHJvdy5qb2luKHNlcGFyYXRvcik7XG4gICAgICAgIHJvd3MucHVzaCgnXCInICsgcm93RGF0YSArICdcIicpO1xuXG4gICAgICAgIGRhdGFBcnJheU9iai5mb3JFYWNoKGRhdGFJdGVtID0+IHtcbiAgICAgICAgICAgIHJvdyA9IFtdO1xuICAgICAgICAgICAgLy9pZiBwYXNzZWQgaXMgbGlzdCBvZiBhcnJheSwgdGhlbiBubyBrZXkgZXhpc3RzXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhSXRlbSkpIHtcbiAgICAgICAgICAgICAgICBkYXRhSXRlbS5mb3JFYWNoKHZhbCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJvdy5wdXNoKHZhbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudGl0bGVzLmZvckVhY2godGl0bGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICByb3cucHVzaChzdHJpcEh0bWwoZGF0YUl0ZW1bdGl0bGVdKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3dEYXRhID0gcm93LmpvaW4oc2VwYXJhdG9yKTtcbiAgICAgICAgICAgIGlmIChyb3dEYXRhLmxlbmd0aCAmJiBhZGRRdW90ZXMpIHtcbiAgICAgICAgICAgICAgICByb3dzLnB1c2goJ1wiJyArIHJvd0RhdGEgKyAnXCInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHR5cGUgPSAnZGF0YTp0ZXh0L2NzdjtjaGFyc2V0PXV0Zi04JztcbiAgICAgICAgdmFyIGRhdGEgPSByb3dzLmpvaW4oJ1xcbicpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdHlwZSArPSAnO2Jhc2U2NCc7XG4gICAgICAgICAgICBkYXRhID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoZGF0YSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEgPSBlbmNvZGVVUklDb21wb25lbnQoZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5kb3dubG9hZExpbmsgPSB0aGlzLmRvd25sb2FkTGluayB8fCB0eXBlICsgJywnICsgZGF0YTtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXRMaW5rRWxlbWVudCA9IGZ1bmN0aW9uIChsaW5rVGV4dCkge1xuICAgICAgICB2YXIgZG93bmxvYWRMaW5rID0gdGhpcy5nZXREb3dubG9hZExpbmsoKTtcbiAgICAgICAgdmFyIGZpbGVOYW1lID0gdGhpcy5maWxlTmFtZTtcbiAgICAgICAgdGhpcy5saW5rRWxlbWVudCA9IHRoaXMubGlua0VsZW1lbnQgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgYS5pbm5lckhUTUwgPSBsaW5rVGV4dCB8fCAnJztcbiAgICAgICAgICAgIGEuaHJlZiA9IGRvd25sb2FkTGluaztcbiAgICAgICAgICAgIGEuZG93bmxvYWQgPSBmaWxlTmFtZTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9KCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5saW5rRWxlbWVudDtcbiAgICB9O1xuICAgIC8vIGNhbGwgd2l0aCByZW1vdmVBZnRlckRvd25sb2FkID0gdHJ1ZSBpZiB5b3Ugd2FudCB0aGUgbGluayB0byBiZSByZW1vdmVkIGFmdGVyIGRvd25sb2FkaW5nXG4gICAgdGhpcy5kb3dubG9hZCA9IGZ1bmN0aW9uIChyZW1vdmVBZnRlckRvd25sb2FkKSB7XG4gICAgICAgIHZhciBsaW5rRWxlbWVudCA9IHRoaXMuZ2V0TGlua0VsZW1lbnQoKTtcbiAgICAgICAgbGlua0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rRWxlbWVudCk7XG4gICAgICAgIGxpbmtFbGVtZW50LmNsaWNrKCk7XG4gICAgICAgIGlmIChyZW1vdmVBZnRlckRvd25sb2FkKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGxpbmtFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuZXhwb3J0IGRlZmF1bHQgQ3N2R2VuZXJhdG9yO1xuIiwiY2xhc3MgVXRpbHMge1xuICAgIGNvbnN0cnVjdG9yKCkge31cblxuICAgIF9kZWJvdW5jZShjYiwgdGltZW91dCkge1xuICAgICAgICBpZiAodGhpcy50aW1lSWQpIHtcbiAgICAgICAgICAgIC8vc29tZSBldmVudCBoYXBwZW5lZCB3aXRoaW4gdGltZW91dFxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZUlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRpbWVJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgfVxufVxuXG5sZXQgdXRpbCA9IG51bGw7XG5cbmZ1bmN0aW9uIGdldFV0aWwoKSB7XG4gICAgaWYgKHV0aWwgPT0gbnVsbCkge1xuICAgICAgICB1dGlsID0gbmV3IFV0aWxzKCk7XG4gICAgfVxuICAgIHJldHVybiB1dGlsO1xufVxuZXhwb3J0IGRlZmF1bHQgZ2V0VXRpbCgpO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFRhYmxlQ29tcCBmcm9tIFwiLi9jb21wcy9UYWJsZUNvbXBcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBTIGZyb20gXCIuL3JlZHV4L3N0b3JlXCI7XG5pbXBvcnQgVGFibGVTZXJ2aWNlIGZyb20gXCIuL3NlcnZpY2VzL3RhYmxlX3NlcnZpY2VcIjtcbmltcG9ydCBQYWdlIGZyb20gXCIuL2VudGl0aWVzL3BhZ2VcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vY29tbW9uL3V0aWxzXCI7XG5cbmltcG9ydCBDbGFzc05hbWVzIGZyb20gXCJjbGFzc25hbWVzXCI7XG5yZXF1aXJlKFwiLi9kYXRhdGFibGUuc2Nzc1wiKTtcblxuY2xhc3MgRGF0YVRhYmxlQ29tcCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLmJpbmRpbmdGdW5jdGlvbnMoKTtcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gbmV3IFRhYmxlU2VydmljZSgpO1xuICAgICAgICB0aGlzLnN0b3JlID0gUyh0aGlzLnByb3BzLmFwcElkKTtcbiAgICAgICAgdGhpcy5qdW1wVG9Sb3dJbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuY29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3JlLnNldE9yaWdpbmFsVGFibGVDb25maWcodGhpcy5zZXJ2aWNlLmdlbmVuZXJhdGVUYWJsZUNvbmZpZyh0aGlzLnByb3BzLmNvbmZpZykpO1xuICAgICAgICAgICAgdGhpcy5zdG9yZS5zZXRVcGRhdGVkVGFibGVDb25maWcodGhpcy5zZXJ2aWNlLmdlbmVuZXJhdGVUYWJsZUNvbmZpZyh0aGlzLnByb3BzLmNvbmZpZykpO1xuICAgICAgICAgICAgLy9jcmVhdGUgcGFnZSBvYmogaW4gc3RvcmVcbiAgICAgICAgICAgIHRoaXMuc3RvcmUudXBkYXRlUGFnZShuZXcgUGFnZSh0aGlzLnByb3BzLmNvbmZpZykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0ZWRSb3dLZXlzKXtcbiAgICAgICAgICAgIHRoaXMuc3RvcmUuc2V0Um93QWxsU2VsZWN0ZWQoZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5zZWxlY3RlZFJvd0tleXMuZm9yRWFjaChyb3dLZXk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JlLnRvZ2dsZVJvd1NlbGVjdGVkV2l0aEtleShyb3dLZXkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZih0aGlzLnByb3BzLnVuQ2xpY2thYmxlQ2VsbHMpe1xuICAgICAgICAgICAgdGhpcy5zdG9yZS5zZXRVbkNsaWNrYWJsZUNlbGxzKHRoaXMucHJvcHMudW5DbGlja2FibGVDZWxscyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5kYXRhKSB7XG4gICAgICAgICAgICAvL3NldCBhcyBvcmlnaW5hbCBkYXRhTGlzdFxuICAgICAgICAgICAgdGhpcy5zdG9yZS5zZXRVcGRhdGVkRGF0YSh0aGlzLnByb3BzLmRhdGEsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vbmV4dCwgd2UgbmVlZCB0byB1cGdyYWRlIHRoZSBjb2x1bW5UeXBlIGZyb20gdGV4dCB0byBsaXN0IC0gdGhpcyBzdGVwIGlzIGF1dG9tYXRpY2FsbHkgZG9uZSwgYW5kIG9uIGNvbHVtbiBsZXZlbFxuICAgICAgICAvL3RvIGdhaW4gcGVyZm9ybWFuY2VcbiAgICAgICAgdGhpcy5zZXJ2aWNlLnVwZ3JhZGVDb25maWcodGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZywgdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRhdGFMaXN0KTtcblxuICAgICAgICBsZXQgY2ZnID0gdGhpcy5wcm9wcy5jdXN0b21Db25maWcgfHwgbnVsbDtcbiAgICAgICAgLy91c2UgcHJldmlvdXMgc2F2ZWQgdG90YWxEYXRhRmllbGRzIHRvIGNoZWNrIGlmIHdlIG5lZWQgdG8gcmVzZXQgY3VzdG9tZXJDb25maWcsIGlmIGZpZWxkcyBhcmUgbm90IHNhbWUsIHRoZW4gaWdub3JlIGN1c3RvbWVyIGNvbmZpZyBoZXJlXG4gICAgICAgIGlmKCBjZmcgJiYgJ3RvdGFsRGF0YUZpZWxkcycgaW4gY2ZnXG4gICAgICAgICAgICAmJiAgY2ZnWyd0b3RhbERhdGFGaWVsZHMnXSE9PXRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWcuY29sdW1ucy5sZW5ndGggKXtcbiAgICAgICAgICAgICAgICBjZmdbJ2NvbHVtbnNPcmRlciddPVtdO1xuICAgICAgICAgICAgICAgIGxldCBjdXN0b21lckNvbmZpZyA9IHRoaXMuc2VydmljZS5nZW5lbmVyYXRlQ3VzdG9tQ29uZmlnKGNmZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9yZS5zZXRDdXN0b21Db25maWcoY3VzdG9tZXJDb25maWcpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGxldCBjdXN0b21lckNvbmZpZyA9IHRoaXMuc2VydmljZS5nZW5lbmVyYXRlQ3VzdG9tQ29uZmlnKGNmZyk7XG4gICAgICAgICAgICB0aGlzLnN0b3JlLnNldEN1c3RvbUNvbmZpZyhjdXN0b21lckNvbmZpZyk7XG4gICAgICAgICAgICAvL25leHQgd2UgbmVlZCB0byB1cGRhdGUgdGFibGUgY29uZmlnIGJhc2VkIG9uIGN1c3RvbWVyQ29uZmlnXG4gICAgICAgICAgICB0aGlzLnN0b3JlLnNldFVwZGF0ZWRUYWJsZUNvbmZpZyhcbiAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2UubWVyZ2VDdXN0b21lckNvbmZpZyh0aGlzLnN0b3JlLmdldFN0YXRlKCkuY29uZmlnLCBjdXN0b21lckNvbmZpZylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vaWYgdGhlcmUgYXJlIHNvcnRlci9maWx0ZXIsIHdlIG5lZWQgdG8gZG8gaGVyZVxuICAgICAgICB0aGlzLl9zb3J0RmlsdGVyRGF0YXROb0Rpc3BhdGNoKGZhbHNlKTtcblxuICAgICAgICAvL3dlIG5vdyBuZWVkIHRvIGdldCByb3dJbmRleCBiYXNlZCBvbiBzZWxlY3RlZFJvd1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3RlZFJvd0tleXMpe1xuICAgICAgICAgICAgdGhpcy5qdW1wVG9Sb3dJbmRleCA9IHRoaXMuc2VydmljZS5maW5kUm93SW5kZXhGcm9tUm93S2V5VmFsdWUoXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zZWxlY3RlZFJvd0tleXNbMF0sXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9yZS5nZXRTdGF0ZSgpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VsZWN0ZWRSb3dLZXlzVXBkYXRlZChzZWxlY3RlZFJvd0tleXMpe1xuICAgICAgICB0aGlzLnN0b3JlLnNldFJvd0FsbFNlbGVjdGVkKGZhbHNlKTtcbiAgICAgICAgc2VsZWN0ZWRSb3dLZXlzLmZvckVhY2gocm93S2V5PT57XG4gICAgICAgICAgICB0aGlzLnN0b3JlLnRvZ2dsZVJvd1NlbGVjdGVkV2l0aEtleShyb3dLZXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy9lbmZvcmNlIHdpbmRvdyByZXNpemUgZXZlbnQgdG8gbWFrZSBVSSB1cGRhdGVzXG4gICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgncmVzaXplJykpO1xuICAgIH1cblxuICAgIHNldFVuQ2xpY2thYmxlQ2VsbHModW5DbGlja2FibGVDZWxscyl7XG4gICAgICAgIHRoaXMuc3RvcmUuc2V0VW5DbGlja2FibGVDZWxscyh1bkNsaWNrYWJsZUNlbGxzKTtcbiAgICB9XG5cbiAgICBzZXREb3dubG9hZERhdGEoZGF0YUxpc3Qpe1xuICAgICAgICB0aGlzLnN0b3JlLnNldERvd25sb2FkRGF0YShkYXRhTGlzdCk7XG4gICAgfVxuXG4gICAgdG90YWxUaXRsZVVwZGF0ZWQodG90YWxUaXRsZSl7XG4gICAgICAgIGNvbnN0IGNmZyA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWc7XG4gICAgICAgIGNmZ1sndG90YWxUaXRsZSddID0gdG90YWxUaXRsZTtcbiAgICAgICAgdGhpcy5zdG9yZS5zZXRVcGRhdGVkVGFibGVDb25maWcoY2ZnKTtcbiAgICB9XG5cbiAgICAvL2JlbG93IG1ldGhvZHMgYXJlIGV4dGVybmFsbHkgY2FsbGFibGUsIHVzZWQgdG8gdWRwYXRlIGRhdGEgZGlyZWN0bHlcbiAgICBkYXRhVXBkYXRlZCh1cGRhdGVkRGF0YU9iaikge1xuICAgICAgICAvL3dlIG5lZWQgdG8gdXBkYXRlIHdpdGggZW1wdHkgZGF0YSBmaXJzdCwgc28gdGhhdCBhbGwgdGhlIGRyb3Bkb3duL2NoZWNrYm94IHdpbGwgYmUgcmVzZXR0ZWRcbiAgICAgICAgUyh0aGlzLnByb3BzLmFwcElkKS5zZXRVcGRhdGVkRGF0YSh7IGRhdGFMaXN0OiBbXSB9LCB0cnVlKTtcbiAgICAgICAgUyh0aGlzLnByb3BzLmFwcElkKS5zZXRVcGRhdGVkRGF0YSh1cGRhdGVkRGF0YU9iaiwgdHJ1ZSk7XG4gICAgICAgIC8vaWYgdGhlcmUgYXJlIHNvcnRlci9maWx0ZXIsIHdlIG5lZWQgdG8gZG8gaGVyZVxuICAgICAgICB0aGlzLl9zb3J0RmlsdGVyRGF0YXROb0Rpc3BhdGNoKHRydWUpO1xuICAgICAgICB0aGlzLl9zY3JvbGxUbygpO1xuICAgIH1cblxuICAgIGRhdGFVcGRhdGVkU2VsZWN0Tm9DaGFuZ2UodXBkYXRlZERhdGFPYmopIHtcbiAgICAgICAgLy93ZSBkbyBub3Qgd2FudCB0byBvdmVyd3JpdGUgcHJlaXZvdXNseSBzZWxlY3RlZCByb3cga2V5cywganVzdCBhcHBlbmQgZGF0YSBoZXJlXG4gICAgICAgIFModGhpcy5wcm9wcy5hcHBJZCkuc2V0VXBkYXRlZERhdGEoeyBkYXRhTGlzdDogW10gfSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICBTKHRoaXMucHJvcHMuYXBwSWQpLnNldFVwZGF0ZWREYXRhKHVwZGF0ZWREYXRhT2JqLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIC8vaWYgdGhlcmUgYXJlIHNvcnRlci9maWx0ZXIsIHdlIG5lZWQgdG8gZG8gaGVyZVxuICAgICAgICB0aGlzLl9zb3J0RmlsdGVyRGF0YXROb0Rpc3BhdGNoKGZhbHNlKTtcbiAgICAgICAgdGhpcy5fc2Nyb2xsVG8oKTtcbiAgICB9XG5cbiAgICBfc2Nyb2xsVG8oKXtcbiAgICAgICAgdGhpcy5zdG9yZS5nb3RvU2Nyb2xsUG9zaXRpb24odGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnNjcm9sbFBvc2l0aW9uWzBdLCB0aGlzLnN0b3JlLmdldFN0YXRlKCkuc2Nyb2xsUG9zaXRpb25bMV0pO1xuICAgIH1cblxuICAgIHNldFRvdGFsUmVjb3Jkcyh0b3RhbCl7XG4gICAgICAgIFModGhpcy5wcm9wcy5hcHBJZCkuc2V0VG90YWxSZWNvcmRzKHRvdGFsKTtcbiAgICB9XG5cbiAgICBfc29ydEZpbHRlckRhdGF0Tm9EaXNwYXRjaChvdmVyV3JpdGVTZWxlY3RlZEtleXM9dHJ1ZSl7XG4gICAgICAgIGlmKCAhdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZy5nbG9iYWwgJiYgKHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jdXN0b21Db25maWcuc29ydGVyIHx8IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jdXN0b21Db25maWcuZmlsdGVycykpe1xuICAgICAgICAgICAgbGV0IGRhdGFMaXN0ID0gdGhpcy5zZXJ2aWNlLnNvcnRGaWx0ZXJEYXRhKHRoaXMuc3RvcmUuZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgICBTKHRoaXMucHJvcHMuYXBwSWQpLnNldFVwZGF0ZWREYXRhKHsgZGF0YUxpc3Q6IGRhdGFMaXN0IH0sIGZhbHNlLCBvdmVyV3JpdGVTZWxlY3RlZEtleXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2VsbERhdGFVcGRhdGUocm93S2V5VmFsLCBjb2x1bW5LZXksIHZhbHVlKSB7XG4gICAgICAgIFModGhpcy5wcm9wcy5hcHBJZCkuc2V0VXBkYXRlZENlbGxWYWx1ZShyb3dLZXlWYWwsIGNvbHVtbktleSwgdmFsdWUpO1xuICAgIH1cbiAgICBkYXRhQXBwZW5kZWQodXBkYXRlZERhdGFPYmopIHtcbiAgICAgICAgUyh0aGlzLnByb3BzLmFwcElkKS5zZXRBcHBlbmRlZERhdGEodXBkYXRlZERhdGFPYmopO1xuICAgIH1cbiAgICB1cGRhdGVJY29uRHJvcERvd24oaHRtbENvbnRlbnQpIHtcbiAgICAgICAgUyh0aGlzLnByb3BzLmFwcElkKS51cGRhdGVJY29uRHJvcERvd25Db250ZW50KGh0bWxDb250ZW50KTtcbiAgICB9XG4gICAgdGhlbWVVcGRhdGUodGhlbWUpIHtcbiAgICAgICAgUyh0aGlzLnByb3BzLmFwcElkKS5zZXRUaGVtZSh0aGVtZSk7XG4gICAgfVxuICAgIHRvZ2dsZUFsbFJvd3MoKSB7XG4gICAgICAgIFModGhpcy5wcm9wcy5hcHBJZCkudG9nZ2xlQWxsUm93cygpO1xuICAgIH1cbiAgICByZXNldFBhZ2UoKSB7XG4gICAgICAgIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5wYWdlLnJlc2V0KCk7XG4gICAgICAgIGxldCBwYWdlID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnBhZ2U7XG4gICAgICAgIHBhZ2UucmVzZXQoKTtcbiAgICAgICAgUyh0aGlzLnByb3BzLmFwcElkKS51cGRhdGVQYWdlKHBhZ2UpO1xuICAgIH1cbiAgICBiaW5kaW5nRnVuY3Rpb25zKCkge1xuICAgICAgICB0aGlzLl91cGRhdGVXaWR0aCA9IHRoaXMuX3VwZGF0ZVdpZHRoLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX29uQ3VzdG9tQ29uZmlnVXBkYXRlID0gdGhpcy5fb25DdXN0b21Db25maWdVcGRhdGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fb25TZWxlY3RlZFJvd0NoYW5nZWQgPSB0aGlzLl9vblNlbGVjdGVkUm93Q2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9vblJvd0FjdGlvblNlbGVjdGVkID0gdGhpcy5fb25Sb3dBY3Rpb25TZWxlY3RlZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9vblNvcnRGaWx0ZXJEYXRhID0gdGhpcy5fb25Tb3J0RmlsdGVyRGF0YS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9vblNpbmdsZUFjdGlvblVwZGF0ZWQgPSB0aGlzLl9vblNpbmdsZUFjdGlvblVwZGF0ZWQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5jb21wb25lbnRXaWxsVW5tb3VudCA9IHRoaXMuY29tcG9uZW50V2lsbFVubW91bnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fb25TZWxlY3RBbGxMZXZlbCA9IHRoaXMuX29uU2VsZWN0QWxsTGV2ZWwuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fb25UYWJsZVNlYXJjaCA9IHRoaXMuX29uVGFibGVTZWFyY2guYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fb25DaGVja0JveENoYW5nZWQ9dGhpcy5fb25DaGVja0JveENoYW5nZWQuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdmFyIHdpbiA9IHdpbmRvdztcbiAgICAgICAgaWYgKHdpbi5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICB3aW4uYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLl91cGRhdGVXaWR0aCwgZmFsc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHdpbi5hdHRhY2hFdmVudCkge1xuICAgICAgICAgICAgd2luLmF0dGFjaEV2ZW50KFwib25yZXNpemVcIiwgdGhpcy5fdXBkYXRlV2lkdGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2luLm9ucmVzaXplID0gdGhpcy5fdXBkYXRlV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fdG9nZ2xlQ2xpY2tPdXRzaWRlLmJpbmQodGhpcyksIGZhbHNlKTtcblxuICAgICAgICAvL2VtdWxhdGUgdG8gaGF2ZSBmdWxsIHdpZHRoXG4gICAgICAgIHdpbi5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInJlc2l6ZVwiKSk7XG5cbiAgICAgICAgLy9ub3csIGxldCdzIHNldCB1cCBsaXN0ZW5lciB0byBjdXN0b21Db25maWdVcGRhdGVcbiAgICAgICAgdGhpcy5zdG9yZS5zdWJzY3JpYmVUbyh0aGlzLnN0b3JlLkNVU1RPTV9DT05GSUdfVVBEQVRFLCBzdGF0ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vbkN1c3RvbUNvbmZpZ1VwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdG9yZS5zdWJzY3JpYmVUbyh0aGlzLnN0b3JlLlJPV19BTExfU0VMRUNURUQsIHN0YXRlID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uU2VsZWN0ZWRSb3dDaGFuZ2VkKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuUk9XX1NFTEVDVEVELCBzdGF0ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vblNlbGVjdGVkUm93Q2hhbmdlZCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdG9yZS5zdWJzY3JpYmVUbyh0aGlzLnN0b3JlLlNJTkdMRV9ST1dfU0VMRUNURUQsIHN0YXRlID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uU2VsZWN0ZWRSb3dDaGFuZ2VkKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuQ0hFQ0tCT1hfQ0hFQ0tFRCwgc3RhdGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25DaGVja0JveENoYW5nZWQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5SQVdfQUNUSU9OX1NFTEVDVEVELCBzdGF0ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vblJvd0FjdGlvblNlbGVjdGVkKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuU09SVF9DT0xVTU4sIHN0YXRlID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uU29ydEZpbHRlckRhdGEoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5GSUxURVJfVVBEQVRFLCBzdGF0ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vblNvcnRGaWx0ZXJEYXRhKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuVVBEQVRFX1RIRU1FLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjb25maWc6IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdG9yZS5zdWJzY3JpYmVUbyh0aGlzLnN0b3JlLlVQREFURV9TSU5HTEVfU0VMRUNURURfQUNUSU9OLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vblNpbmdsZUFjdGlvblVwZGF0ZWQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5TRUxFQ1RfQUxMX0xFVkVMLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vblNlbGVjdEFsbExldmVsKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuVEFCTEVfU0VBUkNILCBzdGF0ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vblRhYmxlU2VhcmNoKHN0YXRlLnRhYmxlU2VhcmNoZWRUZXJtKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB2YXIgd2luID0gd2luZG93O1xuICAgICAgICBpZiAod2luLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHdpbi5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMuX3VwZGF0ZVdpZHRoLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAod2luLmRldGFjaEV2ZW50KSB7XG4gICAgICAgICAgICB3aW4uZGV0YWNoRXZlbnQoXCJvbnJlc2l6ZVwiLCB0aGlzLl91cGRhdGVXaWR0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdG9yZS5yZXNldEFsbCgpO1xuICAgIH1cblxuXG4gICAgLy90aGlzIGlzIHRvIGNsb3NlIGFsbCB0aGUgdGV0aGVyIGNvbXBvbmVudCBhdXRvbWF0aWNhbGx5XG4gICAgX3RvZ2dsZUNsaWNrT3V0c2lkZShldmVudCkge1xuICAgICAgICB2YXIgZXhjbHVkZWRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kdkNsUG9wVXBXcmFwcGVyXCIpO1xuICAgICAgICB2YXIgc2VsZWN0ZWRFbGVtZW50ID0gZXhjbHVkZWRFbGVtZW50ID8gZXhjbHVkZWRFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgOiBmYWxzZTtcbiAgICAgICAgaWYgKCFzZWxlY3RlZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VBbGxQb3BVcCgpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZUFsbEZpbHRlclBvcFVwKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9zZUFsbFBvcFVwKCl7XG4gICAgICAgIHRoaXMuc3RvcmUuY2xvc2VBbGxQb3BVcCgpO1xuICAgIH1cblxuICAgIGNsb3NlQWxsRmlsdGVyUG9wVXAoKXtcbiAgICAgICAgdGhpcy5zdG9yZS5jbG9zZUFsbEZpbHRlclBvcFVwKCk7XG4gICAgfVxuXG4gICAgLy9iZWxvd3MgYXJlIGNhbGxiYWNrIG1ldGhvZHNcbiAgICBfb25DaGVja0JveENoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2hlY2tCb3hDaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2hlY2tCb3hDaGFuZ2VkKHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jaGVja2VkUm93S2V5cyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX29uU2VsZWN0QWxsTGV2ZWwoKSB7XG4gICAgICAgIC8vbmVlZHMgZGVib3VuY2UgaGVyZSBhcyBtdWx0aXBsZSBldmVudHMgYXJlIHRyaWdnZXJlZCB0b2dldGhlci5cbiAgICAgICAgdXRpbHMuX2RlYm91bmNlKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uU2VsZWN0QWxsTGV2ZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uU2VsZWN0QWxsTGV2ZWwodGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnNlbGVjdEFsbExldmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMTAwKTtcbiAgICB9XG5cbiAgICBfb25TaW5nbGVBY3Rpb25VcGRhdGVkKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vblNpbmdsZUFjdGlvblVwZGF0ZWQpIHtcbiAgICAgICAgICAgIGxldCBwYXJhbXMgPSB0aGlzLnN0b3JlLnBhc3NlZEJhY2tQYXJhbXM7XG4gICAgICAgICAgICBwYXJhbXNbXCJyb3dLZXlWYWxcIl0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkucm93a2V5VmFsO1xuICAgICAgICAgICAgcGFyYW1zW1wib2xkVmFsdWVcIl0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkub2xkVmFsdWU7XG4gICAgICAgICAgICBwYXJhbXNbXCJvbGRDb2x1bW5LZXlcIl0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkub2xkQ29sdW1uS2V5O1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vblNpbmdsZUFjdGlvblVwZGF0ZWQocGFyYW1zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vbkN1c3RvbUNvbmZpZ1VwZGF0ZSgpIHtcbiAgICAgICAgdXRpbHMuX2RlYm91bmNlKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ3VzdG9tQ29uZmlnVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2ZnID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmN1c3RvbUNvbmZpZztcbiAgICAgICAgICAgICAgICBjZmdbJ3RvdGFsRGF0YUZpZWxkcyddID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZy5jb2x1bW5zLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ3VzdG9tQ29uZmlnVXBkYXRlKHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jdXN0b21Db25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAyMDApO1xuICAgIH1cbiAgICBfb25TZWxlY3RlZFJvd0NoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uU2VsZWN0ZWRSb3dDaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uU2VsZWN0ZWRSb3dDaGFuZ2VkKHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5zZWxlY3RlZFJvd0tleXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9vblJvd0FjdGlvblNlbGVjdGVkKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vblJvd0FjdGlvblNlbGVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uUm93QWN0aW9uU2VsZWN0ZWQodGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnJvd0FjdGlvblNlbGVjdGVkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfb25Tb3J0RmlsdGVyRGF0YSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWcuZ2xvYmFsKSB7XG4gICAgICAgICAgICAvL2ZpcnN0IHdlIG5lZWQgdG8gcmVzZXQgcGFnZVxuICAgICAgICAgICAgdGhpcy5yZXNldFBhZ2UoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uU29ydGluZ0ZpbHRlcmluZykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMub25Tb3J0aW5nRmlsdGVyaW5nKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JlLmdldFN0YXRlKCkuY3VzdG9tQ29uZmlnLnNvcnRlcixcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmN1c3RvbUNvbmZpZy5maWx0ZXJzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBkYXRhTGlzdCA9IHRoaXMuc2VydmljZS5zb3J0RmlsdGVyRGF0YSh0aGlzLnN0b3JlLmdldFN0YXRlKCkpO1xuICAgICAgICAgICAgUyh0aGlzLnByb3BzLmFwcElkKS5zZXRVcGRhdGVkRGF0YSh7IGRhdGFMaXN0OiBbXSB9KTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgICAgICBTKHRoaXMucHJvcHMuYXBwSWQpLnNldFVwZGF0ZWREYXRhKHsgZGF0YUxpc3Q6IGRhdGFMaXN0IH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy9maW5hbGx5LCB3ZSBuZWVkIHRvIGNhbGwgYmFjayBjdXN0b21Db25maWcgdXBkYXRlXG4gICAgICAgIHRoaXMuX29uQ3VzdG9tQ29uZmlnVXBkYXRlKCk7XG4gICAgfVxuXG4gICAgX29uVGFibGVTZWFyY2godGVybSkge1xuICAgICAgICBpZiAodGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZy5nbG9iYWwpIHtcbiAgICAgICAgICAgIC8vdGhpcyBpcyBnbG9iYWwgbGV2ZWwgdGFibGUgc2VhcmNoLCBub3Qgc3VwcG9ydGQgbm93XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgZGF0YUxpc3QgPSB0aGlzLnNlcnZpY2Uuc2VhcmNoV2hvbGVEYXRhKHRoaXMuc3RvcmUuZ2V0U3RhdGUoKSwgdGVybSk7XG4gICAgICAgICAgICBTKHRoaXMucHJvcHMuYXBwSWQpLnNldFVwZGF0ZWREYXRhKHsgZGF0YUxpc3Q6IFtdIH0pO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgICAgIFModGhpcy5wcm9wcy5hcHBJZCkuc2V0VXBkYXRlZERhdGEoeyBkYXRhTGlzdDogZGF0YUxpc3QgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF91cGRhdGVXaWR0aCgpIHtcbiAgICAgICAgLy9TKHRoaXMucHJvcHMuYXBwSWQpLnNldE5ld1RhYmxlV2lkdGgodGhpcy5yZWZzLmR2RGF0YXRhYmxlLm9mZnNldFdpZHRoKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtDbGFzc05hbWVzKHtcbiAgICAgICAgICAgICAgICAgICAgZHZfdGFibGVfY2w6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG5vaXI6IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWcudGhlbWUgPT0gXCJub2lyXCIsXG4gICAgICAgICAgICAgICAgICAgIGxpZ2h0OiB0aGlzLnN0b3JlLmdldFN0YXRlKCkuY29uZmlnLnRoZW1lID09IFwibGlnaHRcIlxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8VGFibGVDb21wIHsuLi50aGlzLnByb3BzfSBzY3JvbGxUb1Jvdz17dGhpcy5qdW1wVG9Sb3dJbmRleH0vPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5EYXRhVGFibGVDb21wLnByb3BUeXBlcyA9IHtcbiAgICBhcHBJZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb25maWc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgZGF0YTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjdXN0b21Db25maWc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgb25DdXN0b21Db25maWdVcGRhdGU6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uU2VsZWN0ZWRSb3dDaGFuZ2VkOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvblJvd0V4cGFuZGVkQ29udGVudDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25OZXh0UGFnZUhhbmRsZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uR290b1BhZ2U6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uUm93QWN0aW9uU2VsZWN0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uU29ydGluZ0ZpbHRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25OYXZpZ2F0ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25TaW5nbGVBY3Rpb25VcGRhdGVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvblNlbGVjdEFsbExldmVsOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkNlbGxDbGlja2VkOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZWxlY3RlZFJvd0tleXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBvbkxpc3RJdGVtQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uR2xvYmFsRG93bmxvYWQ6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuRGF0YVRhYmxlQ29tcC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgYXBwSWQ6IFwiXCIsXG4gICAgY29uZmlnOiBudWxsLFxuICAgIGRhdGE6IG51bGwsXG4gICAgY3VzdG9tQ29uZmlnOiBudWxsLFxuICAgIG9uQ3VzdG9tQ29uZmlnVXBkYXRlOiBudWxsLFxuICAgIG9uU2VsZWN0ZWRSb3dDaGFuZ2VkOiBudWxsLFxuICAgIG9uUm93RXhwYW5kZWRDb250ZW50OiBudWxsLFxuICAgIG9uTmV4dFBhZ2VIYW5kbGVyOiBudWxsLFxuICAgIG9uR290b1BhZ2U6IG51bGwsXG4gICAgb25Sb3dBY3Rpb25TZWxlY3RlZDogbnVsbCxcbiAgICBvblNvcnRpbmdGaWx0ZXJpbmc6IG51bGwsXG4gICAgb25OYXZpZ2F0ZTogbnVsbCxcbiAgICBvblNpbmdsZUFjdGlvblVwZGF0ZWQ6IG51bGwsXG4gICAgb25TZWxlY3RBbGxMZXZlbDogbnVsbCxcbiAgICBvbkNlbGxDbGlja2VkOiBudWxsLFxuICAgIHNlbGVjdGVkUm93S2V5czogW10sXG4gICAgb25MaXN0SXRlbUNsaWNrOiBudWxsLFxuICAgIG9uR2xvYmFsRG93bmxvYWQ6IG51bGxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFUYWJsZUNvbXA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgVGV0aGVyQ29tcG9uZW50IGZyb20gXCJyZWFjdC10ZXRoZXJcIjtcblxuZXhwb3J0IGNsYXNzIEJvdW5kZWRUZXRoZXJDb21wIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMudGFibGVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLiR7dGhpcy5wcm9wcy5hcHBJZH1gKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8VGV0aGVyQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgICAgICAgICAgY29uc3RyYWludHM9e1tcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG86IHRoaXMudGFibGVFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNobWVudDogJ3RhcmdldCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBwaW46IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgPC9UZXRoZXJDb21wb25lbnQ+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFMgZnJvbSBcIi4uL3JlZHV4L3N0b3JlXCI7XG4vLyBpbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwicmVhY3QtbWRsXCI7XG5cbmNsYXNzIENsZWFyRmlsdGVyQ29tcCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc2hvd2luZzogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zdG9yZSA9IFModGhpcy5wcm9wcy5hcHBJZCk7XG4gICAgICAgIHRoaXMudW5zdWJzcmliZXJGaWx0ZXJDb2x1bW4gPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuRklMVEVSX1VQREFURSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc2V0RmlsdGVyQ2ZnKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zZXRGaWx0ZXJDZmc9dGhpcy5fc2V0RmlsdGVyQ2ZnLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVzZXQgPSB0aGlzLnJlc2V0LmJpbmQodGhpcyk7XG4gICAgfVxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLnVuc3Vic3JpYmVyRmlsdGVyQ29sdW1uKCk7XG4gICAgfVxuICAgIF9zZXRGaWx0ZXJDZmcoKXtcbiAgICAgICAgbGV0IGN1c3RvbUNvbmZpZyA9IFModGhpcy5wcm9wcy5hcHBJZCkuZ2V0U3RhdGUoKS5jdXN0b21Db25maWc7XG4gICAgICAgIGlmIChjdXN0b21Db25maWcgJiYgY3VzdG9tQ29uZmlnLmZpbHRlcnMubGVuZ3RoPjApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHNob3dpbmc6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgc2hvd2luZzogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlc2V0KCl7XG4gICAgICAgIHRoaXMuc3RvcmUucmVzZXRGaWx0ZXIoKTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuc3RhdGUuc2hvd2luZyAmJlxuICAgICAgICAgICAgPHNwYW4+QnV0dG9uPC9zcGFuPlxuICAgICAgICApXG4gICAgfVxufVxuLy8gPEJ1dHRvbiBjbGFzc05hbWU9XCJjbGVhckZpbHRlckNvbXBcIiBvbkNsaWNrPXt0aGlzLnJlc2V0fT5cbi8vICAgICBSZXNldCBGaWx0ZXJzXG4vLyA8L0J1dHRvbj5cbmV4cG9ydCBkZWZhdWx0IENsZWFyRmlsdGVyQ29tcDtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBTIGZyb20gXCIuLi9yZWR1eC9zdG9yZVwiO1xuLy8gaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcInJlYWN0LW1kbFwiO1xuaW1wb3J0IENzdkdlbmVyYXRvciBmcm9tIFwiLi4vLi4vY29tbW9uL2Nzdl9nZW5lcmF0b3JcIjtcbmltcG9ydCB7IFBvcnRhbCB9IGZyb20gXCJyZWFjdC1wb3J0YWxcIjtcbi8vIGltcG9ydCB7IFJhZGlvR3JvdXAsIFJhZGlvLCBUZXh0ZmllbGQgfSBmcm9tIFwicmVhY3QtbWRsXCI7XG5cbmNsYXNzIERvd25sb2FkT3B0aW9uQ29tcCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc2V0T2Zmc2V0ID0gdGhpcy5zZXRPZmZzZXQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5jbG9zZSA9IHRoaXMuY2xvc2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5kb3dubG9hZCA9IHRoaXMuZG93bmxvYWQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zZWxlY3RSZWNvcmRzID0gdGhpcy5zZWxlY3RSZWNvcmRzLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBwYWdlU2l6ZTogMCxcbiAgICAgICAgICAgIHNlbGVjdGVkQ291bnRzOiBcImN1cnJlbnRcIixcbiAgICAgICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgICAgIG9mZnNldEVycm9yOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5zdG9yZSA9IFModGhpcy5wcm9wcy5hcHBJZCk7XG4gICAgICAgIGNvbnN0IGdsb2JhbERvd25sb2FkQ29uZmlnID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmdsb2JhbERvd25sb2FkQ29uZmlnO1xuICAgICAgICBpZiAoZ2xvYmFsRG93bmxvYWRDb25maWcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIG9mZnNldDogZ2xvYmFsRG93bmxvYWRDb25maWcub2Zmc2V0LFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkQ291bnRzOiBnbG9iYWxEb3dubG9hZENvbmZpZy5zZWxlY3RlZENvdW50c1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBwYWdlU2l6ZTogdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnBhZ2UucGFnZVNpemVcbiAgICAgICAgfSlcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25DbG9zZVBvcHVwKCk7XG4gICAgfVxuICAgIGRvd25sb2FkKCkge1xuICAgICAgICBpZiAoIWlzTmFOKHRoaXMuc3RhdGUuc2VsZWN0ZWRDb3VudHMpICYmIHRoaXMuc3RhdGUub2Zmc2V0RXJyb3IpIHtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25Db25maXJtRG93bmxvYWQodGhpcy5zdGF0ZS5zZWxlY3RlZENvdW50cywgdGhpcy5zdGF0ZS5vZmZzZXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlbGVjdFJlY29yZHMoZSkge1xuICAgICAgICBpZiAoaXNOYU4oZS50YXJnZXQudmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBvZmZzZXRFcnJvcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2VsZWN0ZWRDb3VudHM6IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHNldE9mZnNldChlKSB7XG4gICAgICAgIGNvbnN0IHJlZyA9IC9eXFxkKyQvO1xuICAgICAgICBpZiAoIXJlZy50ZXN0KGUudGFyZ2V0LnZhbHVlKSAmJiBlLnRhcmdldC52YWx1ZS50cmltKCkgIT09ICcnKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBvZmZzZXRFcnJvcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgb2Zmc2V0RXJyb3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG9mZnNldDogZS50YXJnZXQudmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZG93bmxvYWRDb250ZW50XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjbG9zZUJ0blwiIG9uQ2xpY2s9e3RoaXMuY2xvc2V9PlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJtYXRlcmlhbC1pY29uc1wiPmNsZWFyPC9pPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+RG93bmxvYWQgT3B0aW9uczwvZGl2PlxuXG5cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5vZmZzZXRFcnJvciAmJiA8ZGl2IGNsYXNzTmFtZT0nb2Zmc2V0RXJyb3InPkludmFsaWQgT2Zmc2V0IE51bWJlcjwvZGl2Pn1cbiAgICAgICAgICAgICAgICB7IXRoaXMuc3RhdGUub2Zmc2V0RXJyb3IgJiYgPGRpdj5CdXR0b248L2Rpdj59XG5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApXG4gICAgfVxufVxuXG4vLyA8UmFkaW9Hcm91cCBjb250YWluZXI9XCJ1bFwiIGNoaWxkQ29udGFpbmVyPVwibGlcIiBuYW1lPVwib3RwdGlvbkRvd25sb2FkXCIgdmFsdWU9e3RoaXMuc3RhdGUuc2VsZWN0ZWRDb3VudHN9IG9uQ2hhbmdlPXt0aGlzLnNlbGVjdFJlY29yZHN9PlxuLy8gICAgIDxSYWRpbyB2YWx1ZT1cImN1cnJlbnRcIj5DdXJyZW50PC9SYWRpbz5cbi8vICAgICA8UmFkaW8gdmFsdWU9XCIxMDBcIj4xMDAgUmVjb3JkczwvUmFkaW8+XG4vLyAgICAgPFJhZGlvIHZhbHVlPVwiMjAwXCI+MjAwIFJlY29yZHM8L1JhZGlvPlxuLy8gICAgIDxSYWRpbyB2YWx1ZT1cIjMwMFwiPjMwMCBSZWNvcmRzPC9SYWRpbz5cbi8vICAgICA8UmFkaW8gdmFsdWU9XCI0MDBcIj40MDAgUmVjb3JkczwvUmFkaW8+XG4vLyAgICAgPFJhZGlvIHZhbHVlPVwiNTAwXCI+NTAwIFJlY29yZHM8L1JhZGlvPlxuLy8gICAgIDxSYWRpbyB2YWx1ZT1cIjEwMDBcIj4xMDAwIFJlY29yZHM8L1JhZGlvPlxuLy8gICAgIDxSYWRpbyB2YWx1ZT1cIjMwMDBcIj4zMDAwIFJlY29yZHM8L1JhZGlvPlxuLy8gICAgIDxSYWRpbyB2YWx1ZT1cIjUwMDBcIj41MDAwIFJlY29yZHM8L1JhZGlvPlxuLy8gICAgIDxSYWRpbyB2YWx1ZT1cIjEwMDAwXCI+MTAwMDAgUmVjb3JkczwvUmFkaW8+XG4vLyAgICAgPFJhZGlvIHZhbHVlPVwiMjAwMDBcIj4yMDAwMCBSZWNvcmRzPC9SYWRpbz5cbi8vIDwvUmFkaW9Hcm91cD5cbi8vIHshaXNOYU4odGhpcy5zdGF0ZS5zZWxlY3RlZENvdW50cykgJiZcbi8vICAgICA8VGV4dGZpZWxkXG4vLyAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLm9mZnNldH1cbi8vICAgICAgICAgb25DaGFuZ2U9e3RoaXMuc2V0T2Zmc2V0fVxuLy8gICAgICAgICBsYWJlbD1cIk9mZnNldCBSZWNvcmRzXCJcbi8vICAgICAgICAgZmxvYXRpbmdMYWJlbFxuLy8gICAgIC8+fVxuXG5cbi8vIDxCdXR0b24gcmFpc2VkIGNvbG9yZWQgb25DbGljaz17dGhpcy5kb3dubG9hZH0+XG4vLyAgICAgQ29uZmlybVxuLy8gICAgIDwvQnV0dG9uPlxuY2xhc3MgRG93bmxvYWRDb21wIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5kb3dubG9hZCA9IHRoaXMuZG93bmxvYWQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5nZXREb3dubG9hZENvbHVtbnMgPSB0aGlzLmdldERvd25sb2FkQ29sdW1ucy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmNsb3NlUG9wdXAgPSB0aGlzLmNsb3NlUG9wdXAuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5jb25maXJtRG93bmxvYWQgPSB0aGlzLmNvbmZpcm1Eb3dubG9hZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9kb3dubG9hZCA9IHRoaXMuX2Rvd25sb2FkLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBpc09wZW46IGZhbHNlLFxuICAgICAgICAgICAgZG93bmxvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgYnRuVGl0bGU6ICdFeHBvcnQnXG4gICAgICAgIH1cbiAgICB9XG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBTKHRoaXMucHJvcHMuYXBwSWQpO1xuICAgICAgICBpZiAodGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZy5nbG9iYWwpIHtcbiAgICAgICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLnVuU3Vic2NyaWJlRG93bmxvYWQgPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuU0VUX0RPV05MT0FEX0RBVEEsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgYnRuVGl0bGU6ICdFeHBvcnQnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5kb3dubG9hZERhdGFMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG93bmxvYWQodGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRvd25sb2FkRGF0YUxpc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy51blN1YnNjcmliZURvd25sb2FkKSB7XG4gICAgICAgICAgICB0aGlzLnVuU3Vic2NyaWJlRG93bmxvYWQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXREb3dubG9hZENvbHVtbnMoKSB7XG4gICAgICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgICAgbGV0IGNvbHVtbnMgPSBzdGF0ZS5jdXN0b21Db25maWcuY29sdW1uc09yZGVyO1xuICAgICAgICBpZiAoIWNvbHVtbnMgfHwgY29sdW1ucy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgY29sdW1ucyA9IE9iamVjdC5rZXlzKHN0YXRlLmRhdGFMaXN0WzBdKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgb3V0cHV0Q29sdW1ucyA9IFtdO1xuICAgICAgICBjb2x1bW5zLm1hcCgoY29sdW1uS2V5LCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuY29uZmlnLmNvbHVtblRvQmVEb3dubG9hZGVkKGNvbHVtbktleSkpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRDb2x1bW5zLnB1c2goY29sdW1uS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBvdXRwdXRDb2x1bW5zO1xuICAgIH1cbiAgICBkb3dubG9hZCgpIHtcbiAgICAgICAgLy9pZiBpdCBpcyBnbG9iYWwgcmV0cmlldmFsLCB3ZSBuZWVkIHRvIGxldCB1c2VyIHNlbGVjdCByb3dzXG4gICAgICAgIGlmICh0aGlzLnN0b3JlLmdldFN0YXRlKCkuY29uZmlnLmdsb2JhbCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgaXNPcGVuOiB0cnVlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZG93bmxvYWQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZG93bmxvYWQoZGF0YUxpc3QpIHtcbiAgICAgICAgaWYgKCFkYXRhTGlzdCkge1xuICAgICAgICAgICAgZGF0YUxpc3QgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkuZGF0YUxpc3Q7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNzdkdlbmVyYXRvciA9IG5ldyBDc3ZHZW5lcmF0b3IoZGF0YUxpc3QsICdleHBvcnQuY3N2JywgXCIsXCIsIHRydWUsIHRoaXMuZ2V0RG93bmxvYWRDb2x1bW5zKCkpO1xuICAgICAgICBjc3ZHZW5lcmF0b3IuZG93bmxvYWQodHJ1ZSk7XG4gICAgfVxuICAgIGNsb3NlUG9wdXAoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaXNPcGVuOiBmYWxzZVxuICAgICAgICB9KVxuICAgIH1cbiAgICBjb25maXJtRG93bmxvYWQocmVjb3Jkcywgb2Zmc2V0KSB7XG4gICAgICAgIC8vc2F2aW5nIHRvIHN0b3JlXG4gICAgICAgIHRoaXMuc3RvcmUuc2V0R2xvYmFsRG93bmxvYWRDb25maWcoe1xuICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgICBzZWxlY3RlZENvdW50czogcmVjb3Jkc1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJlY29yZHMgPT09ICdjdXJyZW50Jykge1xuICAgICAgICAgICAgLy90aGlzIGlzIGN1cnJlbnQgZGF0YSB2aWV3IHJlY29yZHMsIGRvd25sb2FkIGRpcmVjdGx5XG4gICAgICAgICAgICB0aGlzLl9kb3dubG9hZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMub25HbG9iYWxEb3dubG9hZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBidG5UaXRsZTogJ0V4cG9ydGluZydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uR2xvYmFsRG93bmxvYWQocmVjb3Jkcywgb2Zmc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGlzT3BlbjogZmFsc2VcbiAgICAgICAgfSlcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Rvd25sb2FkQnRuV3JhcHBlcic+XG4gICAgICAgICAgICAgICAgPHNwYW4+QnV0dG9uPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGlkPXtcImhvb2tfZG93bmxvYWRfXCIgKyB0aGlzLnByb3BzLmFwcElkfSBjbGFzc05hbWU9XCJkb3dubG93T3B0aW9uV3JhcHBlclwiIC8+XG4gICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuaXNPcGVuICYmIChcbiAgICAgICAgICAgICAgICAgICAgPFBvcnRhbCBub2RlPXtkb2N1bWVudCAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImhvb2tfZG93bmxvYWRfXCIgKyB0aGlzLnByb3BzLmFwcElkKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RG93bmxvYWRPcHRpb25Db21wIHsuLi50aGlzLnByb3BzfSBvbkNsb3NlUG9wdXA9e3RoaXMuY2xvc2VQb3B1cH0gb25Db25maXJtRG93bmxvYWQ9e3RoaXMuY29uZmlybURvd25sb2FkfSAvPlxuICAgICAgICAgICAgICAgICAgICA8L1BvcnRhbD5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIClcbiAgICB9XG59XG4vLyA8QnV0dG9uIGNsYXNzTmFtZT0nZG93bmxvYWRCdG4nIHJpcHBsZSByYWlzZWQgY29sb3JlZCBvbkNsaWNrPXt0aGlzLmRvd25sb2FkfT5cbi8vICAgICA8aSBjbGFzc05hbWU9J21hdGVyaWFsLWljb25zJz5hcnJvd19kb3dud2FyZDwvaT5cbi8vICAgICB7dGhpcy5zdGF0ZS5idG5UaXRsZX1cbi8vIDwvQnV0dG9uPlxuZXhwb3J0IGRlZmF1bHQgRG93bmxvYWRDb21wO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFMgZnJvbSBcIi4uL3JlZHV4L3N0b3JlXCI7XG5pbXBvcnQgQ2xhc3NOYW1lcyBmcm9tIFwiY2xhc3NuYW1lc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYWdpbmF0b3JDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgcGFnZTogbnVsbCxcbiAgICAgICAgICAgIGNvbmZpZzogbnVsbFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmZpcnN0ID0gdGhpcy5maXJzdC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnByZSA9IHRoaXMucHJlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMubmV4dCA9IHRoaXMubmV4dC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmxhc3QgPSB0aGlzLmxhc3QuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5zdG9yZSA9IFModGhpcy5wcm9wcy5hcHBJZCk7XG4gICAgICAgIHRoaXMucGFnZSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5wYWdlO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHBhZ2U6IHRoaXMucGFnZSxcbiAgICAgICAgICAgIGNvbmZpZzogdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZyxcbiAgICAgICAgICAgIHRvdGFsUmVjb3JkczogdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRhdGFMaXN0Lmxlbmd0aFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWcuZW5hYmxlUGFnaW5hdG9yKVxuICAgICAgICAgICAgdGhpcy51blN1YnNjcmliZVBhZ2UgPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuUEFHRV9VUERBVEUsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2UgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkucGFnZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZTogdGhpcy5wYWdlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgaWYgKCF0aGlzLnN0b3JlLmdldFN0YXRlKCkuY29uZmlnLmVuYWJsZVBhZ2luYXRvcilcbiAgICAgICAgICAgIHRoaXMudW5TdWJzY3JpYmVGaWx0ZXIgPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuREFUQV9VUERBVEVELCBzdGF0ZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHRvdGFsUmVjb3JkczogdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRhdGFMaXN0Lmxlbmd0aFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0b3JlLmdldFN0YXRlKCkuY29uZmlnLmVuYWJsZVBhZ2luYXRvcikgdGhpcy51blN1YnNjcmliZVBhZ2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLnN0b3JlLmdldFN0YXRlKCkuY29uZmlnLmVuYWJsZVBhZ2luYXRvcikgdGhpcy51blN1YnNjcmliZUZpbHRlcigpO1xuICAgIH1cblxuICAgIGZpcnN0KCkge1xuICAgICAgICB0aGlzLnBhZ2UuZmlyc3QoKTtcbiAgICAgICAgdGhpcy5yZXNldFN0YXRlKCk7XG4gICAgfVxuICAgIHByZSgpIHtcbiAgICAgICAgdGhpcy5wYWdlLnByZSgpO1xuICAgICAgICB0aGlzLnJlc2V0U3RhdGUoKTtcbiAgICB9XG4gICAgbmV4dCgpIHtcbiAgICAgICAgdGhpcy5wYWdlLm5leHQoKTtcbiAgICAgICAgdGhpcy5yZXNldFN0YXRlKCk7XG4gICAgfVxuICAgIGxhc3QoKSB7XG4gICAgICAgIHRoaXMucGFnZS5sYXN0KCk7XG4gICAgICAgIHRoaXMucmVzZXRTdGF0ZSgpO1xuICAgIH1cblxuICAgIHJlc2V0U3RhdGUoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgcGFnZTogdGhpcy5wYWdlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoXCJvbkdvdG9QYWdlXCIgaW4gdGhpcy5wcm9wcykge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkdvdG9QYWdlKHRoaXMucGFnZS5jdXJyZW50UGFnZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGxldCBwYWdlU3RyID0gJyc7XG4gICAgICAgIGlmKHRoaXMuc3RhdGUucGFnZSl7XG4gICAgICAgICAgICBpZih0aGlzLnN0YXRlLnBhZ2UudG90YWw+MCl7XG4gICAgICAgICAgICAgICAgcGFnZVN0ciA9IHRoaXMuc3RhdGUucGFnZS50b3RhbDtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5kYXRhTGlzdCAmJiB0aGlzLnN0b3JlLmdldFN0YXRlKCkuZGF0YUxpc3QubGVuZ3RoPjApe1xuICAgICAgICAgICAgICAgICAgICBwYWdlU3RyPSdtYW55JztcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgcGFnZVN0ciA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2luYXRvcldyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5wYWdlICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuY29uZmlnLmVuYWJsZVBhZ2luYXRvciAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuZmlyc3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Q2xhc3NOYW1lcyh7IGluQWN0aXZlOiAhdGhpcy5zdGF0ZS5wYWdlLmlzRmlyc3RFbmFibGVkKCkgfSl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJtYXRlcmlhbC1pY29uc1wiPmZpcnN0X3BhZ2U8L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5wcmV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Q2xhc3NOYW1lcyh7IGluQWN0aXZlOiAhdGhpcy5zdGF0ZS5wYWdlLmlzUHJlRW5hYmxlZCgpIH0pfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwibWF0ZXJpYWwtaWNvbnNcIj5za2lwX3ByZXZpb3VzPC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImluZm9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5uZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5wYWdlLmdldFBhZ2VSYW5nZSgpWzBdfSAtIHt0aGlzLnN0YXRlLnBhZ2UuZ2V0UGFnZVJhbmdlKClbMV19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3BhZ2VTdHI9PT0nJz8nJzonIG9mICd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3BhZ2VTdHJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5uZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e0NsYXNzTmFtZXMoeyBpbkFjdGl2ZTogIXRoaXMuc3RhdGUucGFnZS5pc05leHRFbmFibGVkKCkgfSl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJtYXRlcmlhbC1pY29uc1wiPnNraXBfbmV4dDwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmxhc3R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Q2xhc3NOYW1lcyh7IGluQWN0aXZlOiAhdGhpcy5zdGF0ZS5wYWdlLmlzTGFzdEVuYWJsZWQoKSB9KX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cIm1hdGVyaWFsLWljb25zXCI+bGFzdF9wYWdlPC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnBhZ2UgJiZcbiAgICAgICAgICAgICAgICAgICAgIXRoaXMuc3RhdGUuY29uZmlnLnRvdGFsVGl0bGUgJiZcbiAgICAgICAgICAgICAgICAgICAgIXRoaXMuc3RhdGUuY29uZmlnLmVuYWJsZVBhZ2luYXRvciAmJlxuICAgICAgICAgICAgICAgICAgICAhdGhpcy5zdGF0ZS5jb25maWcuaGlkZVRvdGFsICYmXG4gICAgICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG90YWxSZWNvcmRzV3JhcHBlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5udGVyUGFydFwiPlRvdGFsIFJlY29yZHM6IHt0aGlzLnN0YXRlLnRvdGFsUmVjb3Jkc308L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFRhYmxlU2VydmljZSBmcm9tIFwiLi4vc2VydmljZXMvdGFibGVfc2VydmljZVwiO1xuaW1wb3J0IFMgZnJvbSBcIi4uL3JlZHV4L3N0b3JlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbGVjdEFsbEluZGljYXRvckNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBzZWxlY3RlZFJvd3NDb3VudDogMCxcbiAgICAgICAgICAgIHNlbGVjdExldmVsOiAwIC8vMCwxLDIsMyAtIDA6bm9TZWxlY3Rpb24sIDE6bm90QWxsLCAyOnBhZ2VMZXZlbEFsbCwgMzpnbG9iYWxMZXZlbEFsbFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNlcnZpY2UgPSBuZXcgVGFibGVTZXJ2aWNlKCk7XG4gICAgICAgIHRoaXMuX3NldFNlbGVjdGVkID0gdGhpcy5fc2V0U2VsZWN0ZWQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy50b2dnbGVTZWxlY3RBbGwgPSB0aGlzLnRvZ2dsZVNlbGVjdEFsbC5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5zdG9yZSA9IFModGhpcy5wcm9wcy5hcHBJZCk7XG4gICAgICAgIHRoaXMudW5zdWJzcmliZXJBbGxTZWxlY3RlZCA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5ST1dfQUxMX1NFTEVDVEVELCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zZXRTZWxlY3RlZCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51bnN1YnNyaWJlclNpbmdsZVNlbGVjdGVkID0gdGhpcy5zdG9yZS5zdWJzY3JpYmVUbyh0aGlzLnN0b3JlLlJPV19TRUxFQ1RFRCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc2V0U2VsZWN0ZWQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLnVuc3Vic3JpYmVyQWxsU2VsZWN0ZWQoKTtcbiAgICAgICAgdGhpcy51bnN1YnNyaWJlclNpbmdsZVNlbGVjdGVkKCk7XG4gICAgfVxuICAgIF9zZXRTZWxlY3RlZCgpIHtcbiAgICAgICAgbGV0IHN0YXRlID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjb25zdCBpc0FsbFJvd1NlbGVjdGVkID0gdGhpcy5zZXJ2aWNlLmlzQWxsUm93U2VsZWN0ZWQoXG4gICAgICAgICAgICBzdGF0ZS5kYXRhTGlzdCxcbiAgICAgICAgICAgIHN0YXRlLmNvbmZpZyxcbiAgICAgICAgICAgIHN0YXRlLnNlbGVjdGVkUm93S2V5c1xuICAgICAgICApO1xuICAgICAgICBsZXQgbGV2ZWwgPSAwO1xuICAgICAgICBpZiAoaXNBbGxSb3dTZWxlY3RlZCkge1xuICAgICAgICAgICAgbGV2ZWwgPSAoc3RhdGUuc2VsZWN0ZWRSb3dLZXlzLmxlbmd0aCA9PT0gc3RhdGUucGFnZS50b3RhbCkgPyAzIDogMjtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5zZWxlY3RlZFJvd0tleXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGV2ZWwgPSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RMZXZlbDogbGV2ZWwsIHNlbGVjdGVkUm93c0NvdW50OiBzdGF0ZS5zZWxlY3RlZFJvd0tleXMubGVuZ3RoIH0pO1xuICAgICAgICB0aGlzLnN0b3JlLnNldFNlbGVjdEFsbExldmVsKGxldmVsKTtcbiAgICB9XG4gICAgdG9nZ2xlU2VsZWN0QWxsKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNlbGVjdExldmVsOiB0aGlzLnN0YXRlLnNlbGVjdExldmVsID09PSAzID8gMCA6IDNcbiAgICAgICAgfSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuc2VsZWN0TGV2ZWwgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JlLnNldFJvd0FsbFNlbGVjdGVkKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JlLnRvZ2dsZVJvd1NlbGVjdGVkKC0xKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJyZXNpemVcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdG9yZS5zZXRTZWxlY3RBbGxMZXZlbCh0aGlzLnN0YXRlLnNlbGVjdExldmVsKTtcbiAgICAgICAgfSwgMCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgY29tcCA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnNlbGVjdExldmVsID09PSAxKSB7XG4gICAgICAgICAgICBjb21wID0gKFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNlbGVjdGVkUm93c0NvdW50fSByZWNvcmRzIHNlbGVjdGVkLlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnNlbGVjdExldmVsID09PSAyKSB7XG4gICAgICAgICAgICBjb21wID0gKFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIEFsbCB7dGhpcy5zdGF0ZS5zZWxlY3RlZFJvd3NDb3VudH0gcmVjb3JkcyBvbiB0aGlzIHBhZ2UgYXJlIHNlbGVjdGVkLlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzcGFuQWxsSW5kaWNhdG9yXCIgb25DbGljaz17dGhpcy50b2dnbGVTZWxlY3RBbGx9PlxuICAgICAgICAgICAgICAgICAgICAgICAgU2VsZWN0IGFsbCB7dGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnBhZ2UudG90YWx9IHJlY29yZHNcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnNlbGVjdExldmVsID09PSAzKSB7XG4gICAgICAgICAgICBjb21wID0gKFxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIEFsbCB7dGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnBhZ2UudG90YWx9IHJlY29yZHMgYXJlIHNlbGVjdGVkLlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzcGFuQWxsSW5kaWNhdG9yXCIgb25DbGljaz17dGhpcy50b2dnbGVTZWxlY3RBbGx9PlxuICAgICAgICAgICAgICAgICAgICAgICAgQ2xlYXIgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJzZWxlY3RBbGxXcmFwcGVyXCI+e2NvbXB9PC9kaXY+O1xuICAgIH1cbn1cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFBvcnRhbCB9IGZyb20gXCJyZWFjdC1wb3J0YWxcIjtcbmltcG9ydCBTIGZyb20gXCIuLi9yZWR1eC9zdG9yZVwiO1xuaW1wb3J0IFRhYmxlU2VydmljZSBmcm9tIFwiLi4vc2VydmljZXMvdGFibGVfc2VydmljZVwiO1xuaW1wb3J0IENsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcbmltcG9ydCBqUXVlcnkgZnJvbSBcImpxdWVyeVwiO1xuaW1wb3J0IFwianF1ZXJ5LXVpL3VpL3dpZGdldHMvc29ydGFibGVcIjtcbi8vIGltcG9ydCB7IENoZWNrYm94IH0gZnJvbSBcInJlYWN0LW1kbFwiO1xuLy8gaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcInJlYWN0LW1kbFwiO1xuXG5jbGFzcyBTZXR0aW5nQ29tcG9uZW50Q29sdW1uSXRlbSBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjaGVja2VkOiB0cnVlLFxuICAgICAgICAgICAgdGl0bGU6ICcnXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYWxsU2VsZWN0ZWQgPSB0aGlzLmFsbFNlbGVjdGVkLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZGVmYXVsdFNlbGVjdGVkID0gdGhpcy5kZWZhdWx0U2VsZWN0ZWQuYmluZCh0aGlzKTtcbiAgICB9XG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBTKHRoaXMucHJvcHMuYXBwSWQpO1xuICAgICAgICBpZihPYmplY3Qua2V5cyh0aGlzLnN0b3JlLmdldFN0YXRlKCkuY29sdW1uSGlkZGVuVG1wKS5sZW5ndGg+MCl7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjaGVja2VkOiAhdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbHVtbkhpZGRlblRtcFt0aGlzLnByb3BzLmNvbHVtbl0sXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWcuZ2V0Q29sdW1uQ29uZmlnKHRoaXMucHJvcHMuY29sdW1uKS50aXRsZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgY2hlY2tlZDogIXRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWcuY29sdW1uSGlkZGVuKHRoaXMucHJvcHMuY29sdW1uKSxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZy5nZXRDb2x1bW5Db25maWcodGhpcy5wcm9wcy5jb2x1bW4pLnRpdGxlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3Vic2NyaWJlcl9hbGwgPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuU0VMRUNUX0FMTF9DT0xVTU5TLCBvcGVuID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWxsU2VsZWN0ZWQob3Blbik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN1YnNjcmliZXJfZGVmYXVsdCA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5TRUxFQ1RfREVGQVVMVF9DT0xVTU5TLCBvcGVuID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdFNlbGVjdGVkKG9wZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKXtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVyX2FsbCgpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZXJfZGVmYXVsdCgpO1xuICAgIH1cbiAgICBhbGxTZWxlY3RlZChvcGVuKSB7XG4gICAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjaGVja2VkOnRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgY2hlY2tlZDpmYWxzZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByb3BzLm9uSXRlbUNoZWNrZWQodGhpcy5wcm9wcy5jb2x1bW4sICFvcGVuKTtcbiAgICB9XG4gICAgZGVmYXVsdFNlbGVjdGVkKG9wZW4pIHtcbiAgICAgICAgbGV0IGRlZmF1bHRDb2x1bW5zID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRlZmF1bHRDb2x1bW5zO1xuICAgICAgICBpZihkZWZhdWx0Q29sdW1ucy5pbmNsdWRlcyh0aGlzLnByb3BzLmNvbHVtbikgJiYgb3Blbil7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjaGVja2VkOnRydWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgY2hlY2tlZDpmYWxzZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uSXRlbUNoZWNrZWQodGhpcy5wcm9wcy5jb2x1bW4sICF0aGlzLnN0YXRlLmNoZWNrZWQpO1xuICAgICAgICB9LCAwKTtcbiAgICB9XG4gICAgb25DaGFuZ2UoZSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGNoZWNrZWQ6IGUudGFyZ2V0LmNoZWNrZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucHJvcHMub25JdGVtQ2hlY2tlZCh0aGlzLnByb3BzLmNvbHVtbiwgIWUudGFyZ2V0LmNoZWNrZWQpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgLy8gPHNwYW4gY2xhc3NOYW1lPSd0aXRsZSBhdXRvRWxsaXBzZSc+e3RoaXMucHJvcHMuY29sdW1ufTwvc3Bhbj5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sdW1uSXRlbVwiPlxuICAgICAgICAgICAgICAgIHsvKjxzcGFuIGNsYXNzTmFtZT1cInJlb3JkZXJcIj4qL31cbiAgICAgICAgICAgICAgICB7LyogICAgPGkgY2xhc3NOYW1lPVwibWF0ZXJpYWwtaWNvbnNcIj5kcmFnX2luZGljYXRvcjwvaT4qL31cbiAgICAgICAgICAgICAgICB7Lyo8L3NwYW4+Ki99XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY2hlY2tib3hXcmFwcGVyIHJlb3JkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+Y2hlY2tib3g8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nY2hlY2tib3hMYWJsZSBhdXRvRWxsaXBzZScgdGl0bGU9e3RoaXMuc3RhdGUudGl0bGV9Pnt0aGlzLnN0YXRlLnRpdGxlfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG4vLyA8Q2hlY2tib3hcbi8vICAgICBrZXk9e3RoaXMucHJvcHMucm93SW5kZXh9XG4vLyAgICAgY2hlY2tlZD17dGhpcy5zdGF0ZS5jaGVja2VkfVxuLy8gICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlfVxuLy8gLz5cblxuY2xhc3MgU2V0dGluZ0NvbXBvbmVudENvbHVtbnMgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY29sdW1uc09yZGVyOiBbXVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uSXRlbUNoZWNrZWQgPSB0aGlzLm9uSXRlbUNoZWNrZWQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zYXZlQ29sdW1ucyA9IHRoaXMuc2F2ZUNvbHVtbnMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZUFsbD10aGlzLm9uQ2hhbmdlQWxsLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25DaGFuZ2VEZWZhdWx0PXRoaXMub25DaGFuZ2VEZWZhdWx0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlZENvbHVtblN0YXR1cyA9IHt9O1xuICAgICAgICB0aGlzLmNvbHVtbk9yZGVyQ2hhbmdlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLnNlcnZpY2UgPSBuZXcgVGFibGVTZXJ2aWNlKCk7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBTKHRoaXMucHJvcHMuYXBwSWQpO1xuICAgICAgICAvLyBpZiB0aGVyZSBhcmUgb3RoZXIgcG9wdXBzIG9wZW4sIGNsb3NlIHRoZW1cbiAgICAgICAgdGhpcy5zdG9yZS5jbG9zZUFsbFBvcFVwKCk7XG4gICAgICAgIHRoaXMuc3RvcmUuY2xvc2VBbGxGaWx0ZXJQb3BVcCgpO1xuICAgICAgICAvL3dlIGRvIG5vdCB3YW50IHRvIGR5bmFtaWNhbGx5IGNoYWduZSBpdCwgc28gaGF2aW5nIHRvIHVzZSBjbG9uZSBoZXJlXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY29sdW1uc09yZGVyOiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KCB0aGlzLnNlcnZpY2UuZ2V0Tm9uZVN0aWNreUNvbHVtbnNPcmRlckZyb21TdGF0ZSh0aGlzLnN0b3JlLmdldFN0YXRlKCkpKSlcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVyQ2xvc2VBbGxQb3BVcCA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5DTE9TRV9BTExfUE9QVVAsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25DbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgalF1ZXJ5KHRoaXMucmVmcy5jb2x1bXNXcmFwcGVyKS5zb3J0YWJsZSh7XG4gICAgICAgICAgICBzdGFydFBvczogbnVsbCxcbiAgICAgICAgICAgIGVuZFBvczogbnVsbCxcbiAgICAgICAgICAgIGhhbmRsZTogXCIucmVvcmRlclwiLFxuICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRQb3MgPSB1aS5pdGVtLmluZGV4KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmRQb3MgPSB1aS5pdGVtLmluZGV4KCk7XG4gICAgICAgICAgICAgICAgbGV0IGNvbXBzID0gX3RoaXMuc3RhdGUuY29sdW1uc09yZGVyO1xuICAgICAgICAgICAgICAgIGNvbXBzLnNwbGljZSh0aGlzLmVuZFBvcywgMCwgY29tcHMuc3BsaWNlKHRoaXMuc3RhcnRQb3MsIDEpWzBdKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5jb2x1bW5PcmRlckNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIC8vbm93IGxldCdzIHVwZGFzdGUgcGFyZW50IGZvciB1cGRhdGluZ1xuICAgICAgICAgICAgICAgIC8vX3RoaXMucHJvcHMub25PcmRlckNoYW5nZWQoY29tcHMpO1xuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uc09yZGVyOiBjb21wc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVyQ2xvc2VBbGxQb3BVcCgpO1xuICAgICAgICBTKHRoaXMucHJvcHMuYXBwSWQpLnNldENvbHVtblRlbXBIaWRkZW5TdGF0dXMoe30pO1xuICAgIH1cbiAgICBvbkl0ZW1DaGVja2VkKGtleSwgY2hlY2tlZCkge1xuICAgICAgICB0aGlzLnVwZGF0ZWRDb2x1bW5TdGF0dXNba2V5XSA9IGNoZWNrZWQ7XG4gICAgICAgIFModGhpcy5wcm9wcy5hcHBJZCkuc2V0Q29sdW1uVGVtcEhpZGRlblN0YXR1cyh0aGlzLnVwZGF0ZWRDb2x1bW5TdGF0dXMpO1xuICAgIH1cbiAgICBzYXZlQ29sdW1ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuY29sdW1uT3JkZXJDaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uT3JkZXJDaGFuZ2VkKHRoaXMuc2VydmljZS5yZXN0b3JlU3RpY2t5Q29sdW1uc0Zyb21TdGF0ZSh0aGlzLnN0b3JlLmdldFN0YXRlKCksIHRoaXMuc3RhdGUuY29sdW1uc09yZGVyKSk7XG4gICAgICAgICAgICBTKHRoaXMucHJvcHMuYXBwSWQpLnNldENvbHVtbnNIaWRkZW4odGhpcy51cGRhdGVkQ29sdW1uU3RhdHVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFModGhpcy5wcm9wcy5hcHBJZCkuc2V0Q29sdW1uc0hpZGRlbih0aGlzLnVwZGF0ZWRDb2x1bW5TdGF0dXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJvcHMub25DbG9zZSgpO1xuICAgIH1cbiAgICBvbkNoYW5nZUFsbChlKSB7XG4gICAgICAgIFModGhpcy5wcm9wcy5hcHBJZCkudHJpZ2dlclNlbGVjdEFsbENvbHVtbnMoZS50YXJnZXQuY2hlY2tlZCk7XG4gICAgfVxuICAgIG9uQ2hhbmdlRGVmYXVsdChlKSB7XG4gICAgICAgIFModGhpcy5wcm9wcy5hcHBJZCkudHJpZ2dlckRlZmF1bHRDb2x1bW5zKGUudGFyZ2V0LmNoZWNrZWQpO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duQ29udGVudFwiIG9uQ2xpY2s9e2UgPT4gZS5zdG9wUHJvcGFnYXRpb24oKX0+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250cm9sbGVyV3JhcHBlclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbHVtblRpdGxlXCI+U2VsZWN0IENvbHVtbnM8L2Rpdj5cblxuICAgICAgICAgICAgICAgIDxkaXY+UGFydCAxPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbHVtc1dyYXBwZXJcIiByZWY9XCJjb2x1bXNXcmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmNvbHVtbnNPcmRlci5tYXAoKGNvbHVtbiwga2V5KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8U2V0dGluZ0NvbXBvbmVudENvbHVtbkl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkl0ZW1DaGVja2VkPXt0aGlzLm9uSXRlbUNoZWNrZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtrZXkgKyBNYXRoLnJhbmRvbSgpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbj17Y29sdW1ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dHRvbnNXcmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+cGFydCAyPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbi8vIDx1bD5cbi8vICAgICA8bGk+XG4vLyAgICAgICAgIDxDaGVja2JveCBsYWJlbD17XCJEZWZhdWx0XCJ9IG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlRGVmYXVsdH0gLz5cbi8vICAgICA8L2xpPlxuLy8gICAgIDxsaT5cbi8vICAgICAgICAgPENoZWNrYm94IGxhYmVsPXtcIkFsbFwifSBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZUFsbH0gLz5cbi8vICAgICA8L2xpPlxuLy8gPC91bD5cbi8vXG4vLyA8QnV0dG9uXG4vLyAgICAgY2xhc3NOYW1lPVwiY2xvc2VCdG5cIlxuLy8gICAgIG9uQ2xpY2s9e2UgPT4ge1xuLy8gICAgICAgICB0aGlzLnByb3BzLm9uQ2xvc2UoKTtcbi8vICAgICB9fT5cbi8vICAgICA8aSBjbGFzc05hbWU9XCJtYXRlcmlhbC1pY29uc1wiPmNsZWFyPC9pPlxuLy8gPC9CdXR0b24+XG5cblxuXG4vLyA8QnV0dG9uXG4vLyAgICAgcmlwcGxlXG4vLyAgICAgb25DbGljaz17ZSA9PiB7XG4vLyAgICAgICAgIHRoaXMucHJvcHMub25DbG9zZSgpO1xuLy8gICAgIH19PlxuLy8gICAgIENhbmNlbFxuLy8gPC9CdXR0b24+XG4vLyA8QnV0dG9uIHJhaXNlZCBjb2xvcmVkIG9uQ2xpY2s9e3RoaXMuc2F2ZUNvbHVtbnN9PlxuLy8gICAgIFNhdmVcbi8vIDwvQnV0dG9uPlxuXG5jbGFzcyBTZXR0aW5nQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGlzT3BlbjogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy50b2dnbGVEcm9wRG93biA9IHRoaXMudG9nZ2xlRHJvcERvd24uYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB9XG5cbiAgICB0b2dnbGVEcm9wRG93bihldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaXNPcGVuOiAhdGhpcy5zdGF0ZS5pc09wZW5cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3RvZ2dsZUNsaWNrT3V0c2lkZShldmVudCkge1xuICAgICAgICB2YXIgZXhjbHVkZWRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kcm9wZG93bldyYXBwZXJcIik7XG4gICAgICAgIHZhciBleGNsdWRlZEVsZW1lbnQxID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53cmFwcGVyXCIpO1xuICAgICAgICB2YXIgc2VsZWN0ZWRFbGVtZW50MSA9IGV4Y2x1ZGVkRWxlbWVudDEgPyBleGNsdWRlZEVsZW1lbnQxLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgOiBmYWxzZTtcbiAgICAgICAgdmFyIHNlbGVjdGVkRWxlbWVudCA9IGV4Y2x1ZGVkRWxlbWVudCA/IGV4Y2x1ZGVkRWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpIDogZmFsc2U7XG4gICAgICAgIGlmICghc2VsZWN0ZWRFbGVtZW50MSAmJiAhc2VsZWN0ZWRFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5pc09wZW4pIHRoaXMudG9nZ2xlRHJvcERvd24oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICA8c3Bhbj5idXR0b25zPC9zcGFuPlxuICAgICAgICAgICAgICAgIHsvKjxzcGFuIGNsYXNzTmFtZT1cInRpdGxlXCIgb25DbGljaz17dGhpcy50b2dnbGVEcm9wRG93bn0+RWRpdCBDb2x1bW5zPC9zcGFuPiovfVxuICAgICAgICAgICAgICAgIDxzcGFuIGlkPXtcImhvb2tfXCIgKyB0aGlzLnByb3BzLmFwcElkfSBjbGFzc05hbWU9XCJkcm9wZG93bldyYXBwZXJcIiAvPlxuICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmlzT3BlbiAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxQb3J0YWwgbm9kZT17ZG9jdW1lbnQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJob29rX1wiICsgdGhpcy5wcm9wcy5hcHBJZCl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFNldHRpbmdDb21wb25lbnRDb2x1bW5zIHsuLi50aGlzLnByb3BzfSBvbkNsb3NlPXt0aGlzLnRvZ2dsZURyb3BEb3dufSAvPlxuICAgICAgICAgICAgICAgICAgICA8L1BvcnRhbD5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuLy8gPEJ1dHRvbiBjbGFzc05hbWU9J2VkaXRDb2x1bW5zQnV0dG9uJyByaXBwbGUgcmFpc2VkIHByaW1hcnkgb25DbGljaz17dGhpcy50b2dnbGVEcm9wRG93bn0+XG4vLyAgICAgRWRpdCBDb2x1bW5zXG4vLyA8L0J1dHRvbj5cbmV4cG9ydCBkZWZhdWx0IFNldHRpbmdDb21wb25lbnQ7XG4iLCJpbXBvcnQgeyBUYWJsZSwgQ29sdW1uLCBDZWxsIH0gZnJvbSBcImZpeGVkLWRhdGEtdGFibGUtMlwiO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IENsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcbmltcG9ydCBTIGZyb20gXCIuLi9yZWR1eC9zdG9yZVwiO1xuXG5pbXBvcnQge1xuICAgIENlbGxXcmFwcGVyLFxuICAgIENvbHVtbkNoZWNrQm94Q2VsbCxcbiAgICBDb2x1bW5IZWFkZXJDaGVja0JveENlbGwsXG4gICAgQ29sbGFwc2VDZWxsLFxuICAgIE5hdmlnYXRlQ2VsbCxcbiAgICBTaW5nbGVTZWxlY3RBY3Rpb25DZWxsLFxuICAgIENvbGxhcHNlSGVhZGVyQ2VsbCxcbiAgICBDb2x1bW5SYWRpb0J1dHRvbkNlbGxcbn0gZnJvbSBcIi4vY2VsbHMvY2VsbHNcIjtcbmltcG9ydCB7IEhlYWRlckNlbGwgfSBmcm9tIFwiLi9jZWxscy9oZWFkZXJjZWxsXCI7XG5pbXBvcnQgU2V0dGluZ0NvbXAgZnJvbSBcIi4vU2V0dGluZ0NvbXBcIjtcbmltcG9ydCBQYWdpbmF0b3JDb21wb25lbnQgZnJvbSBcIi4vUGFnaW5hdG9yQ29tcFwiO1xuaW1wb3J0IFRhYmxlU2VydmljZSBmcm9tIFwiLi4vc2VydmljZXMvdGFibGVfc2VydmljZVwiO1xuaW1wb3J0IHsgVFlQRV9TSU5HTEVfU0VMRUNUX0FDVElPTlMgfSBmcm9tIFwiLi4vZW50aXRpZXMvY29sdW1uXCI7XG5pbXBvcnQgU2VsZWN0QWxsSW5kaWNhdG9yQ29tcG9uZW50IGZyb20gXCIuL1NlbGVjdEFsbEluZGljYXRvckNvbXBcIjtcbmltcG9ydCBDbGVhckZpbHRlckNvbXAgZnJvbSBcIi4vQ2xlYXJGaWx0ZXJDb21wXCI7XG5pbXBvcnQgVGFibGVTZWFyY2hDb21wIGZyb20gXCIuL1RhYmxlU2VhcmNoQ29tcFwiO1xuaW1wb3J0IERvd25sb2FkQ29tcCBmcm9tICcuL0Rvd25sb2FkQ29tcCc7XG5cbnJlcXVpcmUoXCJmaXhlZC1kYXRhLXRhYmxlLTIvZGlzdC9maXhlZC1kYXRhLXRhYmxlLmNzc1wiKTtcbnJlcXVpcmUoXCIuLi9kYXRhdGFibGUuc2Nzc1wiKTtcblxuY2xhc3MgVGFibGVDb21wIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuYmluZGluZ0Z1bmN0aW9ucygpO1xuICAgICAgICB0aGlzLnNlcnZpY2UgPSBuZXcgVGFibGVTZXJ2aWNlKCk7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBTKHRoaXMucHJvcHMuYXBwSWQpO1xuICAgICAgICB0aGlzLnRhYmxlQ29uZmlnID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZztcbiAgICAgICAgdGhpcy5wYWdlID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnBhZ2U7XG4gICAgICAgIHRoaXMuYXV0b1Njcm9sbGluZyA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBjb2x1bW5XaWR0aHMgPSB7fTtcbiAgICAgICAgdGhpcy50YWJsZUNvbmZpZy5jb2x1bW5zLmZvckVhY2goY29sdW1uID0+IHtcbiAgICAgICAgICAgIGNvbHVtbldpZHRoc1tjb2x1bW4ua2V5XSA9IGNvbHVtbi53aWR0aDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGRhdGFMaXN0OiB0aGlzLnN0b3JlLmdldFN0YXRlKCkuZGF0YUxpc3QsXG4gICAgICAgICAgICBjb2x1bW5zOiB0aGlzLnRhYmxlQ29uZmlnLmNvbHVtbnMsXG4gICAgICAgICAgICB3aWR0aDogdGhpcy50YWJsZUNvbmZpZy53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy50YWJsZUNvbmZpZy5oZWlnaHQsXG4gICAgICAgICAgICBjb2x1bW5XaWR0aHM6IGNvbHVtbldpZHRocyxcbiAgICAgICAgICAgIGNvbmZpZzogdGhpcy50YWJsZUNvbmZpZyxcbiAgICAgICAgICAgIC8vdGhlIGRlZmF1bHQgb3JkZXIgc2hvdWxkIGJlIGJhc2VkIG9uIHByZXNhdmVkIHZzIGRlZmF1bHRcbiAgICAgICAgICAgIGNvbHVtbnNPcmRlcjogdGhpcy5zZXJ2aWNlLmdldENvbHVtbnNPcmRlckZyb21TdGF0ZSh0aGlzLnN0b3JlLmdldFN0YXRlKCkpLFxuICAgICAgICAgICAgY29sbGFwc2VkUm93czogbmV3IFNldCgpLFxuICAgICAgICAgICAgZXhwYW5kZWRSb3dzOiBuZXcgU2V0KCksXG4gICAgICAgICAgICBzZWxlY3RBbGxMZXZlbDogMCxcbiAgICAgICAgICAgIHNjcm9sbFRvUm93OiB0aGlzLnByb3BzLnNjcm9sbFRvUm93LFxuICAgICAgICAgICAgc2Nyb2xsVG9wOiB0aGlzLl9nZXRTY3JvbGxUb3BWYWx1ZSh0aGlzLnByb3BzLnNjcm9sbFRvUm93KVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMudW5TdWJzY3JpYmVDb25maWcgPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuQ09ORklHX1VQREFURSwgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHN0YXRlT2JqID0ge307XG4gICAgICAgICAgICBzdGF0ZU9ialtcImNvbmZpZ1wiXSA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWc7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHN0YXRlT2JqKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy51blN1YnNjcmliZURhdGEgPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuREFUQV9VUERBVEVELCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgc3RhdGVPYmogPSB7fTtcbiAgICAgICAgICAgIHN0YXRlT2JqW1wiZGF0YUxpc3RcIl0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkuZGF0YUxpc3Q7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHN0YXRlT2JqKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy51blN1YnNjcmliZUNlbGxEYXRhID0gdGhpcy5zdG9yZS5zdWJzY3JpYmVUbyh0aGlzLnN0b3JlLkNFTExfREFUQV9VUERBVEVELCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgc3RhdGVPYmogPSB7fTtcbiAgICAgICAgICAgIHN0YXRlT2JqW1wiZGF0YUxpc3RcIl0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkuZGF0YUxpc3Q7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHN0YXRlT2JqKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy51blN1YnNjcmliZVJlc2l6aW5nID0gdGhpcy5zdG9yZS5zdWJzY3JpYmVUbyh0aGlzLnN0b3JlLlJFU0laSU5HLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgc3RhdGVPYmogPSB7fTtcbiAgICAgICAgICAgIHN0YXRlT2JqW1wid2lkdGhcIl0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkud2lkdGg7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHN0YXRlT2JqKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudW5TdWJzY3JpYmVDb2x1bW5IaWRkZW4gPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuU0VUX0NPTFVNTlNfSElEREVOLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgc3RhdGVPYmogPSB7fTtcbiAgICAgICAgICAgIHN0YXRlT2JqW1wiY29uZmlnXCJdID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZztcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGVPYmopO1xuICAgICAgICAgICAgdGhpcy5fY3VzdG9tZXJDb25maWdVcGRhdGUobnVsbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudW5TdWJzY3JpYmVyU2VsZWN0QWxsTGV2ZWwgPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuU0VMRUNUX0FMTF9MRVZFTCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25TZWxlY3RBbGxMZXZlbCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnVuU3Vic2NyaWJlU2Nyb2xsVG8gPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuR09UT19TQ1JPTExfUE9TSVRJT04sICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXV0b1Njcm9sbGluZyA9IHRydWU7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy5hdXRvU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9LCAyMDAwKTtcbiAgICAgICAgICAgIHRoaXMuX3Njcm9sbFRvKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9nZXRTY3JvbGxUb3BWYWx1ZShyb3dJbmRleCl7XG4gICAgICAgIGxldCB2YWx1ZSA9IHJvd0luZGV4KnRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWcucm93SGVpZ2h0O1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy93ZSBtdXN0IHVuc3Vic2NyaWJlIHRvIGF2b2lkIG1lbW9yeSBsZWFrIGhlcmVcbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy51blN1YnNjcmliZURhdGEoKTtcbiAgICAgICAgdGhpcy51blN1YnNjcmliZVJlc2l6aW5nKCk7XG4gICAgICAgIHRoaXMudW5TdWJzY3JpYmVDb2x1bW5IaWRkZW4oKTtcbiAgICAgICAgdGhpcy51blN1YnNjcmliZVRoZW1lVXBkYXRlKCk7XG4gICAgICAgIHRoaXMudW5TdWJzY3JpYmVDZWxsRGF0YSgpO1xuICAgICAgICB0aGlzLnVuU3Vic2NyaWJlclNlbGVjdEFsbExldmVsKCk7XG4gICAgICAgIHRoaXMudW5TdWJzY3JpYmVDb25maWcoKTtcbiAgICAgICAgdGhpcy51blN1YnNjcmliZVNjcm9sbFRvKCk7XG4gICAgfVxuXG4gICAgYmluZGluZ0Z1bmN0aW9ucygpIHtcbiAgICAgICAgdGhpcy5fb25Db2x1bW5SZXNpemVFbmRDYWxsYmFjayA9IHRoaXMuX29uQ29sdW1uUmVzaXplRW5kQ2FsbGJhY2suYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fb25Db2x1bW5SZW9yZGVyRW5kQ2FsbGJhY2sgPSB0aGlzLl9vbkNvbHVtblJlb3JkZXJFbmRDYWxsYmFjay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9oYW5kbGVDb2xsYXBzZUNsaWNrID0gdGhpcy5faGFuZGxlQ29sbGFwc2VDbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9zdWJSb3dIZWlnaHRHZXR0ZXIgPSB0aGlzLl9zdWJSb3dIZWlnaHRHZXR0ZXIuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fcm93RXhwYW5kZWRHZXR0ZXIgPSB0aGlzLl9yb3dFeHBhbmRlZEdldHRlci5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9vblNjcm9sbEVuZENhbGxCYWNrID0gdGhpcy5fb25TY3JvbGxFbmRDYWxsQmFjay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uT3JkZXJDaGFuZ2VkID0gdGhpcy5vbk9yZGVyQ2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9vblJvd0NsaWNrID0gdGhpcy5fb25Sb3dDbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9yb3dDbGFzc05hbWVHZXR0ZXIgPSB0aGlzLl9yb3dDbGFzc05hbWVHZXR0ZXIuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5yb3dIZWlnaHRHZXR0ZXIgPSB0aGlzLnJvd0hlaWdodEdldHRlci5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9oYW5kbGVDb2xsYXBzZUFsbENsaWNrID0gdGhpcy5faGFuZGxlQ29sbGFwc2VBbGxDbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9vblNlbGVjdEFsbExldmVsID0gdGhpcy5fb25TZWxlY3RBbGxMZXZlbC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9zY3JvbGxUbyA9IHRoaXMuX3Njcm9sbFRvLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgX3Njcm9sbFRvKCl7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2Nyb2xsVG9wOiB0aGlzLl9nZXRTY3JvbGxUb3BWYWx1ZSh0aGlzLnN0b3JlLmdldFN0YXRlKCkuc2Nyb2xsUG9zaXRpb25bMV0pXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfb25TZWxlY3RBbGxMZXZlbCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzZWxlY3RBbGxMZXZlbDogdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLnNlbGVjdEFsbExldmVsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfY3VzdG9tZXJDb25maWdVcGRhdGUobmV3Q29sdW1uT3JkZXIpIHtcbiAgICAgICAgLy9ub3csIHdlIG5lZWQgdG8gZGlzcGF0Y2ggdGhpcyBzbyB0aGF0IGl0IGNhbiBiZSBzYXZlZCBpbiBiYWNrZW5kIGRiXG4gICAgICAgIGxldCBjdXN0b21Db25maWcgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkuY3VzdG9tQ29uZmlnO1xuICAgICAgICAvL3NldCBuZXcgY29sdW1uc09yZGVyXG4gICAgICAgIGlmIChuZXdDb2x1bW5PcmRlcikgY3VzdG9tQ29uZmlnLnNldENvbHVtbnNPcmRlcihuZXdDb2x1bW5PcmRlcik7XG4gICAgICAgIC8vc2V0IGhpZGRlbkNvbHVtbnNcbiAgICAgICAgY3VzdG9tQ29uZmlnLnNldEhpZGRlbkNvbHVtbnModGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZy5nZXRIaWRkZW5Db2x1bW5LZXlzKCkpO1xuICAgICAgICAvL25vdyBkaXNwYXRjaEV2ZW50XG4gICAgICAgIHRoaXMuc3RvcmUuc2V0Q3VzdG9tQ29uZmlnKGN1c3RvbUNvbmZpZyk7XG4gICAgfVxuXG4gICAgX29uQ29sdW1uUmVzaXplRW5kQ2FsbGJhY2sobmV3Q29sdW1uV2lkdGgsIGNvbHVtbktleSkge1xuICAgICAgICBsZXQgY29sdW1uV2lkdGhzID0gdGhpcy5zdGF0ZS5jb2x1bW5XaWR0aHM7XG4gICAgICAgIGNvbHVtbldpZHRoc1tjb2x1bW5LZXldID0gbmV3Q29sdW1uV2lkdGg7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBjb2x1bW5XaWR0aHM6IGNvbHVtbldpZHRocyB9KTtcblxuICAgICAgICBsZXQgY3VzdG9tQ29uZmlnID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmN1c3RvbUNvbmZpZztcbiAgICAgICAgY3VzdG9tQ29uZmlnLnNldENvbHVtbldpZHRocyhjb2x1bW5XaWR0aHMpO1xuICAgICAgICAvL25vdyBkaXNwYXRjaEV2ZW50XG4gICAgICAgIHRoaXMuc3RvcmUuc2V0Q3VzdG9tQ29uZmlnKGN1c3RvbUNvbmZpZyk7XG4gICAgfVxuICAgIG9uT3JkZXJDaGFuZ2VkKG5ld09yZGVyKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY29sdW1uc09yZGVyOiBuZXdPcmRlclxuICAgICAgICB9KTtcbiAgICAgICAgLy93ZSBuZWVkIHRvIG5ldyB1cGRhdGUgY3VzdG9tZXIgQ29uZmlnIGFuZCBkaXNwYXRjaCBldmVudCFcbiAgICAgICAgdGhpcy5fY3VzdG9tZXJDb25maWdVcGRhdGUobmV3T3JkZXIpO1xuICAgIH1cbiAgICBfb25Db2x1bW5SZW9yZGVyRW5kQ2FsbGJhY2soZXZlbnQpIHtcbiAgICAgICAgbGV0IG5ld0NvbHNPcmRlciA9IHRoaXMuc2VydmljZS5nZXROZXdDb2x1bW5PcmRlcihcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuY29sdW1uc09yZGVyLFxuICAgICAgICAgICAgZXZlbnQucmVvcmRlckNvbHVtbixcbiAgICAgICAgICAgIGV2ZW50LmNvbHVtbkFmdGVyXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMub25PcmRlckNoYW5nZWQobmV3Q29sc09yZGVyKTtcbiAgICB9XG5cbiAgICBfaGFuZGxlQ29sbGFwc2VDbGljayhyb3dJbmRleCkge1xuICAgICAgICBjb25zdCB7IGNvbGxhcHNlZFJvd3MgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGNvbnN0IHNoYWxsb3dDb3B5T2ZDb2xsYXBzZWRSb3dzID0gbmV3IFNldChbLi4uY29sbGFwc2VkUm93c10pO1xuICAgICAgICBsZXQgc2Nyb2xsVG9Sb3cgPSByb3dJbmRleDtcbiAgICAgICAgaWYgKHNoYWxsb3dDb3B5T2ZDb2xsYXBzZWRSb3dzLmhhcyhyb3dJbmRleCkpIHtcbiAgICAgICAgICAgIHNoYWxsb3dDb3B5T2ZDb2xsYXBzZWRSb3dzLmRlbGV0ZShyb3dJbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaGFsbG93Q29weU9mQ29sbGFwc2VkUm93cy5hZGQocm93SW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjb2xsYXBzZWRSb3dzOiBzaGFsbG93Q29weU9mQ29sbGFwc2VkUm93c1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfc3ViUm93SGVpZ2h0R2V0dGVyKGluZGV4KSB7XG4gICAgICAgIC8vdGhpcyBpcyBmb3Igc3ViUm93IG9ubHkgLSBjb2xsYXBzZWRSb3dcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuY29uZmlnLnJvd0NvbGxhcHNlYWJsZSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmNvbGxhcHNlZFJvd3MuaGFzKGluZGV4KSA/IHRoaXMuc3RhdGUuY29uZmlnLmNvbGxhcHNlUm93SGVpZ2h0IDogMDtcbiAgICAgICAgZWxzZSByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBfcm93RXhwYW5kZWRHZXR0ZXIoeyByb3dJbmRleCwgd2lkdGgsIGhlaWdodCB9KSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmNvbmZpZy5yb3dDb2xsYXBzZWFibGUpIHtcbiAgICAgICAgICAgIC8vb25seSBmb3IgY29sbGFwc2VkIHJvdywgbm90IGZvciBleHBhbmRlZCByb3dzXG4gICAgICAgICAgICBpZiAoIXRoaXMuc3RhdGUuY29sbGFwc2VkUm93cy5oYXMocm93SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5vblJvd0V4cGFuZGVkQ29udGVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLm9uUm93RXhwYW5kZWRDb250ZW50KFxuICAgICAgICAgICAgICAgICAgICByb3dJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXJ2aWNlLmdldFJvd0tleVZhbEZyb21JbmRleChyb3dJbmRleCwgdGhpcy5zdG9yZS5nZXRTdGF0ZSgpKSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByb3dIZWlnaHRHZXR0ZXIocm93SW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuY29uZmlnLnJvd0V4cGFuZGFibGUgJiYgdGhpcy5zdGF0ZS5jb2xsYXBzZWRSb3dzLmhhcyhyb3dJbmRleCkpIHtcbiAgICAgICAgICAgIC8vaGVyZSB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSB0aGUgaGlnaGVzdCBjZWxsc1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VydmljZS5nZXRSb3dBY3R1YWxIZWlnaHQoXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5jb2x1bW5XaWR0aHMsXG4gICAgICAgICAgICAgICAgcm93SW5kZXgsXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5kYXRhTGlzdCxcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmNvbmZpZy5yb3dIZWlnaHQsXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5jb25maWdcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5jb25maWcucm93SGVpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuICAgIF9vblNjcm9sbEVuZENhbGxCYWNrKHNjcm9sbFgsIHNjcm9sbFkpIHtcblxuICAgICAgICBpZih0aGlzLmF1dG9TY3JvbGxpbmcpIHJldHVybjtcblxuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuY29uZmlnLmVuYWJsZVBhZ2luYXRvcikge1xuICAgICAgICAgICAgdmFyIHRvdGFsSGVpZ2h0ID0gdGhpcy5zdGF0ZS5jb25maWcucm93SGVpZ2h0ICogKHRoaXMuc3RhdGUuZGF0YUxpc3QubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsWSArIHRoaXMuc3RhdGUuY29uZmlnLmhlaWdodCA+PSB0b3RhbEhlaWdodCAmJiB0aGlzLnByb3BzLm9uTmV4dFBhZ2VIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgLy9ub3cgdXBkYXRlIHBhZ2UgY29uZmlnXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlLm5leHQoKTtcbiAgICAgICAgICAgICAgICAvL2lmIHdlIGhhdmUgYWxsIHRoZSBkYXRhIGluIGRhdGFMaXN0LCBubyBuZWVkIHRvIHRyaWdnZXIgYW55bW9yZVxuICAgICAgICAgICAgICAgIGlmIChcIm9uTmV4dFBhZ2VIYW5kbGVyXCIgaW4gdGhpcy5wcm9wcyAmJiB0aGlzLnN0YXRlLmRhdGFMaXN0Lmxlbmd0aCA8IHRoaXMucGFnZS50b3RhbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uTmV4dFBhZ2VIYW5kbGVyKHRoaXMucGFnZS5jdXJyZW50UGFnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vaGVyZSwgd2UgYXJlIGNvbnZlcnRpbmcgc2Nyb2xsWSB0byBzZWxlY3RlZFJvd0luZGV4LCBzbyBhcyB0byByZS11c2UgdGhlIHNjcm9sbFRvUm93IGNvbnRyb2xsZXJcbiAgICAgICAgdGhpcy5zdG9yZS5zY3JvbGxQb3NpdGlvblVwZGF0ZWQoc2Nyb2xsWCwgKHNjcm9sbFkpL3RoaXMuc3RhdGUuY29uZmlnLnJvd0hlaWdodCk7XG4gICAgfVxuXG4gICAgX29uUm93Q2xpY2soZSwgcm93SW5kZXgpIHtcbiAgICAgICAgLy93aGVuIGRlY291cGxpbmcgY2hlY2tib3ggYW5kIHJvdywgd2UgYWx3YXlzIGVuZm9yY2Ugc2luZ2xlIHJvdyBzZWxlY3RcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuY29uZmlnLmRlQ291cGxlUm93U2VsZWN0QW5kQ2hlY2tib3gpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmUudG9nZ2xlU2luZ2xlUm93U2VsZWN0ZWQocm93SW5kZXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9oZXJlLCB3ZSBtdXN0IHByZXZlbnQgZG91YmxlIHRyaWdnZXIsIGFzIGNoZWNrQm94IGNsaWNrIGFsc28gZGlzcGF0Y2ggZXZlbnRzXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRDaGVja2JveCA9IGUudGFyZ2V0LmNsYXNzTmFtZS5pbmNsdWRlcyhcIm1kbC1jaGVja2JveFwiKTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldFJhZGlvID0gZS50YXJnZXQuY2xhc3NOYW1lLmluY2x1ZGVzKFwibWRsLXJhZGlvXCIpO1xuICAgICAgICAgICAgaWYgKCh0aGlzLnN0YXRlLmNvbmZpZy5lbmFibGVDaGVja0JveCAmJiAhdGFyZ2V0Q2hlY2tib3gpXG4gICAgICAgICAgICAgICAgfHwgKHRoaXMuc3RhdGUuY29uZmlnLmVuYWJsZVJhZGlvQnV0dG9uICYmICF0YXJnZXRSYWRpbykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JlLnRvZ2dsZVJvd1NlbGVjdGVkKHJvd0luZGV4KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5jb25maWcuc2luZ2xlUm93VG9nZ2xlYWJsZSAmJiAhdGFyZ2V0Q2hlY2tib3ggJiYgIXRhcmdldFJhZGlvKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9yZS50b2dnbGVTaW5nbGVSb3dTZWxlY3RlZChyb3dJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJyZXNpemVcIikpO1xuICAgICAgICB9LCAwKTtcbiAgICB9XG5cbiAgICBfcm93Q2xhc3NOYW1lR2V0dGVyKHJvd0luZGV4KSB7XG5cbiAgICAgICAgbGV0IHJvd0NsYXNzTmFtZXMgPSBbXTtcblxuICAgICAgICBpZiAoJ29uUm93Q2xhc3NOYW1lR2V0dGVyJyBpbiB0aGlzLnByb3BzKSB7XG4gICAgICAgICAgICAvL2hlcmUsd2UgbmVlZCB0byBwYXNzIGJhY2sga2V5IGNvbHVtbiB2YWx1ZSwgbm90IHJvd0luZGV4LCBhcyBpdCBpcyBhbHdheXMgY2hhbmdpbmdcbiAgICAgICAgICAgIHJvd0NsYXNzTmFtZXMucHVzaCh0aGlzLnByb3BzLm9uUm93Q2xhc3NOYW1lR2V0dGVyKFxuICAgICAgICAgICAgICAgIHRoaXMuc2VydmljZS5nZXRSb3dLZXlWYWxGcm9tSW5kZXgocm93SW5kZXgsIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKSlcbiAgICAgICAgICAgICkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuY29uZmlnLnNpbmdsZVJvd1RvZ2dsZWFibGUgfHwgdGhpcy5zdGF0ZS5jb25maWcuZW5hYmxlQ2hlY2tCb3ggfHwgdGhpcy5zdGF0ZS5jb25maWcuZW5hYmxlUmFkaW9CdXR0b24pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNlcnZpY2UuaXNSb3dTZWxlY3RlZChyb3dJbmRleCwgdGhpcy5zdG9yZS5nZXRTdGF0ZSgpKSkge1xuICAgICAgICAgICAgICAgIHJvd0NsYXNzTmFtZXMucHVzaCgodGhpcy5zdGF0ZS5jb25maWcudGhlbWUgPyB0aGlzLnN0YXRlLmNvbmZpZy50aGVtZSA6IFwiXCIpICsgXCJyb3dTZWxlY3RlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByb3dDbGFzc05hbWVzLmpvaW4oJyAnKTtcbiAgICB9XG5cbiAgICBfaGFuZGxlQ29sbGFwc2VBbGxDbGljayhvcGVuKSB7XG4gICAgICAgIGxldCByb3dJbmRleGVzID0gbmV3IFNldCgpO1xuICAgICAgICBpZiAob3BlbilcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGF0ZS5kYXRhTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHJvd0luZGV4ZXMuYWRkKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGNvbGxhcHNlZFJvd3M6IHJvd0luZGV4ZXNcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgY2hlY2tDb2x1bW4gPSBudWxsO1xuICAgICAgICBsZXQgY29sbGFwc2VDb2x1bW4gPSBudWxsO1xuICAgICAgICBsZXQgZXhwYW5kYWJsZUNvbHVtbiA9IG51bGw7XG4gICAgICAgIGxldCBjb250cm9sbGVyQ29sdW1uID0gbnVsbDtcbiAgICAgICAgbGV0IG5hdmlnYXRlQ29sdW1uID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5jb25maWcubmF2aWdhdGVhYmxlKSB7XG4gICAgICAgICAgICBuYXZpZ2F0ZUNvbHVtbiA9IChcbiAgICAgICAgICAgICAgICA8Q29sdW1uXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPXs1MH1cbiAgICAgICAgICAgICAgICAgICAgZml4ZWRSaWdodD17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgY2VsbD17PE5hdmlnYXRlQ2VsbCB7Li4udGhpcy5wcm9wc30gZGF0YUxpc3Q9e3RoaXMuc3RhdGUuZGF0YUxpc3R9IC8+fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuY29uZmlnLmVuYWJsZUNoZWNrQm94KSB7XG4gICAgICAgICAgICBjaGVja0NvbHVtbiA9IChcbiAgICAgICAgICAgICAgICA8Q29sdW1uXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoPXszNX1cbiAgICAgICAgICAgICAgICAgICAgZml4ZWQ9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcj17PENvbHVtbkhlYWRlckNoZWNrQm94Q2VsbCBhcHBJZD17dGhpcy5wcm9wcy5hcHBJZH0gLz59XG4gICAgICAgICAgICAgICAgICAgIGNlbGw9ezxDb2x1bW5DaGVja0JveENlbGwgey4uLnRoaXMucHJvcHN9IGRhdGFMaXN0PXt0aGlzLnN0YXRlLmRhdGFMaXN0fSAvPn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmNvbmZpZy5lbmFibGVSYWRpb0J1dHRvbikge1xuICAgICAgICAgICAgY2hlY2tDb2x1bW4gPSAoXG4gICAgICAgICAgICAgICAgPENvbHVtblxuICAgICAgICAgICAgICAgICAgICB3aWR0aD17MzV9XG4gICAgICAgICAgICAgICAgICAgIGZpeGVkPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICBjZWxsPXs8Q29sdW1uUmFkaW9CdXR0b25DZWxsIHsuLi50aGlzLnByb3BzfSBkYXRhTGlzdD17dGhpcy5zdGF0ZS5kYXRhTGlzdH0gLz59XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2V4cGFuZGFibGUgaXMgaGF2aW5nIGhpZ2ggcHJpb3JpdHkgdGhhbiBjb2xsYXBzZWFibGVcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuY29uZmlnLnJvd0NvbGxhcHNlYWJsZSB8fCB0aGlzLnN0YXRlLmNvbmZpZy5yb3dFeHBhbmRhYmxlKSB7XG4gICAgICAgICAgICBjb2xsYXBzZUNvbHVtbiA9IChcbiAgICAgICAgICAgICAgICA8Q29sdW1uXG4gICAgICAgICAgICAgICAgICAgIGNlbGw9e1xuICAgICAgICAgICAgICAgICAgICAgICAgPENvbGxhcHNlQ2VsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrPXt0aGlzLl9oYW5kbGVDb2xsYXBzZUNsaWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlZFJvd3M9e3RoaXMuc3RhdGUuY29sbGFwc2VkUm93c31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhTGlzdD17dGhpcy5zdGF0ZS5kYXRhTGlzdH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyPXs8Q29sbGFwc2VIZWFkZXJDZWxsIHsuLi50aGlzLnByb3BzfSBjYWxsYmFjaz17dGhpcy5faGFuZGxlQ29sbGFwc2VBbGxDbGlja30gLz59XG4gICAgICAgICAgICAgICAgICAgIGZpeGVkPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICB3aWR0aD17MzV9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YWJsZVdyYXBwZXJcIiBzdHlsZT17eyBoZWlnaHQ6IDYwICsgdGhpcy5zdGF0ZS5oZWlnaHQgfX0+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YWJsZUhlYWRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YWJsZUhlYWRlckhlYWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmNvbmZpZy50b3RhbFRpdGxlICYmIDxkaXYgY2xhc3NOYW1lPSd0b3RhbFRpdGxlJz57dGhpcy5zdGF0ZS5jb25maWcudG90YWxUaXRsZX08L2Rpdj59XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhYmxlSGVhZGVyVGFpbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuY29uZmlnLmRvd25sb2FkYWJsZSAmJiA8RG93bmxvYWRDb21wIHsuLi50aGlzLnByb3BzfSAvPn1cbiAgICAgICAgICAgICAgICAgICAgICAgIHsgKCF0aGlzLnN0YXRlLmNvbmZpZy5nbG9iYWwgfHwgdGhpcy5zdGF0ZS5jb25maWcuZW5mb3JjZVJlc2V0RmlsdGVyQnRuKSAmJiA8Q2xlYXJGaWx0ZXJDb21wIHsuLi50aGlzLnByb3BzfSAvPn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxQYWdpbmF0b3JDb21wb25lbnQgey4uLnRoaXMucHJvcHN9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5jb25maWcudGFibGVTZWFyY2ggJiYgPFRhYmxlU2VhcmNoQ29tcCB7Li4udGhpcy5wcm9wc30gLz59XG4gICAgICAgICAgICAgICAgICAgICAgICB7IXRoaXMuc3RhdGUuY29uZmlnLmhpZGVTZXR0aW5nICYmIDxTZXR0aW5nQ29tcCB7Li4udGhpcy5wcm9wc30gb25PcmRlckNoYW5nZWQ9e3RoaXMub25PcmRlckNoYW5nZWR9IC8+fVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5jb25maWcuZW5hYmxlQWxsR2xvYmFsU2VsZWN0b3IgJiYgPFNlbGVjdEFsbEluZGljYXRvckNvbXBvbmVudCB7Li4udGhpcy5wcm9wc30gLz59XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e0NsYXNzTmFtZXMoe1xuICAgICAgICAgICAgICAgICAgICB0YWJsZUJvZHk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGxpc3RWaWV3OiB0aGlzLnN0YXRlLmNvbmZpZy5saXN0VmlldyxcbiAgICAgICAgICAgICAgICAgICAgdGFibGVHbG9iYWxBbGw6IHRoaXMuc3RhdGUuc2VsZWN0QWxsTGV2ZWwgPiAwXG4gICAgICAgICAgICAgICAgfSl9PlxuICAgICAgICAgICAgICAgICAgICA8VGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0hlaWdodD17dGhpcy5zdGF0ZS5jb25maWcucm93SGVpZ2h0fVxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVySGVpZ2h0PXt0aGlzLnN0YXRlLmNvbmZpZy5oZWFkZXJIZWlnaHR9XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzQ291bnQ9e3RoaXMuc3RhdGUuZGF0YUxpc3QubGVuZ3RofVxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9e3RoaXMuc3RhdGUud2lkdGh9XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9e3RoaXMuc3RhdGUuaGVpZ2h0fVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNDb2x1bW5SZXNpemluZz17ZmFsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNvbHVtblJlc2l6ZUVuZENhbGxiYWNrPXt0aGlzLl9vbkNvbHVtblJlc2l6ZUVuZENhbGxiYWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNDb2x1bW5SZW9yZGVyaW5nPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ29sdW1uUmVvcmRlckVuZENhbGxiYWNrPXt0aGlzLl9vbkNvbHVtblJlb3JkZXJFbmRDYWxsYmFja31cbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YlJvd0hlaWdodEdldHRlcj17dGhpcy5fc3ViUm93SGVpZ2h0R2V0dGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgcm93RXhwYW5kZWQ9e3RoaXMuX3Jvd0V4cGFuZGVkR2V0dGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25Sb3dDbGljaz17dGhpcy5fb25Sb3dDbGlja31cbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0NsYXNzTmFtZUdldHRlcj17dGhpcy5fcm93Q2xhc3NOYW1lR2V0dGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25TY3JvbGxFbmQ9e3RoaXMuX29uU2Nyb2xsRW5kQ2FsbEJhY2t9XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dIZWlnaHRHZXR0ZXI9e3RoaXMucm93SGVpZ2h0R2V0dGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9wID0ge3RoaXMuc3RhdGUuc2Nyb2xsVG9wfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7Y29sbGFwc2VDb2x1bW59XG4gICAgICAgICAgICAgICAgICAgICAgICB7Y2hlY2tDb2x1bW59XG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5jb2x1bW5zT3JkZXIubWFwKChjb2x1bW5LZXksIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIGNvbHVtbiBpcyBoaWRkZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29sdW1uQ29uZmlnID0gdGhpcy5zdGF0ZS5jb25maWcuZ2V0Q29sdW1uQ29uZmlnKGNvbHVtbktleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuY29uZmlnLmNvbHVtbkhpZGRlbihjb2x1bW5LZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sdW1uQ29uZmlnLnR5cGUgPT09IFRZUEVfU0lOR0xFX1NFTEVDVF9BQ1RJT05TKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcHV0IGhlcmUgdG8gZ3VhcmFudGVlIHRoZSByb3dJbmRleCBpbnRvIHRoZSBjZWxsIHNvIGFzIHRvIGF2b2lkIHRoZSByZWN5Y2xpbmcgY2VsbHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1Jlb3JkZXJhYmxlPXtjb2x1bW5Db25maWcucmVvcmRhYmxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbktleT17Y29sdW1uS2V5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17aSArIE1hdGgucmFuZG9tKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyPXs8SGVhZGVyQ2VsbCB7Li4udGhpcy5wcm9wc30gY29sdW1uS2V5PXtjb2x1bW5LZXl9IC8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGw9ezxTaW5nbGVTZWxlY3RBY3Rpb25DZWxsIHsuLi50aGlzLnByb3BzfSBjb2x1bW5LZXk9e2NvbHVtbktleX0gLz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZml4ZWRSaWdodD17Y29sdW1uQ29uZmlnLmZpeGVkUmlnaHR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9e3RoaXMuc3RhdGUuY29sdW1uV2lkdGhzW2NvbHVtbktleV19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNSZXNpemFibGU9e2NvbHVtbkNvbmZpZy5yZXNpemFibGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleEdyb3c9e2NvbHVtbkNvbmZpZy5mbGV4R3Jvd31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXhlZD17Y29sdW1uQ29uZmlnLmZpeGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbldpZHRoPXtjb2x1bW5Db25maWcubWluV2lkdGh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVvcmRlcmFibGU9e2NvbHVtbkNvbmZpZy5yZW9yZGFibGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uS2V5PXtjb2x1bW5LZXl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpICsgTWF0aC5yYW5kb20oKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXI9ezxIZWFkZXJDZWxsIHsuLi50aGlzLnByb3BzfSBjb2x1bW5LZXk9e2NvbHVtbktleX0gLz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbD17XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDZWxsV3JhcHBlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5LZXk9e2NvbHVtbktleX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFMaXN0PXt0aGlzLnN0YXRlLmRhdGFMaXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VkUm93cz17dGhpcy5zdGF0ZS5jb2xsYXBzZWRSb3dzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXhlZFJpZ2h0PXt0aGlzLnN0YXRlLmNvbmZpZy5nZXRDb2x1bW5Db25maWcoY29sdW1uS2V5KS5maXhlZFJpZ2h0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPXt0aGlzLnN0YXRlLmNvbHVtbldpZHRoc1tjb2x1bW5LZXldfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVzaXphYmxlPXt0aGlzLnN0YXRlLmNvbmZpZy5nZXRDb2x1bW5Db25maWcoY29sdW1uS2V5KS5yZXNpemFibGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleEdyb3c9e3RoaXMuc3RhdGUuY29uZmlnLmdldENvbHVtbkNvbmZpZyhjb2x1bW5LZXkpLmZsZXhHcm93fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpeGVkPXt0aGlzLnN0YXRlLmNvbmZpZy5nZXRDb2x1bW5Db25maWcoY29sdW1uS2V5KS5maXhlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHtjb250cm9sbGVyQ29sdW1ufVxuICAgICAgICAgICAgICAgICAgICAgICAge25hdmlnYXRlQ29sdW1ufVxuICAgICAgICAgICAgICAgICAgICA8L1RhYmxlPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgVGFibGVDb21wO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHV0aWwgZnJvbSBcIi4uLy4uL2NvbW1vbi91dGlsc1wiO1xuaW1wb3J0IFMgZnJvbSBcIi4uL3JlZHV4L3N0b3JlXCI7XG5pbXBvcnQgQ2xhc3NOYW1lcyBmcm9tIFwiY2xhc3NuYW1lc1wiO1xuXG5jbGFzcyBUYWJsZVNlYXJjaENvbXAgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnVwZGF0ZSA9IHRoaXMudXBkYXRlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25Gb2N1cyA9IHRoaXMub25Gb2N1cy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uQmx1ciA9IHRoaXMub25CbHVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBmb2N1c2VkOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH1cbiAgICB1cGRhdGUoZSkge1xuICAgICAgICB0aGlzLnRleHQgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgICAgdXRpbC5fZGVib3VuY2UoKCkgPT4ge1xuICAgICAgICAgICAgUyh0aGlzLnByb3BzLmFwcElkKS5zZXRHbG9iYWxTZWFyY2hUZXJtKHRoaXMudGV4dCk7XG4gICAgICAgIH0sIDQwMCk7XG4gICAgfVxuICAgIG9uRm9jdXMoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZm9jdXNlZDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgb25CbHVyKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGZvY3VzZWQ6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Q2xhc3NOYW1lcyh7dGFibGVTZWFyY2hXcmFwcGVyOiB0cnVlLCBmb2N1c2VkOiB0aGlzLnN0YXRlLmZvY3VzZWQgfSl9PlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiU2VhcmNoXCJcbiAgICAgICAgICAgICAgICAgICAgICAgb25Gb2N1cz17dGhpcy5vbkZvY3VzfSBvbkJsdXI9e3RoaXMub25CbHVyfVxuICAgICAgICAgICAgICAgICAgICAgICBvbktleVVwPXt0aGlzLnVwZGF0ZX0gb25QYXN0ZT17dGhpcy51cGRhdGV9IC8+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwibWF0ZXJpYWwtaWNvbnNcIj5zZWFyY2g8L2k+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBUYWJsZVNlYXJjaENvbXA7XG4iLCJpbXBvcnQgeyBDZWxsIH0gZnJvbSBcImZpeGVkLWRhdGEtdGFibGUtMlwiO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFMgZnJvbSBcIi4uLy4uL3JlZHV4L3N0b3JlXCI7XG4vLyBpbXBvcnQgeyBDaGVja2JveCwgUmFkaW8gfSBmcm9tIFwicmVhY3QtbWRsXCI7XG5pbXBvcnQgVGFibGVTZXJ2aWNlIGZyb20gXCIuLi8uLi9zZXJ2aWNlcy90YWJsZV9zZXJ2aWNlXCI7XG5pbXBvcnQgTW9yZU9wdGlvbkl0ZW1zIGZyb20gXCIuLi8uLi9lbnRpdGllcy9tb3JlX29wdGlvblwiO1xuaW1wb3J0IHtcbiAgICBUWVBFX1RFWFQsXG4gICAgVFlQRV9QVVJFX1RFWFQsXG4gICAgVFlQRV9IVE1MLFxuICAgIFRZUEVfVE9PTFRJUF9URVhULFxuICAgIFRZUEVfU0lOR0xFX1NFTEVDVF9BQ1RJT05TLFxuICAgIFRZUEVfSUNPTl9DQUxMX0JBQ0ssXG4gICAgVFlQRV9MSVNULFxuICAgIFRZUEVfTlVNQkVSLFxuICAgIFRZUEVfQ0xJQ0tBQkxFLFxuICAgIFRZUEVfSFRNTF9MSVNULFxuICAgIFRZUEVfTU9SRV9PUFRJT05TLFxuICAgIFRZUEVfREFURSxcbiAgICBUWVBFX0RBVEVUSU1FLFxuICAgIFRZUEVfUFVSRV9DTElDS0FCTEVcbn0gZnJvbSBcIi4uLy4uL2VudGl0aWVzL2NvbHVtblwiO1xuaW1wb3J0IENsYXNzTmFtZXMgZnJvbSBcImNsYXNzbmFtZXNcIjtcbmltcG9ydCB7IEJvdW5kZWRUZXRoZXJDb21wIH0gZnJvbSBcIi4uL0JvdW5kZWRUZXRoZXJDb21wXCI7XG5cbnJlcXVpcmUoXCIuLi8uLi9kYXRhdGFibGUuc2Nzc1wiKTtcblxuZXhwb3J0IGNsYXNzIENlbGxXcmFwcGVyIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBjb2x1bW5Db25maWcgPSBTKHRoaXMucHJvcHMuYXBwSWQpXG4gICAgICAgICAgICAuZ2V0U3RhdGUoKVxuICAgICAgICAgICAgLmNvbmZpZy5nZXRDb2x1bW5Db25maWcodGhpcy5wcm9wcy5jb2x1bW5LZXkpO1xuICAgICAgICBsZXQgY29tcCA9IG51bGw7XG4gICAgICAgIGNvbnN0IHsgcm93SW5kZXgsIGNvbHVtbktleSwgY29sbGFwc2VkUm93cyB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3Qgc2VydmljZSA9IG5ldyBUYWJsZVNlcnZpY2UoKTtcbiAgICAgICAgc3dpdGNoIChjb2x1bW5Db25maWcudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBUWVBFX01PUkVfT1BUSU9OUzpcbiAgICAgICAgICAgICAgICBjb21wID0gPE1vcmVPcHRpb25DZWxsIHsuLi50aGlzLnByb3BzfSBkYXRhTGlzdD17dGhpcy5wcm9wcy5kYXRhTGlzdH0gLz47XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFRZUEVfTlVNQkVSOlxuICAgICAgICAgICAgICAgIGNvbXAgPSA8TnVtYmVyQ2VsbCB7Li4udGhpcy5wcm9wc30gZGF0YUxpc3Q9e3RoaXMucHJvcHMuZGF0YUxpc3R9IC8+O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBUWVBFX1RFWFQ6XG4gICAgICAgICAgICBjYXNlIFRZUEVfUFVSRV9URVhUOlxuICAgICAgICAgICAgY2FzZSBUWVBFX0RBVEU6XG4gICAgICAgICAgICBjYXNlIFRZUEVfREFURVRJTUU6XG4gICAgICAgICAgICAgICAgLy9maXJzdCwgY2hlY2sgY29udGVudCBsZW5ndGggdnMuIGNvbHVtbiB3aWR0aCwgdGhlbiBnaXZlIGRpZmZlcmVudCBDZWxsXG4gICAgICAgICAgICAgICAgaWYgKCFjb2x1bW5Db25maWcuZGlzYWJsZVRvb2x0aXAgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5kYXRhTGlzdFtyb3dJbmRleF1bY29sdW1uS2V5XSAmJlxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLmdldFdpZHRoT2ZUZXh0KHRoaXMucHJvcHMuZGF0YUxpc3Rbcm93SW5kZXhdW2NvbHVtbktleV0pID4gY29sdW1uQ29uZmlnLndpZHRoICYmXG4gICAgICAgICAgICAgICAgICAgICFjb2xsYXBzZWRSb3dzLmhhcyhyb3dJbmRleCkgLy93ZSB1c2UgZGlmZmVyZW50IGNlbGwgY29tcCBiYXNlZCBvbiBleHBhbmRlZCBzdGF0dXNcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcCA9IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb29sVGlwVGV4dENlbGwgey4uLnRoaXMucHJvcHN9IGRhdGFMaXN0PXt0aGlzLnByb3BzLmRhdGFMaXN0fSBjb2xsYXBzZWRSb3dzPXtjb2xsYXBzZWRSb3dzfSAvPlxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXAgPSA8VGV4dENlbGwgey4uLnRoaXMucHJvcHN9IGRhdGFMaXN0PXt0aGlzLnByb3BzLmRhdGFMaXN0fSAvPjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFRZUEVfSFRNTDpcbiAgICAgICAgICAgICAgICAvL2ZpcnN0LCBjaGVjayBjb250ZW50IGxlbmd0aCB2cy4gY29sdW1uIHdpZHRoLCB0aGVuIGdpdmUgZGlmZmVyZW50IENlbGxcbiAgICAgICAgICAgICAgICBpZiAoIWNvbHVtbkNvbmZpZy5kaXNhYmxlVG9vbHRpcCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmRhdGFMaXN0W3Jvd0luZGV4XVtjb2x1bW5LZXldICYmXG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuZ2V0V2lkdGhPZkhUTUwodGhpcy5wcm9wcy5kYXRhTGlzdFtyb3dJbmRleF1bY29sdW1uS2V5XSkgPiBjb2x1bW5Db25maWcud2lkdGggJiZcbiAgICAgICAgICAgICAgICAgICAgIWNvbGxhcHNlZFJvd3MuaGFzKHJvd0luZGV4KSAvL3dlIHVzZSBkaWZmZXJlbnQgY2VsbCBjb21wIGJhc2VkIG9uIGV4cGFuZGVkIHN0YXR1c1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBjb21wID0gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPFRvb2xUaXBIdG1sQ2VsbCB7Li4udGhpcy5wcm9wc30gZGF0YUxpc3Q9e3RoaXMucHJvcHMuZGF0YUxpc3R9IGNvbGxhcHNlZFJvd3M9e2NvbGxhcHNlZFJvd3N9IC8+XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcCA9IDxIdG1sQ2VsbCB7Li4udGhpcy5wcm9wc30gZGF0YUxpc3Q9e3RoaXMucHJvcHMuZGF0YUxpc3R9IC8+O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgVFlQRV9MSVNUOlxuICAgICAgICAgICAgICAgIC8vb25seSB1c2luZyBsaXN0VmlldyBpZiBub3QgZXhwYW5kZWRcbiAgICAgICAgICAgICAgICBpZiAoIWNvbGxhcHNlZFJvd3MuaGFzKHJvd0luZGV4KSkge1xuICAgICAgICAgICAgICAgICAgICBjb21wID0gPExpc3RDZWxsIHsuLi50aGlzLnByb3BzfSBkYXRhTGlzdD17dGhpcy5wcm9wcy5kYXRhTGlzdH0gY29sdW1uV2lkdGg9e2NvbHVtbkNvbmZpZy53aWR0aH0gLz47XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcCA9IDxUZXh0Q2VsbCB7Li4udGhpcy5wcm9wc30gZGF0YUxpc3Q9e3RoaXMucHJvcHMuZGF0YUxpc3R9IC8+O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgVFlQRV9JQ09OX0NBTExfQkFDSzpcbiAgICAgICAgICAgICAgICBjb21wID0gPEljb25DYWxsQmFja0NlbGwgey4uLnRoaXMucHJvcHN9IGRhdGFMaXN0PXt0aGlzLnByb3BzLmRhdGFMaXN0fSAvPjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgVFlQRV9DTElDS0FCTEU6XG4gICAgICAgICAgICAgICAgY29tcCA9IDxDbGlja2FibGVDZWxsIHsuLi50aGlzLnByb3BzfSBkYXRhTGlzdD17dGhpcy5wcm9wcy5kYXRhTGlzdH0gLz47XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFRZUEVfUFVSRV9DTElDS0FCTEU6XG4gICAgICAgICAgICAgICAgY29tcCA9IDxQdXJlQ2xpY2thYmxlQ2VsbCB7Li4udGhpcy5wcm9wc30gZGF0YUxpc3Q9e3RoaXMucHJvcHMuZGF0YUxpc3R9IC8+O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBUWVBFX0hUTUxfTElTVDpcblxuICAgICAgICAgICAgICAgIC8vb25seSB1c2luZyBsaXN0VmlldyBpZiBub3QgZXhwYW5kZWRcbiAgICAgICAgICAgICAgICBpZiAoY29sbGFwc2VkUm93cy5oYXMocm93SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXAgPSA8SHRtbExpc3RDZWxsIHsuLi50aGlzLnByb3BzfSBkYXRhTGlzdD17dGhpcy5wcm9wcy5kYXRhTGlzdH0gY29sdW1uV2lkdGg9e2NvbHVtbkNvbmZpZy53aWR0aH0gLz47XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMub25MaXN0SXRlbUNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wID0gPEh0bWxMaXN0RXhwYW5kZWRDZWxsIHsuLi50aGlzLnByb3BzfSBkYXRhTGlzdD17dGhpcy5wcm9wcy5kYXRhTGlzdH0gY29sdW1uV2lkdGg9e2NvbHVtbkNvbmZpZy53aWR0aH0gLz47XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wID0gPEh0bWxDZWxsIHsuLi50aGlzLnByb3BzfSBkYXRhTGlzdD17dGhpcy5wcm9wcy5kYXRhTGlzdH0gLz47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbXA7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTW9yZU9wdGlvbkNlbGwgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9uQ2xpY2sgPSB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5jbG9zZSA9IHRoaXMuY2xvc2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy50b2dnbGVPcGVuID0gdGhpcy50b2dnbGVPcGVuLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucm93ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG9wZW46IGZhbHNlLFxuICAgICAgICAgICAgb3B0aW9uSXRlbXM6IFtdLFxuICAgICAgICAgICAgdGhlbWU6IFwibGlnaHRcIlxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9wdGlvbkl0ZW1zID0gbnVsbDtcbiAgICB9XG5cbiAgICB0b2dnbGVPcGVuKGUpIHtcbiAgICAgICAgLy8gaWYgdGhlcmUgYXJlIG90aGVyIHBvcHVwcyBvcGVuLCBjbG9zZSB0aGVtXG4gICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmR2Q2xQb3BVcFdyYXBwZXJcIikpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcmUuY2xvc2VBbGxQb3BVcCgpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUpIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMuc3RhdGUudGhlbWUgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkuY29uZmlnLnRoZW1lO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG9wZW46ICF0aGlzLnN0YXRlLm9wZW5cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG9uQ2xpY2soZSl7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uTW9yZU9wdGlvbkl0ZW1DbGlja2VkKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uTW9yZU9wdGlvbkl0ZW1DbGlja2VkKHRoaXMucm93LCB0aGlzLm9wdGlvbkl0ZW1zLmZpbmRCeVZhbHVlKFxuICAgICAgICAgICAgICAgIGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIilcbiAgICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gICAgY2xvc2UoKXtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBvcGVuOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlU3RhdGUoKTtcbiAgICAgICAgdGhpcy5zdG9yZSA9IFModGhpcy5wcm9wcy5hcHBJZCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVyQ2xvc2VBbGxQb3BVcCA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5DTE9TRV9BTExfUE9QVVAsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlckNsb3NlQWxsUG9wVXAoKTtcbiAgICB9XG5cbiAgICAvL211c3QgcHV0IGhlcmUgdG8gcHJldmVudCByZXBlYXRlZCBkaXNwbGF5IG9mIGNoZWNrYm94LCBpdCBpcyBiZWNhdXNlIHJldXNpbmcuLi5cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5yb3dJbmRleCAhPT0gbmV4dFByb3BzLnJvd0luZGV4KSB0aGlzLl91cGRhdGVTdGF0ZSgpO1xuICAgIH1cblxuICAgIF91cGRhdGVTdGF0ZSgpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXRhTGlzdCA9IFModGhpcy5wcm9wcy5hcHBJZCkuZ2V0U3RhdGUoKS5kYXRhTGlzdDtcbiAgICAgICAgICAgIGlmKGRhdGFMaXN0Lmxlbmd0aD09PTApIHJldHVybjtcbiAgICAgICAgICAgIC8vaGVyZSwgY2VsbFZhbHVlIHNob3VsZCBiZSBvcHRpb25zXG4gICAgICAgICAgICB0aGlzLnJvdyA9ICBkYXRhTGlzdFt0aGlzLnByb3BzLnJvd0luZGV4XVxuICAgICAgICAgICAgY29uc3QgY2VsbFZhbHVlID10aGlzLnJvd1t0aGlzLnByb3BzLmNvbHVtbktleV07XG4gICAgICAgICAgICB0aGlzLm9wdGlvbkl0ZW1zID0gbmV3IE1vcmVPcHRpb25JdGVtcyhjZWxsVmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgb3B0aW9uSXRlbXM6IHRoaXMub3B0aW9uSXRlbXMubW9yZU9wdGlvbkl0ZW1zXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgMCk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgbGV0IGl0ZW1zID0gW107XG4gICAgICAgIHRoaXMuc3RhdGUub3B0aW9uSXRlbXMuZm9yRWFjaChvcHRpb24gPT4ge1xuICAgICAgICAgICAgaXRlbXMucHVzaChcbiAgICAgICAgICAgICAgICA8bGlcbiAgICAgICAgICAgICAgICAgICAga2V5PXtvcHRpb24udmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DbGlja31cbiAgICAgICAgICAgICAgICAgICAgZGF0YS12YWx1ZT17b3B0aW9uLnZhbHVlfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e0NsYXNzTmFtZXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uSXRlbTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9KX0+XG4gICAgICAgICAgICAgICAgICAgIHtvcHRpb24udGl0bGV9XG4gICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgaWNvblBhcnQgPSBudWxsLCBjb250ZW50PW51bGw7XG4gICAgICAgIGlmKGl0ZW1zLmxlbmd0aD4wKXtcbiAgICAgICAgICAgIGljb25QYXJ0PTxpIGNsYXNzTmFtZT1cIm1hdGVyaWFsLWljb25zXCIgb25DbGljaz17dGhpcy50b2dnbGVPcGVufT5tb3JlX2hvcml6PC9pPjtcbiAgICAgICAgICAgIGNvbnRlbnQgPSA8ZGl2IGNsYXNzTmFtZT1cIm1vcmVPcHRpb25Eb2NrIG1vcmVPcHRpb25Eb2NrSFRNTFwiPlxuICAgICAgICAgICAgICAgIDxCb3VuZGVkVGV0aGVyQ29tcCBhdHRhY2htZW50PXtcInRvcCByaWdodFwifSBhcHBJZD17dGhpcy5wcm9wcy5hcHBJZH0+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm1vcmVPcHRpb25BdHRhY2hQb2ludFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5vcGVuICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vcmVPcHRpb25zV3JhcHBlcklubmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtDbGFzc05hbWVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR2Q2xQb3BVcFdyYXBwZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2lyOiB0aGlzLnN0YXRlLnRoZW1lID09PSBcIm5vaXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0OiB0aGlzLnN0YXRlLnRoZW1lID09PSBcImxpZ2h0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPntpdGVtc308L3VsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgPC9Cb3VuZGVkVGV0aGVyQ29tcD5cbiAgICAgICAgICAgIDwvZGl2PjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vcmVPcHRpb25zV3JhcHBlclwiPlxuICAgICAgICAgICAgICAgICAgICB7aWNvblBhcnR9XG4gICAgICAgICAgICAgICAgICAgIHtjb250ZW50fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICApXG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSWNvbkNhbGxCYWNrQ2VsbCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9uQ2xpY2sgPSB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5jbG9zZSA9IHRoaXMuY2xvc2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fb25JY29uRGF0YVVwZGF0ZSA9IHRoaXMuX29uSWNvbkRhdGFVcGRhdGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHNob3dEZXRhaWw6IGZhbHNlLFxuICAgICAgICAgICAgcG9wVXBDb250ZW50OiBcIlwiLFxuICAgICAgICAgICAgdGhlbWU6IFwibGlnaHRcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBTKHRoaXMucHJvcHMuYXBwSWQpXG4gICAgICAgIHRoaXMuc3RhdGUudGhlbWUgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkuY29uZmlnLnRoZW1lO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlckNsb3NlQWxsUG9wVXAgPSAgdGhpcy5zdG9yZS5zdWJzY3JpYmVUbyh0aGlzLnN0b3JlLkNMT1NFX0FMTF9QT1BVUCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7c2hvd0RldGFpbDogZmFsc2V9KVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKXtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZXJDbG9zZUFsbFBvcFVwKCk7XG4gICAgICAgIGlmKHRoaXMuc3Vic2NyaWJlcikgdGhpcy5zdWJzY3JpYmVyKCk7XG4gICAgfVxuICAgIG9uQ2xpY2soZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5zaG93RGV0YWlsKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZXIgPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuSUNPTl9DRUxMX0NMSUNLRURfQUNUSU9OLCBodG1sQ29udGVudCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25JY29uRGF0YVVwZGF0ZShodG1sQ29udGVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uSWNvbkNsaWNrZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnRoZW1lID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZy50aGVtZTtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uSWNvbkNsaWNrZWQodGhpcy5wcm9wcy5kYXRhTGlzdFt0aGlzLnByb3BzLnJvd0luZGV4XSwgdGhpcy5wcm9wcy5jb2x1bW5LZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2hvd0RldGFpbDogZmFsc2UsXG4gICAgICAgICAgICBwb3BVcENvbnRlbnQ6IFwiXCJcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX29uSWNvbkRhdGFVcGRhdGUoaHRtbENvbnRlbnQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzaG93RGV0YWlsOiB0cnVlLFxuICAgICAgICAgICAgcG9wVXBDb250ZW50OiBodG1sQ29udGVudFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gLy9ub3cgcmVtb3ZlIGl0XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlcigpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyByb3dJbmRleCwgY29sdW1uS2V5IH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCBjZWxsVmFsdWUgPSB0aGlzLnByb3BzLmRhdGFMaXN0W3Jvd0luZGV4XVtjb2x1bW5LZXldO1xuICAgICAgICBsZXQgY29tcCA9IG51bGw7XG5cbiAgICAgICAgbGV0IGNvbFBvc2l0aW9uT2JqID0gbmV3IFRhYmxlU2VydmljZSgpLmdldENvbHVtblBvc2l0aW9uKFModGhpcy5wcm9wcy5hcHBJZCkuZ2V0U3RhdGUoKSwgY29sdW1uS2V5KTtcbiAgICAgICAgbGV0IHBvc2l0aW9uID0gJ2NlbnRlcic7XG4gICAgICAgIGlmIChjb2xQb3NpdGlvbk9iai5iRmlyc3QpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gJ2xlZnQnO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbFBvc2l0aW9uT2JqLmJMYXN0KSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9ICdyaWdodCc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2VsbFZhbHVlKVxuICAgICAgICAgICAgY29tcCA9IChcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJpY29uQ2FsbEJhY2tDZWxsV3JhcHBlclwiIG9uQ2xpY2s9e3RoaXMub25DbGlja30+XG4gICAgICAgICAgICAgICAgICAgIHtjZWxsVmFsdWUuaW5jbHVkZXMoJy8nKSAmJiA8aW1nIHNyYz17Y2VsbFZhbHVlfSAvPn1cbiAgICAgICAgICAgICAgICAgICAgeyFjZWxsVmFsdWUuaW5jbHVkZXMoJy8nKSAmJiA8aSBjbGFzc05hbWU9XCJtYXRlcmlhbC1pY29uc1wiPntjZWxsVmFsdWV9PC9pPn1cbiAgICAgICAgICAgICAgICAgICAgPEJvdW5kZWRUZXRoZXJDb21wIGF0dGFjaG1lbnQ9e1wibWlkZGxlIFwiICsgcG9zaXRpb259IGFwcElkPXt0aGlzLnByb3BzLmFwcElkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImljb25BY3Rpb25BdHRhY2hQb2ludFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5zaG93RGV0YWlsICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Q2xhc3NOYW1lcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR2Q2xQb3BVcFdyYXBwZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vaXI6IHRoaXMuc3RhdGUudGhlbWUgPT09IFwibm9pclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWdodDogdGhpcy5zdGF0ZS50aGVtZSA9PT0gXCJsaWdodFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJtYXRlcmlhbC1pY29ucyBjbG9zZUljb25cIiBvbkNsaWNrPXt0aGlzLmNsb3NlfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX2h0bWw6IHRoaXMuc3RhdGUucG9wVXBDb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3VuZGVkVGV0aGVyQ29tcD5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICApO1xuICAgICAgICByZXR1cm4gPENlbGw+e2NvbXB9PC9DZWxsPjtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTaW5nbGVTZWxlY3RBY3Rpb25DZWxsIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBvcGVuOiBmYWxzZSxcbiAgICAgICAgICAgIHRpdGxlOiBcIlwiLFxuICAgICAgICAgICAgc2VsZWN0ZWRWYWx1ZTogXCJcIixcbiAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnRvZ2dsZU9wZW4gPSB0aGlzLnRvZ2dsZU9wZW4uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWQuYmluZCh0aGlzKTtcbiAgICB9XG4gICAgdG9nZ2xlT3BlbihlKSB7XG4gICAgICAgIC8vIGlmIHRoZXJlIGFyZSBvdGhlciBwb3B1cHMgb3BlbiwgY2xvc2UgdGhlbVxuICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kdkNsUG9wVXBXcmFwcGVyXCIpKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3JlLmNsb3NlQWxsUG9wVXAoKVxuICAgICAgICB9XG4gICAgICAgIGlmIChlKSBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIG9wZW46ICF0aGlzLnN0YXRlLm9wZW5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlbGVjdGVkKGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRpdGxlOiB0aGlzLmNvbHVtbkNvbmZpZy5nZXRBY3Rpb25PcHRpb25zKGUpLnRpdGxlLCBzZWxlY3RlZFZhbHVlOiBlIH0pO1xuICAgICAgICBTKHRoaXMucHJvcHMuYXBwSWQpLnVwZGF0ZVNpbmdsZVNlbGVjdEFjdGlvbih0aGlzLnByb3BzLnJvd0luZGV4LCB0aGlzLnByb3BzLmNvbHVtbktleSwgZSk7XG4gICAgfVxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLl91cGRhdGVTdGF0ZSgpO1xuICAgICAgICB0aGlzLnN0b3JlID0gUyh0aGlzLnByb3BzLmFwcElkKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZXJDbG9zZUFsbFBvcFVwID0gIHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5DTE9TRV9BTExfUE9QVVAsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe29wZW46IGZhbHNlfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudW5TdWJzY3JpYmVDZWxsRGF0YSA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5DRUxMX0RBVEFfVVBEQVRFRCwgKCkgPT4ge1xuICAgICAgICAgICAgLy90aGlzIGlzIHRvIHNldCB1cCBleHRlcm5hbGx5IHRoZSB2YWx1ZSBmb3Igc2VsZWN0ZWQgaXRlbXNcbiAgICAgICAgICAgIGxldCBwYXNlZEluQ2VsbERhdGEgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkucGFzc2VkSW5DZWxsRGF0YTtcbiAgICAgICAgICAgIGxldCByb3dLZXlWYWwgPSBwYXNlZEluQ2VsbERhdGFbMF07XG4gICAgICAgICAgICBsZXQgY29sdW1uS2V5ID0gcGFzZWRJbkNlbGxEYXRhWzFdO1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gcGFzZWRJbkNlbGxEYXRhWzJdO1xuICAgICAgICAgICAgbGV0IHByaW1hcnlLZXkgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkuY29uZmlnLmdldFByaW1hcnlDb2x1bW5LZXkoKTtcbiAgICAgICAgICAgIC8vbm90IGN1cnJlbnQgY29sdW1uLCBkbyBub3RoaW5nXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5jb2x1bW5LZXkgIT09IGNvbHVtbktleSkgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKEFycmF5LmlzQXJyYXkocm93S2V5VmFsKSAmJlxuICAgICAgICAgICAgICAgICAgICByb3dLZXlWYWwuaW5jbHVkZXModGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmRhdGFMaXN0W3RoaXMucHJvcHMucm93SW5kZXhdW3ByaW1hcnlLZXldKSkgfHxcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JlLmdldFN0YXRlKCkuZGF0YUxpc3RbdGhpcy5wcm9wcy5yb3dJbmRleF1bcHJpbWFyeUtleV0gPT09IHJvd0tleVZhbFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5jb2x1bW5Db25maWcuZ2V0QWN0aW9uT3B0aW9ucyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBvcHRpb24gPyBvcHRpb24udGl0bGUgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFZhbHVlOiBvcHRpb24gPyBvcHRpb24udmFsdWUgOiBcIlwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy51blN1YnNjcmliZUNlbGxEYXRhKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVyQ2xvc2VBbGxQb3BVcCgpO1xuICAgIH1cbiAgICAvL211c3QgcHV0IGhlcmUgdG8gcHJldmVudCByZXBlYXRlZCBkaXNwbGF5IG9mIGNoZWNrYm94LCBpdCBpcyBiZWNhdXNlIHJldXNpbmcuLi5cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5yb3dJbmRleCAhPT0gbmV4dFByb3BzLnJvd0luZGV4KSB0aGlzLl91cGRhdGVTdGF0ZSgpO1xuICAgIH1cblxuICAgIF91cGRhdGVTdGF0ZSgpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvbHVtbkNvbmZpZyA9IFModGhpcy5wcm9wcy5hcHBJZClcbiAgICAgICAgICAgICAgICAuZ2V0U3RhdGUoKVxuICAgICAgICAgICAgICAgIC5jb25maWcuZ2V0Q29sdW1uQ29uZmlnKHRoaXMucHJvcHMuY29sdW1uS2V5KTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFMaXN0ID0gUyh0aGlzLnByb3BzLmFwcElkKS5nZXRTdGF0ZSgpLmRhdGFMaXN0O1xuICAgICAgICAgICAgaWYoZGF0YUxpc3QubGVuZ3RoPT09MCkgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgY2VsbFZhbHVlID0gZGF0YUxpc3RbdGhpcy5wcm9wcy5yb3dJbmRleF1bdGhpcy5wcm9wcy5jb2x1bW5LZXldO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5jb2x1bW5Db25maWcuZ2V0QWN0aW9uT3B0aW9ucyhcbiAgICAgICAgICAgICAgICBjZWxsVmFsdWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCBkaXNhYmxlZCA9ICdjb250cm9sbGVycycgaW4gdGhpcy5jb2x1bW5Db25maWdcbiAgICAgICAgICAgICAgICAmJiAnZGlzYWJsZWQnIGluIHRoaXMuY29sdW1uQ29uZmlnLmNvbnRyb2xsZXJzXG4gICAgICAgICAgICAgICAgJiYgdGhpcy5jb2x1bW5Db25maWcuY29udHJvbGxlcnMuZGlzYWJsZWQoY2VsbFZhbHVlLCBkYXRhTGlzdFt0aGlzLnByb3BzLnJvd0luZGV4XSk7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogb3B0aW9uID8gb3B0aW9uLnRpdGxlIDogXCJcIixcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFZhbHVlOiBvcHRpb24gPyBvcHRpb24udmFsdWUgOiBcIlwiLFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIDApO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtDbGFzc05hbWVzKHsgXCJkcm9wRG93bkFjdGlvbldyYXBwZXJcIjogdHJ1ZSwgXCJkcm9wRG93bkFjdGlvbldyYXBwZXJEaXNhYmxlZFwiOiB0aGlzLnN0YXRlLmRpc2FibGVkIH0pfSBvbkNsaWNrPXt0aGlzLnRvZ2dsZU9wZW59PlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0aXRsZVwiPnt0aGlzLnN0YXRlLnRpdGxlfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPXtDbGFzc05hbWVzKHsgXCJtYXRlcmlhbC1pY29uc1wiOiB0cnVlLCBvcGVuOiB0aGlzLnN0YXRlLm9wZW4sIGhpZGRlbjogdGhpcy5zdGF0ZS5kaXNhYmxlZCB9KX0+YXJyb3dfZHJvcF9kb3duPC9pPlxuICAgICAgICAgICAgICAgICAgICA8aHIgY2xhc3NOYW1lPXtDbGFzc05hbWVzKHsgXCJkcm9wZG93blNlbGVjdFVuZGVybGluZVwiOiB0cnVlLCBoaWRkZW46IHRoaXMuc3RhdGUuZGlzYWJsZWQgfSl9Lz5cbiAgICAgICAgICAgICAgICAgICAgPEJvdW5kZWRUZXRoZXJDb21wIGF0dGFjaG1lbnQ9XCJ0b3AgbGVmdFwiIGFwcElkPXt0aGlzLnByb3BzLmFwcElkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImFjdGlvbkRyb3BEb3duQXR0YWNoUG9pbnRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUub3BlbiAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNpbmdsZVNlbGVjdE9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2U9e3RoaXMudG9nZ2xlT3Blbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e3RoaXMuc2VsZWN0ZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVmFsdWU9e3RoaXMuc3RhdGUuc2VsZWN0ZWRWYWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFMaXN0PXt0aGlzLnByb3BzLmRhdGFMaXN0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICA8L0JvdW5kZWRUZXRoZXJDb21wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuY2xhc3MgU2luZ2xlU2VsZWN0T3B0aW9ucyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNsb3NlID0gdGhpcy5jbG9zZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmNsaWNrID0gdGhpcy5jbGljay5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdGhlbWU6IFwibGlnaHRcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgIHRoaXMuc3RhdGUudGhlbWUgPSBTKHRoaXMucHJvcHMuYXBwSWQpLmdldFN0YXRlKCkuY29uZmlnLnRoZW1lO1xuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5jbG9zZSgpO1xuICAgIH1cbiAgICBjbGljayhlKSB7XG4gICAgICAgIHRoaXMucHJvcHMuc2VsZWN0ZWQoZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiKSk7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgaXRlbXMgPSBbXTtcbiAgICAgICAgY29uc3QgY29sdW1uQ29uZmlnID0gUyh0aGlzLnByb3BzLmFwcElkKVxuICAgICAgICAgICAgLmdldFN0YXRlKClcbiAgICAgICAgICAgIC5jb25maWcuZ2V0Q29sdW1uQ29uZmlnKHRoaXMucHJvcHMuY29sdW1uS2V5KTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRWYWx1ZSA9IHRoaXMucHJvcHMuc2VsZWN0ZWRWYWx1ZTtcbiAgICAgICAgY29sdW1uQ29uZmlnLmFjdGlvbk9wdGlvbnMuZm9yRWFjaChvcHRpb24gPT4ge1xuICAgICAgICAgICAgaXRlbXMucHVzaChcbiAgICAgICAgICAgICAgICA8bGlcbiAgICAgICAgICAgICAgICAgICAga2V5PXtvcHRpb24udmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuY2xpY2t9XG4gICAgICAgICAgICAgICAgICAgIGRhdGEtdmFsdWU9e29wdGlvbi52YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtDbGFzc05hbWVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDogb3B0aW9uLnZhbHVlID09PSBzZWxlY3RlZFZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH0pfT5cbiAgICAgICAgICAgICAgICAgICAge29wdGlvbi50aXRsZX1cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Q2xhc3NOYW1lcyh7XG4gICAgICAgICAgICAgICAgZHZDbFBvcFVwV3JhcHBlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBub2lyOiB0aGlzLnN0YXRlLnRoZW1lID09IFwibm9pclwiLFxuICAgICAgICAgICAgICAgIGxpZ2h0OiB0aGlzLnN0YXRlLnRoZW1lID09IFwibGlnaHRcIlxuICAgICAgICAgICAgfSl9PlxuICAgICAgICAgICAgICAgIDx1bD57aXRlbXN9PC91bD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEh0bWxMaXN0RXhwYW5kZWRDZWxsIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0b3JlID0gUyh0aGlzLnByb3BzLmFwcElkKTtcbiAgICAgICAgdGhpcy51cGRhdGUgPSB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge31cbiAgICB9XG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKHRoaXMucHJvcHMucm93SW5kZXgpO1xuICAgIH1cbiAgICAvL211c3QgcHV0IGhlcmUgdG8gcHJldmVudCByZXBlYXRlZCBkaXNwbGF5IG9mIGNoZWNrYm94LCBpdCBpcyBiZWNhdXNlIHJldXNpbmcuLi5cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5yb3dJbmRleCAhPT0gbmV4dFByb3BzLnJvd0luZGV4KVxuICAgICAgICAgICAgdGhpcy51cGRhdGUobmV4dFByb3BzLnJvd0luZGV4KTtcbiAgICB9XG4gICAgdXBkYXRlKHJvd0luZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgY29sdW1uS2V5IH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCBzZXJ2aWNlID0gbmV3IFRhYmxlU2VydmljZSgpO1xuICAgICAgICBjb25zdCBjaGVja2luZ1Jlc3VsdHMgPSBzZXJ2aWNlLmFuYWx5emVIVE1MTGlzdENvbnRlbnQodGhpcy5wcm9wcy5kYXRhTGlzdFtyb3dJbmRleF1bY29sdW1uS2V5XSk7XG4gICAgICAgIGNvbnN0IG91dGVyRGl2ID0gY2hlY2tpbmdSZXN1bHRzLm91dGVyRGl2O1xuICAgICAgICBjb25zdCBpbm5lckRpdnMgPSBjaGVja2luZ1Jlc3VsdHMuaW5uZXJEaXZzO1xuXG4gICAgICAgIGxldCBodG1sQ29tcHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbm5lckRpdnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGh0bWxDb21wcy5wdXNoKDxIdG1sTGlzdFNpbmdsZUNsaWNrYWJsZUl0ZW0ga2V5PXtpfSBjb250ZW50cz17aW5uZXJEaXZzW2ldfSB7Li4udGhpcy5wcm9wc30gPjwvSHRtbExpc3RTaW5nbGVDbGlja2FibGVJdGVtPilcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGh0bWxDb21wczogaHRtbENvbXBzXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaHRtbExpc3RDZWxsV3JhcHBlclwiPlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5odG1sQ29tcHN9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgIClcbiAgICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIEh0bWxMaXN0Q2VsbCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdG9yZSA9IFModGhpcy5wcm9wcy5hcHBJZCk7XG4gICAgICAgIHRoaXMudG9nZ2xlTW9yZSA9IHRoaXMudG9nZ2xlTW9yZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgc2hvd01vcmU6IGZhbHNlLFxuICAgICAgICAgICAgaHRtbENudDogJycsXG4gICAgICAgICAgICByZW1haW5pbmdDb3VudDogMCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnY2VudGVyJ1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnVwZGF0ZSA9IHRoaXMudXBkYXRlLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlckNsb3NlQWxsUG9wVXAgPSAgdGhpcy5zdG9yZS5zdWJzY3JpYmVUbyh0aGlzLnN0b3JlLkNMT1NFX0FMTF9QT1BVUCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7c2hvd01vcmU6IGZhbHNlfSlcbiAgICAgICAgfSk7XG4gICAgICAgIC8vbm93LCBsZXQncyBzZXQgdXAgbGlzdGVuZXIgdG8gY3VzdG9tQ29uZmlnVXBkYXRlXG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVyID0gdGhpcy5zdG9yZS5zdWJzY3JpYmVUbyh0aGlzLnN0b3JlLkNVU1RPTV9DT05GSUdfVVBEQVRFLCBzdGF0ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnN0b3JlID0gUyh0aGlzLnByb3BzLmFwcElkKTtcbiAgICAgICAgICAgIGxldCBpbm5lckRpdkNvdW50cyA9IG5ldyBUYWJsZVNlcnZpY2UoKS5jYWxDb3VudEZvckluZXJEaXZzKHRoaXMuc3RhdGUuaW5uZXJEaXZzLFxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWcuZ2V0Q29sdW1uQ29uZmlnKHRoaXMucHJvcHMuY29sdW1uS2V5KS53aWR0aCAtIDEwMCk7XG4gICAgICAgICAgICBsZXQgaHRtbENudCA9IHRoaXMuc3RhdGUub3V0ZXJEaXY7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlubmVyRGl2Q291bnRzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5pbm5lckRpdnNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbENudCArPSAnPHNwYW4gc3R5bGU9XCJmbG9hdDpsZWZ0O21hcmdpbi1yaWdodDo1cHhcIj4nICsgdGhpcy5zdGF0ZS5pbm5lckRpdnNbaV0gKyAnPC9zcGFuPic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHRtbENudCArPSAnPC9kaXY+JztcbiAgICAgICAgICAgIGxldCByZW1haW5pbmdDb3VudCA9IHRoaXMuc3RhdGUuaW5uZXJEaXZzLmxlbmd0aCAtIGlubmVyRGl2Q291bnRzO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgaHRtbENudDogaHRtbENudCxcbiAgICAgICAgICAgICAgICByZW1haW5pbmdDb3VudDogcmVtYWluaW5nQ291bnRcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLnByb3BzLnJvd0luZGV4KTtcbiAgICB9XG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVyKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVyQ2xvc2VBbGxQb3BVcCgpO1xuICAgIH1cblxuICAgIC8vbXVzdCBwdXQgaGVyZSB0byBwcmV2ZW50IHJlcGVhdGVkIGRpc3BsYXkgb2YgY2hlY2tib3gsIGl0IGlzIGJlY2F1c2UgcmV1c2luZy4uLlxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnJvd0luZGV4ICE9PSBuZXh0UHJvcHMucm93SW5kZXgpXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZShuZXh0UHJvcHMucm93SW5kZXgpO1xuICAgIH1cblxuICAgIHRvZ2dsZU1vcmUoZSkge1xuICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kdkNsUG9wVXBXcmFwcGVyXCIpKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3JlLmNsb3NlQWxsUG9wVXAoKVxuICAgICAgICB9XG4gICAgICAgIGlmIChlKSBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNob3dNb3JlOiAhdGhpcy5zdGF0ZS5zaG93TW9yZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGUocm93SW5kZXgpIHtcbiAgICAgICAgY29uc3QgeyBjb2x1bW5LZXkgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHNlcnZpY2UgPSBuZXcgVGFibGVTZXJ2aWNlKCk7XG4gICAgICAgIGNvbnN0IGNoZWNraW5nUmVzdWx0cyA9IHNlcnZpY2UuYW5hbHl6ZUhUTUxMaXN0Q29udGVudCh0aGlzLnByb3BzLmRhdGFMaXN0W3Jvd0luZGV4XVtjb2x1bW5LZXldKTtcbiAgICAgICAgY29uc3Qgb3V0ZXJEaXYgPSBjaGVja2luZ1Jlc3VsdHMub3V0ZXJEaXY7XG4gICAgICAgIGNvbnN0IGlubmVyRGl2cyA9IGNoZWNraW5nUmVzdWx0cy5pbm5lckRpdnM7XG5cbiAgICAgICAgbGV0IGNvbFBvc2l0aW9uT2JqID0gbmV3IFRhYmxlU2VydmljZSgpLmdldENvbHVtblBvc2l0aW9uKFModGhpcy5wcm9wcy5hcHBJZCkuZ2V0U3RhdGUoKSwgY29sdW1uS2V5KTtcbiAgICAgICAgbGV0IHBvc2l0aW9uID0gJ2NlbnRlcic7XG4gICAgICAgIGlmIChjb2xQb3NpdGlvbk9iai5iRmlyc3QpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gJ2xlZnQnO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbFBvc2l0aW9uT2JqLmJMYXN0KSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9ICdyaWdodCc7XG4gICAgICAgIH1cbiAgICAgICAgLy9oZXJlLCB3ZSBuZWVkIHRvIGxldmUgc2FtZSBleHRyYSBzcGFjZSBmb3IgKy8tMlxuXG4gICAgICAgIGxldCBpbm5lckRpdkNvdW50cyA9IHNlcnZpY2UuY2FsQ291bnRGb3JJbmVyRGl2cyhpbm5lckRpdnMsIHRoaXMucHJvcHMuY29sdW1uV2lkdGggLSA1MCk7XG5cbiAgICAgICAgbGV0IGh0bWxDbnQgPSBvdXRlckRpdjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbm5lckRpdkNvdW50czsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaW5uZXJEaXZzW2ldKSB7XG4gICAgICAgICAgICAgICAgaHRtbENudCArPSAnPHNwYW4gc3R5bGU9XCJmbG9hdDpsZWZ0O21hcmdpbi1yaWdodDo1cHhcIj4nICsgaW5uZXJEaXZzW2ldICsgJzwvc3Bhbj4nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGh0bWxDbnQgKz0gJzwvZGl2Pic7XG4gICAgICAgIGxldCByZW1haW5pbmdDb3VudCA9IGlubmVyRGl2cy5sZW5ndGggLSBpbm5lckRpdkNvdW50cztcblxuXG4gICAgICAgIGxldCBodG1sQ29tcHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbm5lckRpdkNvdW50czsgaSsrKSB7XG4gICAgICAgICAgICBodG1sQ29tcHMucHVzaCg8SHRtbExpc3RTaW5nbGVDbGlja2FibGVJdGVtIGtleT17aX0gY29udGVudHM9e2lubmVyRGl2c1tpXX0gey4uLnRoaXMucHJvcHN9ID48L0h0bWxMaXN0U2luZ2xlQ2xpY2thYmxlSXRlbT4pXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGh0bWxDbnQ6IGh0bWxDbnQsXG4gICAgICAgICAgICBodG1sQ29tcHM6IGh0bWxDb21wcyxcbiAgICAgICAgICAgIHJlbWFpbmluZ0NvdW50OiByZW1haW5pbmdDb3VudCxcbiAgICAgICAgICAgIG91dGVyRGl2OiBvdXRlckRpdixcbiAgICAgICAgICAgIGlubmVyRGl2czogaW5uZXJEaXZzLFxuICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENlbGw+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJodG1sTGlzdENlbGxXcmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLm9uTGlzdEl0ZW1DbGljayA/IHRoaXMuc3RhdGUuaHRtbENvbXBzIDogbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgeyF0aGlzLnByb3BzLm9uTGlzdEl0ZW1DbGljayA/IDxzcGFuXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9faHRtbDogdGhpcy5zdGF0ZS5odG1sQ250XG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAvPiA6IG51bGx9XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnJlbWFpbmluZ0NvdW50ID4gMCA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIG9uQ2xpY2s9e3RoaXMudG9nZ2xlTW9yZX0gY2xhc3NOYW1lPVwibW9yZUhvb2sgdG9vbHRpcFdyYXBwZXIgaHRtbExpc3RUb2dnbGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuc2hvd01vcmUgPyBcIi1cIiA6IFwiK1wifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnJlbWFpbmluZ0NvdW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0b29sVGlwRG9jayB0b29sVGlwRG9ja0hUTUxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3VuZGVkVGV0aGVyQ29tcCBhdHRhY2htZW50PXtcIm1pZGRsZSBcIiArIHRoaXMuc3RhdGUucG9zaXRpb259IGFwcElkPXt0aGlzLnByb3BzLmFwcElkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0b29sdGlwQXR0YWNoUG9pbnRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNob3dNb3JlICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEh0bWxMaXN0Q2VsbEl0ZW1zIHsuLi50aGlzLnByb3BzfSBjbG9zZT17dGhpcy50b2dnbGVNb3JlfSBodG1sRGl2cz17dGhpcy5zdGF0ZS5pbm5lckRpdnN9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvQm91bmRlZFRldGhlckNvbXA+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICApXG4gICAgfVxufVxuXG5jbGFzcyBIdG1sTGlzdFNpbmdsZUNsaWNrYWJsZUl0ZW0gZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIG9uQ2xpY2soZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMucHJvcHMub25MaXN0SXRlbUNsaWNrKHRoaXMucHJvcHMuY29udGVudHMpXG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIDxzcGFuXG4gICAgICAgICAgICBjbGFzc05hbWU9J2NsaWNrYWJsZSdcbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DbGlja31cbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICAgICAgX19odG1sOiB0aGlzLnByb3BzLmNvbnRlbnRzXG4gICAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgIH1cbn1cblxuY2xhc3MgSHRtbExpc3RDZWxsSXRlbXMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jbG9zZSA9IHRoaXMuY2xvc2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHRoZW1lOiBcImxpZ2h0XCJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICB0aGlzLnN0YXRlLnRoZW1lID0gUyh0aGlzLnByb3BzLmFwcElkKS5nZXRTdGF0ZSgpLmNvbmZpZy50aGVtZTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMucHJvcHMuY2xvc2UoKTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuXG4gICAgICAgIGxldCBpdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLnByb3BzLmh0bWxEaXZzLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goPGxpIGtleT17aW5kZXh9IGNsYXNzTmFtZT0nbGlzdEl0ZW0nPiA8c3BhblxuICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICAgICAgICAgIF9faHRtbDogaXRlbVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPiA8L2xpPik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Q2xhc3NOYW1lcyh7XG4gICAgICAgICAgICAgICAgZHZDbFBvcFVwV3JhcHBlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBodG1sTGlzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBub2lyOiB0aGlzLnN0YXRlLnRoZW1lID09IFwibm9pclwiLFxuICAgICAgICAgICAgICAgIGxpZ2h0OiB0aGlzLnN0YXRlLnRoZW1lID09IFwibGlnaHRcIlxuICAgICAgICAgICAgfSl9PlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cIm1hdGVyaWFsLWljb25zIGNsb3NlSWNvblwiIG9uQ2xpY2s9e3RoaXMuY2xvc2V9PlxuICAgICAgICAgICAgICAgICAgICBjbGVhclxuICAgICAgICAgICAgICAgIDwvaT5cbiAgICAgICAgICAgICAgICA8dWw+e2l0ZW1zfTwvdWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIExpc3RDZWxsIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0b3JlID0gUyh0aGlzLnByb3BzLmFwcElkKTtcbiAgICAgICAgdGhpcy50b2dnbGVNb3JlID0gdGhpcy50b2dnbGVNb3JlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBzaG93TW9yZTogZmFsc2UsXG4gICAgICAgICAgICB0ZXh0Q250OiAnJyxcbiAgICAgICAgICAgIHJlbWFpbmluZ0NvdW50OiAwLFxuICAgICAgICAgICAgcG9zaXRpb246ICdjZW50ZXInXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlID0gdGhpcy51cGRhdGUuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZXJDbG9zZUFsbFBvcFVwID0gIHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5DTE9TRV9BTExfUE9QVVAsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe3Nob3dNb3JlOiBmYWxzZX0pXG4gICAgICAgIH0pO1xuICAgICAgICAvL25vdywgbGV0J3Mgc2V0IHVwIGxpc3RlbmVyIHRvIGN1c3RvbUNvbmZpZ1VwZGF0ZVxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlciA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5DVVNUT01fQ09ORklHX1VQREFURSwgc3RhdGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdG9yZSA9IFModGhpcy5wcm9wcy5hcHBJZCk7XG4gICAgICAgICAgICBjb25zdCBzZXJ2aWNlID0gbmV3IFRhYmxlU2VydmljZSgpO1xuICAgICAgICAgICAgbGV0IGlubmVyRGl2Q291bnRzID0gc2VydmljZS5jYWxDb3VudEZvckluZXJEaXZzKHRoaXMuc3RhdGUuaW5uZXJEaXZzLFxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWcuZ2V0Q29sdW1uQ29uZmlnKHRoaXMucHJvcHMuY29sdW1uS2V5KS53aWR0aCAtIDcwKTtcbiAgICAgICAgICAgIGxldCB0ZXh0Q250cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbm5lckRpdkNvdW50czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGV4dENudHMucHVzaCh0aGlzLnN0YXRlLmlubmVyRGl2c1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcmVtYWluaW5nQ291bnQgPSB0aGlzLnN0YXRlLmlubmVyRGl2cy5sZW5ndGggLSBpbm5lckRpdkNvdW50cztcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIHRleHRDbnQ6IHRleHRDbnRzLmpvaW4oXCIsXCIpLFxuICAgICAgICAgICAgICAgIHJlbWFpbmluZ0NvdW50OiByZW1haW5pbmdDb3VudFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlKHRoaXMucHJvcHMucm93SW5kZXgpO1xuICAgIH1cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZXIoKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZXJDbG9zZUFsbFBvcFVwKCk7XG4gICAgfVxuXG4gICAgLy9tdXN0IHB1dCBoZXJlIHRvIHByZXZlbnQgcmVwZWF0ZWQgZGlzcGxheSBvZiBjaGVja2JveCwgaXQgaXMgYmVjYXVzZSByZXVzaW5nLi4uXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucm93SW5kZXggIT09IG5leHRQcm9wcy5yb3dJbmRleClcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKG5leHRQcm9wcy5yb3dJbmRleCk7XG4gICAgfVxuXG4gICAgdG9nZ2xlTW9yZShlKSB7XG4gICAgICAgIC8vIGlmIHRoZXJlIGFyZSBvdGhlciBwb3B1cHMgb3BlbiwgY2xvc2UgdGhlbVxuICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kdkNsUG9wVXBXcmFwcGVyXCIpKSB7XG4gICAgICAgICAgICB0aGlzLnN0b3JlLmNsb3NlQWxsUG9wVXAoKVxuICAgICAgICB9XG4gICAgICAgIGlmIChlKSBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNob3dNb3JlOiAhdGhpcy5zdGF0ZS5zaG93TW9yZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGUocm93SW5kZXgpIHtcbiAgICAgICAgY29uc3QgeyBjb2x1bW5LZXkgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHNlcnZpY2UgPSBuZXcgVGFibGVTZXJ2aWNlKCk7XG4gICAgICAgIGNvbnN0IGlubmVyRGl2cyA9IHNlcnZpY2UuYW5hbHl6ZVRleHRMaXN0Q29udGVudCh0aGlzLnByb3BzLmRhdGFMaXN0W3Jvd0luZGV4XVtjb2x1bW5LZXldKTtcblxuICAgICAgICBsZXQgY29sUG9zaXRpb25PYmogPSBuZXcgVGFibGVTZXJ2aWNlKCkuZ2V0Q29sdW1uUG9zaXRpb24oUyh0aGlzLnByb3BzLmFwcElkKS5nZXRTdGF0ZSgpLCBjb2x1bW5LZXkpO1xuICAgICAgICBsZXQgcG9zaXRpb24gPSAnY2VudGVyJztcbiAgICAgICAgaWYgKGNvbFBvc2l0aW9uT2JqLmJGaXJzdCkge1xuICAgICAgICAgICAgcG9zaXRpb24gPSAnbGVmdCc7XG4gICAgICAgIH0gZWxzZSBpZiAoY29sUG9zaXRpb25PYmouYkxhc3QpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gJ3JpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICAvL2hlcmUsIHdlIG5lZWQgdG8gbGV2ZSBzYW1lIGV4dHJhIHNwYWNlIGZvciArLy0yXG5cbiAgICAgICAgbGV0IGlubmVyRGl2Q291bnRzID0gc2VydmljZS5jYWxDb3VudEZvckluZXJEaXZzKGlubmVyRGl2cywgdGhpcy5wcm9wcy5jb2x1bW5XaWR0aCAtIDcwKTtcblxuICAgICAgICBsZXQgdGV4dENudHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbm5lckRpdkNvdW50czsgaSsrKSB7XG4gICAgICAgICAgICB0ZXh0Q250cy5wdXNoKGlubmVyRGl2c1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlbWFpbmluZ0NvdW50ID0gaW5uZXJEaXZzLmxlbmd0aCAtIGlubmVyRGl2Q291bnRzO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdGV4dENudDogdGV4dENudHMuam9pbihcIixcIiksXG4gICAgICAgICAgICByZW1haW5pbmdDb3VudDogcmVtYWluaW5nQ291bnQsXG4gICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgICAgICAgICBpbm5lckRpdnM6IGlubmVyRGl2c1xuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyByb3dJbmRleCwgY29sdW1uS2V5IH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBsZXQgaXRlbXMgPSBbXTtcbiAgICAgICAgbGV0IGRlbGltaW5hdG9yID0gUyh0aGlzLnByb3BzLmFwcElkKS5nZXRTdGF0ZSgpLmNvbmZpZy5saXN0RGVsaW1pbmF0b3I7XG5cbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZGF0YUxpc3Rbcm93SW5kZXhdW2NvbHVtbktleV0pIGl0ZW1zID0gdGhpcy5wcm9wcy5kYXRhTGlzdFtyb3dJbmRleF1bY29sdW1uS2V5XS5zcGxpdChkZWxpbWluYXRvcik7XG5cbiAgICAgICAgbGV0IGNvbFBvc2l0aW9uT2JqID0gbmV3IFRhYmxlU2VydmljZSgpLmdldENvbHVtblBvc2l0aW9uKFModGhpcy5wcm9wcy5hcHBJZCkuZ2V0U3RhdGUoKSwgY29sdW1uS2V5KTtcbiAgICAgICAgbGV0IHBvc2l0aW9uID0gJ2NlbnRlcic7XG4gICAgICAgIGlmIChjb2xQb3NpdGlvbk9iai5iRmlyc3QpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gJ2xlZnQnO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbFBvc2l0aW9uT2JqLmJMYXN0KSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9ICdyaWdodCc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXJ0aWFsTGlzdFRleHQgPSAodGhpcy5zdGF0ZS5yZW1haW5pbmdDb3VudCA+IDEpXG4gICAgICAgICAgICA/IHRoaXMuc3RhdGUudGV4dENudCArIFwiLFwiXG4gICAgICAgICAgICA6IHRoaXMuc3RhdGUudGV4dENudDtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENlbGw+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob29rQ2VsbFwiPlxuICAgICAgICAgICAgICAgICAgICB7cGFydGlhbExpc3RUZXh0fVxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5yZW1haW5pbmdDb3VudCA+PSAxID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gb25DbGljaz17dGhpcy50b2dnbGVNb3JlfSBjbGFzc05hbWU9XCJtb3JlSG9vayB0b29sdGlwV3JhcHBlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNob3dNb3JlID8gXCItXCIgOiBcIitcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5yZW1haW5pbmdDb3VudH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9vbFRpcERvY2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3VuZGVkVGV0aGVyQ29tcCBhdHRhY2htZW50PXtcIm1pZGRsZSBsZWZ0XCJ9IGFwcElkPXt0aGlzLnByb3BzLmFwcElkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0b29sdGlwQXR0YWNoUG9pbnRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNob3dNb3JlICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPExpc3RDZWxsSXRlbXMgey4uLnRoaXMucHJvcHN9IGNsb3NlPXt0aGlzLnRvZ2dsZU1vcmV9IGl0ZW1zPXt0aGlzLnByb3BzLmRhdGFMaXN0W3Jvd0luZGV4XVtjb2x1bW5LZXldfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0JvdW5kZWRUZXRoZXJDb21wPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmNsYXNzIExpc3RDZWxsSXRlbXMgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jbG9zZSA9IHRoaXMuY2xvc2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHRoZW1lOiBcImxpZ2h0XCJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICB0aGlzLnN0YXRlLnRoZW1lID0gUyh0aGlzLnByb3BzLmFwcElkKS5nZXRTdGF0ZSgpLmNvbmZpZy50aGVtZTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMucHJvcHMuY2xvc2UoKTtcbiAgICB9XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgaXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy5wcm9wcy5pdGVtcy5zcGxpdChcIixcIikubWFwKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaXRlbXMucHVzaCg8bGkga2V5PXtpbmRleH0+e2l0ZW19PC9saT4pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e0NsYXNzTmFtZXMoe1xuICAgICAgICAgICAgICAgIGR2Q2xQb3BVcFdyYXBwZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgbm9pcjogdGhpcy5zdGF0ZS50aGVtZSA9PT0gXCJub2lyXCIsXG4gICAgICAgICAgICAgICAgbGlnaHQ6IHRoaXMuc3RhdGUudGhlbWUgPT09IFwibGlnaHRcIlxuICAgICAgICAgICAgfSl9PlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cIm1hdGVyaWFsLWljb25zIGNsb3NlSWNvblwiIG9uQ2xpY2s9e3RoaXMuY2xvc2V9PlxuICAgICAgICAgICAgICAgICAgICBjbGVhclxuICAgICAgICAgICAgICAgIDwvaT5cbiAgICAgICAgICAgICAgICA8dWw+e2l0ZW1zfTwvdWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUb29sVGlwVGV4dENlbGwgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zaG93VG9vbFRpcCA9IHRoaXMuc2hvd1Rvb2xUaXAuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5oaWRlVG9vbFRpcCA9IHRoaXMuaGlkZVRvb2xUaXAuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIG9wZW5Ub29sdGlwOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBzaG93VG9vbFRpcCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW5Ub29sdGlwOiB0cnVlIH0pO1xuICAgIH1cbiAgICBoaWRlVG9vbFRpcCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW5Ub29sdGlwOiBmYWxzZSB9KTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgcm93SW5kZXgsIGNvbHVtbktleSB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBjb25zdCBjb2xQb3NpdGlvbk9iaiA9IG5ldyBUYWJsZVNlcnZpY2UoKS5nZXRDb2x1bW5Qb3NpdGlvbihTKHRoaXMucHJvcHMuYXBwSWQpLmdldFN0YXRlKCksIGNvbHVtbktleSk7XG4gICAgICAgIGxldCBwb3NpdGlvbiA9ICdjZW50ZXInO1xuICAgICAgICBpZiAoY29sUG9zaXRpb25PYmouYkZpcnN0KSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9ICdsZWZ0JztcbiAgICAgICAgfSBlbHNlIGlmIChjb2xQb3NpdGlvbk9iai5iTGFzdCkge1xuICAgICAgICAgICAgcG9zaXRpb24gPSAncmlnaHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGV4dENsYXNzID0gQ2xhc3NOYW1lcyh7XG4gICAgICAgICAgICBhdXRvRWxsaXBzZTogdHJ1ZSxcbiAgICAgICAgICAgIHRvb2x0aXBXcmFwcGVyOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndGV4dENlbGwgdGV4dFRvb2x0aXBDZWxsJz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3RleHRDbGFzc31cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcj17dGhpcy5zaG93VG9vbFRpcH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17dGhpcy5oaWRlVG9vbFRpcH1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuZGF0YUxpc3Rbcm93SW5kZXhdW2NvbHVtbktleV19XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvb2xUaXBEb2NrXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJvdW5kZWRUZXRoZXJDb21wIGNsYXNzTmFtZT1cImR2VGV0aGVyZWRUb29sVGlwXCIgYXR0YWNobWVudD17XCJtaWRkbGUgXCIgKyBwb3NpdGlvbn0gYXBwSWQ9e3RoaXMucHJvcHMuYXBwSWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0b29sdGlwQXR0YWNoUG9pbnRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5vcGVuVG9vbHRpcCAmJiA8VG9vbFRpcENvbXAgey4uLnRoaXMucHJvcHN9IGNvbnRlbnQ9e3RoaXMucHJvcHMuZGF0YUxpc3Rbcm93SW5kZXhdW2NvbHVtbktleV19IC8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQm91bmRlZFRldGhlckNvbXA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVG9vbFRpcENvbXAgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17Q2xhc3NOYW1lcyh7XG4gICAgICAgICAgICBkdkNsUG9wVXBXcmFwcGVyOiB0cnVlLFxuICAgICAgICAgICAgaHRtbExpc3Q6IHRydWUsXG4gICAgICAgICAgICBkdlRvb2x0aXBUZXh0OiB0cnVlLFxuICAgICAgICAgICAgbm9pcjogUyh0aGlzLnByb3BzLmFwcElkKS5nZXRTdGF0ZSgpLmNvbmZpZy50aGVtZSA9PSBcIm5vaXJcIixcbiAgICAgICAgICAgIGxpZ2h0OiBTKHRoaXMucHJvcHMuYXBwSWQpLmdldFN0YXRlKCkuY29uZmlnLnRoZW1lID09IFwibGlnaHRcIlxuICAgICAgICB9KX0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgICAgIF9faHRtbDogdGhpcy5wcm9wcy5jb250ZW50XG4gICAgICAgIH19IC8+O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRleHRDZWxsIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBlZGl0aW5nOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgcm93SW5kZXgsIGNvbHVtbktleSB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgY29sdW1uQ29uZmlnID0gUyh0aGlzLnByb3BzLmFwcElkKVxuICAgICAgICAgICAgLmdldFN0YXRlKClcbiAgICAgICAgICAgIC5jb25maWcuZ2V0Q29sdW1uQ29uZmlnKHRoaXMucHJvcHMuY29sdW1uS2V5KTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICAgIHshY29sdW1uQ29uZmlnLmVkaXRhYmxlICYmIDxkaXYgY2xhc3NOYW1lPVwidGV4dENlbGxcIj57dGhpcy5wcm9wcy5kYXRhTGlzdFtyb3dJbmRleF1bY29sdW1uS2V5XX08L2Rpdj59XG4gICAgICAgICAgICAgICAge2NvbHVtbkNvbmZpZy5lZGl0YWJsZSAmJlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZWRpdGFibGVDZWxsV3JhcHBlcic+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHRDZWxsXCI+e3RoaXMucHJvcHMuZGF0YUxpc3Rbcm93SW5kZXhdW2NvbHVtbktleV19PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOdW1iZXJDZWxsIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IHJvd0luZGV4LCBjb2x1bW5LZXkgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IGNvbHVtbkNvbmZpZyA9IFModGhpcy5wcm9wcy5hcHBJZClcbiAgICAgICAgICAgIC5nZXRTdGF0ZSgpXG4gICAgICAgICAgICAuY29uZmlnLmdldENvbHVtbkNvbmZpZyh0aGlzLnByb3BzLmNvbHVtbktleSk7XG4gICAgICAgIGNvbnN0IHN2YyA9ICBuZXcgVGFibGVTZXJ2aWNlKCk7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHRDZWxsXCI+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmRhdGFMaXN0W3Jvd0luZGV4XVtjb2x1bW5LZXldID8gc3ZjLmZvcm1hdE51bWJlcih0aGlzLnByb3BzLmRhdGFMaXN0W3Jvd0luZGV4XVtjb2x1bW5LZXldLGNvbHVtbkNvbmZpZykgIDogMH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUb29sVGlwSHRtbENlbGwgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNob3dUb29sVGlwID0gdGhpcy5zaG93VG9vbFRpcC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhpZGVUb29sVGlwID0gdGhpcy5oaWRlVG9vbFRpcC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgb3BlblRvb2x0aXA6IGZhbHNlXG4gICAgICAgIH07XG4gICAgfVxuICAgIHNob3dUb29sVGlwKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgb3BlblRvb2x0aXA6IHRydWUgfSk7XG4gICAgfVxuICAgIGhpZGVUb29sVGlwKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgb3BlblRvb2x0aXA6IGZhbHNlIH0pO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyByb3dJbmRleCwgY29sdW1uS2V5IH0gPSB0aGlzLnByb3BzO1xuXG5cbiAgICAgICAgbGV0IGNvbFBvc2l0aW9uT2JqID0gbmV3IFRhYmxlU2VydmljZSgpLmdldENvbHVtblBvc2l0aW9uKFModGhpcy5wcm9wcy5hcHBJZCkuZ2V0U3RhdGUoKSwgY29sdW1uS2V5KTtcbiAgICAgICAgbGV0IHBvc2l0aW9uID0gJ2NlbnRlcic7XG4gICAgICAgIGlmIChjb2xQb3NpdGlvbk9iai5iRmlyc3QpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gJ2xlZnQnO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbFBvc2l0aW9uT2JqLmJMYXN0KSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9ICdyaWdodCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENlbGw+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2h0bWxDZWxsIGh0bWxUb29sdGlwQ2VsbCc+XG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Q2xhc3NOYW1lcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0VsbGlwc2U6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcFdyYXBwZXI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyPXt0aGlzLnNob3dUb29sVGlwfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXt0aGlzLmhpZGVUb29sVGlwfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogdGhpcy5wcm9wcy5kYXRhTGlzdFtyb3dJbmRleF1bY29sdW1uS2V5XX19Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd0b29sVGlwRG9jayc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJvdW5kZWRUZXRoZXJDb21wIGNsYXNzTmFtZT1cImR2VGV0aGVyZWRUb29sVGlwXCIgYXR0YWNobWVudD17XCJtaWRkbGUgXCIgKyBwb3NpdGlvbn0gYXBwSWQ9e3RoaXMucHJvcHMuYXBwSWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0b29sdGlwQXR0YWNoUG9pbnRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5vcGVuVG9vbHRpcCAmJiA8VG9vbFRpcENvbXAgey4uLnRoaXMucHJvcHN9IGNvbnRlbnQ9e3RoaXMucHJvcHMuZGF0YUxpc3Rbcm93SW5kZXhdW2NvbHVtbktleV19IC8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQm91bmRlZFRldGhlckNvbXA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEh0bWxDZWxsIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IHJvd0luZGV4LCBjb2x1bW5LZXkgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImh0bWxDZWxsXCJcbiAgICAgICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgIF9faHRtbDogdGhpcy5wcm9wcy5kYXRhTGlzdFtyb3dJbmRleF1bY29sdW1uS2V5XVxuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUHVyZUNsaWNrYWJsZUNlbGwgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlQ2xpY2thYmxlPXRoaXMudXBkYXRlQ2xpY2thYmxlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB1bkNsaWNrYWJsZTogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gbmV3IFRhYmxlU2VydmljZSgpO1xuICAgIH1cblxuICAgIG9uQ2xpY2soZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkNlbGxDbGlja2VkICYmICF0aGlzLnN0YXRlLnVuQ2xpY2thYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2VsbENsaWNrZWQodGhpcy5wcm9wcy5kYXRhTGlzdFt0aGlzLnByb3BzLnJvd0luZGV4XSwgdGhpcy5wcm9wcy5jb2x1bW5LZXkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlQ2xpY2thYmxlKCl7XG4gICAgICAgIGNvbnN0IHVuQ2xpY2thYmxlQ2VsbHMgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkudW5DbGlja2FibGVDZWxscztcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB1bkNsaWNrYWJsZTogdGhpcy5wcm9wcy5jb2x1bW5LZXkgaW4gdW5DbGlja2FibGVDZWxsc1xuICAgICAgICAgICAgICAgICYmIHVuQ2xpY2thYmxlQ2VsbHNbdGhpcy5wcm9wcy5jb2x1bW5LZXldLmluY2x1ZGVzKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2UuZ2V0Um93S2V5VmFsRnJvbUluZGV4KHRoaXMucHJvcHMucm93SW5kZXgsIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLnN0b3JlID0gUyh0aGlzLnByb3BzLmFwcElkKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZXIgPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuVU5DTElDS0FCTEVfQ0VMTFNfVVBEQVRFRCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDbGlja2FibGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlQ2xpY2thYmxlKCk7XG4gICAgfVxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlcigpO1xuICAgIH1cbiAgICAvL211c3QgcHV0IGhlcmUgdG8gcHJldmVudCByZXBlYXRlZCBkaXNwbGF5IG9mIGNoZWNrYm94LCBpdCBpcyBiZWNhdXNlIHJldXNpbmcuLi5cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5yb3dJbmRleCAhPT0gbmV4dFByb3BzLnJvd0luZGV4KSB7XG4gICAgICAgICAgICAvLyB1c2luZyBuZXh0UHJvcHMucm93SW5kZXggYXMgcmVhbCByb3dJbmRleFxuICAgICAgICAgICAgY29uc3QgdW5DbGlja2FibGVDZWxscyA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS51bkNsaWNrYWJsZUNlbGxzO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgdW5DbGlja2FibGU6IHRoaXMucHJvcHMuY29sdW1uS2V5IGluIHVuQ2xpY2thYmxlQ2VsbHNcbiAgICAgICAgICAgICAgICAgICAgJiYgdW5DbGlja2FibGVDZWxsc1t0aGlzLnByb3BzLmNvbHVtbktleV0uaW5jbHVkZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2UuZ2V0Um93S2V5VmFsRnJvbUluZGV4KG5leHRQcm9wcy5yb3dJbmRleCwgdGhpcy5zdG9yZS5nZXRTdGF0ZSgpKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgcm93SW5kZXgsIGNvbHVtbktleSB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENlbGw+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2xpY2t9XG4gICAgICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICBfX2h0bWw6IHRoaXMucHJvcHMuZGF0YUxpc3Rbcm93SW5kZXhdW2NvbHVtbktleV1cbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIENsaWNrYWJsZUNlbGwgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlQ2xpY2thYmxlPXRoaXMudXBkYXRlQ2xpY2thYmxlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICB1bkNsaWNrYWJsZTogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gbmV3IFRhYmxlU2VydmljZSgpO1xuICAgIH1cblxuICAgIG9uQ2xpY2soZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkNlbGxDbGlja2VkICYmICF0aGlzLnN0YXRlLnVuQ2xpY2thYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2VsbENsaWNrZWQodGhpcy5wcm9wcy5kYXRhTGlzdFt0aGlzLnByb3BzLnJvd0luZGV4XSwgdGhpcy5wcm9wcy5jb2x1bW5LZXkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlQ2xpY2thYmxlKCl7XG4gICAgICAgIGNvbnN0IHVuQ2xpY2thYmxlQ2VsbHMgPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkudW5DbGlja2FibGVDZWxscztcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB1bkNsaWNrYWJsZTogdGhpcy5wcm9wcy5jb2x1bW5LZXkgaW4gdW5DbGlja2FibGVDZWxsc1xuICAgICAgICAgICAgICAgICYmIHVuQ2xpY2thYmxlQ2VsbHNbdGhpcy5wcm9wcy5jb2x1bW5LZXldLmluY2x1ZGVzKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2UuZ2V0Um93S2V5VmFsRnJvbUluZGV4KHRoaXMucHJvcHMucm93SW5kZXgsIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLnN0b3JlID0gUyh0aGlzLnByb3BzLmFwcElkKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZXIgPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuVU5DTElDS0FCTEVfQ0VMTFNfVVBEQVRFRCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDbGlja2FibGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlQ2xpY2thYmxlKCk7XG4gICAgfVxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlcigpO1xuICAgIH1cbiAgICAvL211c3QgcHV0IGhlcmUgdG8gcHJldmVudCByZXBlYXRlZCBkaXNwbGF5IG9mIGNoZWNrYm94LCBpdCBpcyBiZWNhdXNlIHJldXNpbmcuLi5cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5yb3dJbmRleCAhPT0gbmV4dFByb3BzLnJvd0luZGV4KSB7XG4gICAgICAgICAgICAvLyB1c2luZyBuZXh0UHJvcHMucm93SW5kZXggYXMgcmVhbCByb3dJbmRleFxuICAgICAgICAgICAgY29uc3QgdW5DbGlja2FibGVDZWxscyA9IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS51bkNsaWNrYWJsZUNlbGxzO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgdW5DbGlja2FibGU6IHRoaXMucHJvcHMuY29sdW1uS2V5IGluIHVuQ2xpY2thYmxlQ2VsbHNcbiAgICAgICAgICAgICAgICAgICAgJiYgdW5DbGlja2FibGVDZWxsc1t0aGlzLnByb3BzLmNvbHVtbktleV0uaW5jbHVkZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZpY2UuZ2V0Um93S2V5VmFsRnJvbUluZGV4KG5leHRQcm9wcy5yb3dJbmRleCwgdGhpcy5zdG9yZS5nZXRTdGF0ZSgpKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgcm93SW5kZXgsIGNvbHVtbktleSB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENlbGw+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e0NsYXNzTmFtZXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJhdXRvRWxsaXBzZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGlja2FibGVDZWxsXCI6ICF0aGlzLnN0YXRlLnVuQ2xpY2thYmxlXG4gICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLm9uQ2xpY2t9XG4gICAgICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICBfX2h0bWw6IHRoaXMucHJvcHMuZGF0YUxpc3Rbcm93SW5kZXhdW2NvbHVtbktleV1cbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbGxhcHNlSGVhZGVyQ2VsbCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgYWxsT3BlbmVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl90b2dnbGUgPSB0aGlzLl90b2dnbGUuYmluZCh0aGlzKTtcbiAgICB9XG4gICAgX3RvZ2dsZSgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5jYWxsYmFjayghdGhpcy5zdGF0ZS5hbGxPcGVuZWQpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGFsbE9wZW5lZDogIXRoaXMuc3RhdGUuYWxsT3BlbmVkXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RvZ2dsZSgpO1xuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjb2xsYXBzZVRvZ2dsZXIgaGVhZGVyQ29udHJvbGxlckljb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Q2xhc3NOYW1lcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtYXRlcmlhbC1pY29uc1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5X3JpZ2h0OiAhdGhpcy5zdGF0ZS5hbGxPcGVuZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlfcmlnaHRfZG93bjogdGhpcy5zdGF0ZS5hbGxPcGVuZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFycm93X3JpZ2h0XG4gICAgICAgICAgICAgICAgICAgIDwvaT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb2xsYXBzZUNlbGwgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gbmV3IFRhYmxlU2VydmljZSgpO1xuICAgICAgICB0aGlzLl90b2dnbGVSb3cgPSB0aGlzLl90b2dnbGVSb3cuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5zdG9yZSA9IFModGhpcy5wcm9wcy5hcHBJZCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVyID0gdGhpcy5zdG9yZS5zdWJzY3JpYmVUbyh0aGlzLnN0b3JlLlRPR0dMRV9BTExfUk9XUywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2VydmljZS5pc1Jvd1NlbGVjdGVkKHRoaXMucHJvcHMucm93SW5kZXgsIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKSkpIHRoaXMuX3RvZ2dsZVJvdygpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfdG9nZ2xlUm93KCkge1xuICAgICAgICB0aGlzLnByb3BzLmNhbGxiYWNrKHRoaXMucHJvcHMucm93SW5kZXgpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlcigpO1xuICAgIH1cblxuICAgIC8vbXVzdCBwdXQgaGVyZSB0byBwcmV2ZW50IHJlcGVhdGVkIGRpc3BsYXkgb2YgY2hlY2tib3gsIGl0IGlzIGJlY2F1c2UgcmV1c2luZy4uLlxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIC8vIGlmKHRoaXMucHJvcHMucm93SW5kZXggIT09IG5leHRQcm9wcy5yb3dJbmRleCAmJlxuICAgICAgICAvLyAgICAgdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmFsbE9wZW5lZCl7XG4gICAgICAgIC8vICAgICB0aGlzLl90b2dnbGVSb3coKTtcbiAgICAgICAgLy8gfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBjb2xsYXBzZWRSb3dzLCByb3dJbmRleCwgY2FsbGJhY2sgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RvZ2dsZVJvdygpO1xuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjb2xsYXBzZVRvZ2dsZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Q2xhc3NOYW1lcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtYXRlcmlhbC1pY29uc1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5X3JpZ2h0OiAhY29sbGFwc2VkUm93cy5oYXMocm93SW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5X3JpZ2h0X2Rvd246IGNvbGxhcHNlZFJvd3MuaGFzKHJvd0luZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyb3dfcmlnaHRcbiAgICAgICAgICAgICAgICAgICAgPC9pPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbHVtbkNoZWNrQm94Q2VsbCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjaGVja2VkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9vbkNoYW5nZSA9IHRoaXMuX29uQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc2VydmljZSA9IG5ldyBUYWJsZVNlcnZpY2UoKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5zdG9yZSA9IFModGhpcy5wcm9wcy5hcHBJZCk7XG4gICAgICAgIHRoaXMudW5TdWJzY3JpYmVTZWxlY3RBbGwgPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuUk9XX0FMTF9TRUxFQ1RFRCwgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHN0YXRlT2JqID0ge307XG4gICAgICAgICAgICBzdGF0ZU9ialtcImNoZWNrZWRcIl0gPSB0aGlzLnN0b3JlLmdldFN0YXRlKCkucm93QWxsU2VsZWN0ZWQ7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHN0YXRlT2JqKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZy5kZUNvdXBsZVJvd1NlbGVjdEFuZENoZWNrYm94KSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjaGVja2VkOiB0aGlzLnNlcnZpY2UuaXNSb3dTZWxlY3RlZCh0aGlzLnByb3BzLnJvd0luZGV4LCB0aGlzLnN0b3JlLmdldFN0YXRlKCkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudW5TdWJzY3JpYlJvd1NlbGVjdGVkID0gdGhpcy5zdG9yZS5zdWJzY3JpYmVUbyh0aGlzLnN0b3JlLlJPV19TRUxFQ1RFRCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiB0aGlzLnNlcnZpY2UuaXNSb3dTZWxlY3RlZCh0aGlzLnByb3BzLnJvd0luZGV4LCBTKHRoaXMucHJvcHMuYXBwSWQpLmdldFN0YXRlKCkpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudW5TdWJzY3JpYmVTaW5nbGVSb3dTZWxlY3RlZCA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5TSU5HTEVfUk9XX1NFTEVDVEVELCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IHRoaXMuc2VydmljZS5pc1Jvd1NlbGVjdGVkKHRoaXMucHJvcHMucm93SW5kZXgsIFModGhpcy5wcm9wcy5hcHBJZCkuZ2V0U3RhdGUoKSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9tdXN0IHB1dCBoZXJlIHRvIHByZXZlbnQgcmVwZWF0ZWQgZGlzcGxheSBvZiBjaGVja2JveCwgaXQgaXMgYmVjYXVzZSByZXVzaW5nLi4uXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucm93SW5kZXggIT09IG5leHRQcm9wcy5yb3dJbmRleCkge1xuICAgICAgICAgICAgLy8gdXNpbmcgbmV4dFByb3BzLnJvd0luZGV4IGFzIHJlYWwgcm93SW5kZXhcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGNoZWNrZWQ6IHRoaXMuc2VydmljZS5pc1Jvd1NlbGVjdGVkKG5leHRQcm9wcy5yb3dJbmRleCwgUyh0aGlzLnByb3BzLmFwcElkKS5nZXRTdGF0ZSgpKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy51blN1YnNjcmliZVNlbGVjdEFsbCgpO1xuICAgICAgICBpZiAoIXRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWcuZGVDb3VwbGVSb3dTZWxlY3RBbmRDaGVja2JveCkge1xuICAgICAgICAgICAgdGhpcy51blN1YnNjcmliUm93U2VsZWN0ZWQoKTtcbiAgICAgICAgICAgIHRoaXMudW5TdWJzY3JpYmVTaW5nbGVSb3dTZWxlY3RlZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uQ2hhbmdlKGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNoZWNrZWQ6IGUudGFyZ2V0LmNoZWNrZWQgfSk7XG4gICAgICAgIGlmICghdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZy5kZUNvdXBsZVJvd1NlbGVjdEFuZENoZWNrYm94KSB7XG4gICAgICAgICAgICAvL3dlIG9ubHkgdG9nZ2xlIGhlcmUgaWYgbm8gZGVjb3VwbGVcbiAgICAgICAgICAgIHRoaXMuc3RvcmUudG9nZ2xlUm93U2VsZWN0ZWQodGhpcy5wcm9wcy5yb3dJbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL290aGVyd2lzZSwgd2Ugd2lsbCBkaXNwYXRjaCBkaWZmZXJlbnQgZXZlbnRcbiAgICAgICAgICAgIHRoaXMuc3RvcmUudG9nZ2xlQ2hlY2tCb3hDaGFuZ2VkKHRoaXMucHJvcHMucm93SW5kZXgsIGUudGFyZ2V0LmNoZWNrZWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENlbGw+XG4gICAgICAgICAgICAgICAgPGRpdj5DaGVja2JveDwvZGl2PlxuICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICApO1xuICAgIH1cbn1cbi8vIDxDaGVja2JveCBrZXk9e3RoaXMucHJvcHMucm93SW5kZXh9IGNoZWNrZWQ9e3RoaXMuc3RhdGUuY2hlY2tlZH0gb25DaGFuZ2U9e3RoaXMuX29uQ2hhbmdlfSAvPlxuZXhwb3J0IGNsYXNzIENvbHVtblJhZGlvQnV0dG9uQ2VsbCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjaGVja2VkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9vbkNoYW5nZSA9IHRoaXMuX29uQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc2VydmljZSA9IG5ldyBUYWJsZVNlcnZpY2UoKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5zdG9yZSA9IFModGhpcy5wcm9wcy5hcHBJZCk7XG4gICAgICAgIGlmICghdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZy5kZUNvdXBsZVJvd1NlbGVjdEFuZENoZWNrYm94KSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjaGVja2VkOiB0aGlzLnNlcnZpY2UuaXNSb3dTZWxlY3RlZCh0aGlzLnByb3BzLnJvd0luZGV4LCB0aGlzLnN0b3JlLmdldFN0YXRlKCkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudW5TdWJzY3JpYmVSb3dTZWxlY3RlZCA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5ST1dfU0VMRUNURUQsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogdGhpcy5zZXJ2aWNlLmlzUm93U2VsZWN0ZWQodGhpcy5wcm9wcy5yb3dJbmRleCwgUyh0aGlzLnByb3BzLmFwcElkKS5nZXRTdGF0ZSgpKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnVuU3Vic2NyaWJlU2luZ2xlUm93U2VsZWN0ZWQgPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuU0lOR0xFX1JPV19TRUxFQ1RFRCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiB0aGlzLnNlcnZpY2UuaXNSb3dTZWxlY3RlZCh0aGlzLnByb3BzLnJvd0luZGV4LCBTKHRoaXMucHJvcHMuYXBwSWQpLmdldFN0YXRlKCkpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0b3JlLmdldFN0YXRlKCkuY29uZmlnLmVuYWJsZVJhZGlvQnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLnVuU3Vic2NyaWJlQ2hlY2tCb3hDaGVja2VkID0gdGhpcy5zdG9yZS5zdWJzY3JpYmVUbyh0aGlzLnN0b3JlLkNIRUNLQk9YX0NIRUNLRUQsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogdGhpcy5zZXJ2aWNlLmlzUm93Q2hlY2tlZCh0aGlzLnByb3BzLnJvd0luZGV4LCBTKHRoaXMucHJvcHMuYXBwSWQpLmdldFN0YXRlKCkpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vbXVzdCBwdXQgaGVyZSB0byBwcmV2ZW50IHJlcGVhdGVkIGRpc3BsYXkgb2YgY2hlY2tib3gsIGl0IGlzIGJlY2F1c2UgcmV1c2luZy4uLlxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnJvd0luZGV4ICE9PSBuZXh0UHJvcHMucm93SW5kZXgpIHtcbiAgICAgICAgICAgIC8vIHVzaW5nIG5leHRQcm9wcy5yb3dJbmRleCBhcyByZWFsIHJvd0luZGV4XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjaGVja2VkOiB0aGlzLnNlcnZpY2UuaXNSb3dTZWxlY3RlZChuZXh0UHJvcHMucm93SW5kZXgsIFModGhpcy5wcm9wcy5hcHBJZCkuZ2V0U3RhdGUoKSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5zdG9yZS5nZXRTdGF0ZSgpLmNvbmZpZy5kZUNvdXBsZVJvd1NlbGVjdEFuZENoZWNrYm94KSB7XG4gICAgICAgICAgICB0aGlzLnVuU3Vic2NyaWJlUm93U2VsZWN0ZWQoKTtcbiAgICAgICAgICAgIHRoaXMudW5TdWJzY3JpYmVTaW5nbGVSb3dTZWxlY3RlZCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWcuZW5hYmxlUmFkaW9CdXR0b24pIHtcbiAgICAgICAgICAgIHRoaXMudW5TdWJzY3JpYmVDaGVja0JveENoZWNrZWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vbkNoYW5nZShlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBjaGVja2VkOiBlLnRhcmdldC5jaGVja2VkIH0pO1xuICAgICAgICBpZiAoIXRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWcuZGVDb3VwbGVSb3dTZWxlY3RBbmRDaGVja2JveCkge1xuICAgICAgICAgICAgLy93ZSBvbmx5IHRvZ2dsZSBoZXJlIGlmIG5vIGRlY291cGxlXG4gICAgICAgICAgICB0aGlzLnN0b3JlLnRvZ2dsZVJvd1NlbGVjdGVkKHRoaXMucHJvcHMucm93SW5kZXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9vdGhlcndpc2UsIHdlIHdpbGwgZGlzcGF0Y2ggZGlmZmVyZW50IGV2ZW50XG4gICAgICAgICAgICB0aGlzLnN0b3JlLnRvZ2dsZUNoZWNrQm94Q2hhbmdlZCh0aGlzLnByb3BzLnJvd0luZGV4LCBlLnRhcmdldC5jaGVja2VkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgZGVjb3VwbGVTZWxlY3Rpb24gPSBlID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0b3JlLmdldFN0YXRlKCkuY29uZmlnLmRlQ291cGxlUm93U2VsZWN0QW5kQ2hlY2tib3gpIHtcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENlbGw+XG4gICAgICAgICAgICAgICAgPGRpdiBvbkNsaWNrPXtlID0+IGRlY291cGxlU2VsZWN0aW9uKGUpfT5cbiAgICAgICAgICAgICAgICAgICAgUmFkaW9cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgKTtcbiAgICB9XG59XG4vLyA8UmFkaW8ga2V5PXt0aGlzLnByb3BzLnJvd0luZGV4fSBjaGVja2VkPXt0aGlzLnN0YXRlLmNoZWNrZWR9IHZhbHVlPVwibnVsbFwiIG9uQ2hhbmdlPXt0aGlzLl9vbkNoYW5nZX0gLz5cbmV4cG9ydCBjbGFzcyBDb2x1bW5IZWFkZXJDaGVja0JveENlbGwgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY2hlY2tlZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gbmV3IFRhYmxlU2VydmljZSgpO1xuICAgICAgICB0aGlzLl9vbkNoYW5nZSA9IHRoaXMuX29uQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX3Jvd0NoZWNrZWQgPSB0aGlzLl9yb3dDaGVja2VkLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBTKHRoaXMucHJvcHMuYXBwSWQpO1xuICAgICAgICB0aGlzLnVuU3Vic2NyaWJlclNlbGVjdE9uZSA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5ST1dfU0VMRUNURUQsIHN0YXRlID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Jvd0NoZWNrZWQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vVUktMjk3Ni1DbGVhcm5cbiAgICAgICAgdGhpcy51blN1YnNjcmliZXJTZWxlY3RBbGwgPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuUk9XX0FMTF9TRUxFQ1RFRCwgc3RhdGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcm93Q2hlY2tlZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHRoaXMudW5TdWJzY3JpYmVyU2VsZWN0T25lKCk7XG4gICAgICAgIHRoaXMudW5TdWJzY3JpYmVyU2VsZWN0QWxsKCk7XG4gICAgfVxuICAgIF9yb3dDaGVja2VkKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGNoZWNrZWQ6IHRoaXMuc2VydmljZS5pc0FsbFJvd1NlbGVjdGVkKFxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5kYXRhTGlzdCxcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JlLmdldFN0YXRlKCkuY29uZmlnLFxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5zZWxlY3RlZFJvd0tleXNcbiAgICAgICAgICAgIClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9vbkNoYW5nZSgpIHtcbiAgICAgICAgbGV0IG5ld0NoZWNrZWQgPSAhdGhpcy5zdGF0ZS5jaGVja2VkO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgY2hlY2tlZDogbmV3Q2hlY2tlZCB9KTtcbiAgICAgICAgdGhpcy5zdG9yZS5zZXRSb3dBbGxTZWxlY3RlZChuZXdDaGVja2VkKTtcbiAgICAgICAgLy90aGlzIGlzIHRvIGVuYWJsZSByb3cgaGlnaHRcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJyZXNpemVcIikpO1xuICAgICAgICB9LCAwKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgICAgICBjaGVja2JveFxuICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICApO1xuICAgIH1cbn1cbi8vIDxDaGVja2JveFxuLy8gICAgIGNsYXNzTmFtZT1cImhlYWRlckNlbGxDaGVja2JveCBoZWFkZXJDb250cm9sbGVySWNvblwiXG4vLyAgICAga2V5PXt0aGlzLnByb3BzLnJvd0luZGV4fVxuLy8gICAgIGNoZWNrZWQ9e3RoaXMuc3RhdGUuY2hlY2tlZH1cbi8vICAgICBvbkNoYW5nZT17dGhpcy5fb25DaGFuZ2V9XG4vLyAvPlxuZXhwb3J0IGNsYXNzIE5hdmlnYXRlQ2VsbCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9jbGljayA9IHRoaXMuX2NsaWNrLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc2VydmljZSA9IG5ldyBUYWJsZVNlcnZpY2UoKTtcbiAgICAgICAgdGhpcy5fcm93Q2hlY2tlZCA9IHRoaXMuX3Jvd0NoZWNrZWQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHJvd1NlbGVjdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICAgIHdpZHRoOiAwXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBTKHRoaXMucHJvcHMuYXBwSWQpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgd2lkdGg6IDUwLCBoZWlnaHQ6IHRoaXMuc3RvcmUuZ2V0U3RhdGUoKS5jb25maWcucm93SGVpZ2h0IH0pO1xuICAgICAgICB0aGlzLnVuU3Vic2NyaWJlclNlbGVjdFJvdyA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5ST1dfU0VMRUNURUQsIHN0YXRlID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Jvd0NoZWNrZWQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudW5TdWJzY3JpYmVyU2VsZWN0QWxsUm93ID0gdGhpcy5zdG9yZS5zdWJzY3JpYmVUbyh0aGlzLnN0b3JlLlJPV19BTExfU0VMRUNURUQsIHN0YXRlID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Jvd0NoZWNrZWQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3Jvd0NoZWNrZWQoKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy51blN1YnNjcmliZXJTZWxlY3RSb3coKTtcbiAgICAgICAgdGhpcy51blN1YnNjcmliZXJTZWxlY3RBbGxSb3coKTtcbiAgICB9XG5cbiAgICBfcm93Q2hlY2tlZCgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICByb3dTZWxlY3RlZDogdGhpcy5zZXJ2aWNlLmlzUm93U2VsZWN0ZWQodGhpcy5wcm9wcy5yb3dJbmRleCwgdGhpcy5zdG9yZS5nZXRTdGF0ZSgpKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfY2xpY2soZSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBpZiAoXCJvbk5hdmlnYXRlXCIgaW4gdGhpcy5wcm9wcykge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbk5hdmlnYXRlKHRoaXMucHJvcHMuZGF0YUxpc3RbdGhpcy5wcm9wcy5yb3dJbmRleF0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENlbGw+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuc3RhdGUud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuc3RhdGUuaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Q2xhc3NOYW1lcyh7IG5hdldyYXBwZXI6IHRydWUsIG5hdldyYXBwZXJTZWxlY3RlZDogdGhpcy5zdGF0ZS5yb3dTZWxlY3RlZCB9KX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5fY2xpY2t9PlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJtYXRlcmlhbC1pY29uc1wiPmFycm93X2ZvcndhcmQ8L2k+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ2VsbCB9IGZyb20gXCJmaXhlZC1kYXRhLXRhYmxlLTJcIjtcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBTIGZyb20gXCIuLi8uLi9yZWR1eC9zdG9yZVwiO1xuaW1wb3J0IFRhYmxlU2VydmljZSBmcm9tIFwiLi4vLi4vc2VydmljZXMvdGFibGVfc2VydmljZVwiO1xuaW1wb3J0IHsgRmlsdGVyLCBPUkRFUl9BU0MsIE9SREVSX0RFU0MsIE9SREVSX05PTkUgfSBmcm9tIFwiLi4vLi4vZW50aXRpZXMvY3VzdG9tX2NvbmZpZ1wiO1xuaW1wb3J0IFRldGhlckNvbXBvbmVudCBmcm9tIFwicmVhY3QtdGV0aGVyXCI7XG5pbXBvcnQgeyBUWVBFX0RBVEUsIFRZUEVfREFURVRJTUUsIFRZUEVfVEVYVCwgVFlQRV9IVE1MLCBUWVBFX0xJU1QsIFRZUEVfU0lOR0xFX1NFTEVDVF9BQ1RJT05TLCBUWVBFX1BVUkVfVEVYVCwgVFlQRV9DTElDS0FCTEUgfSBmcm9tIFwiLi4vLi4vZW50aXRpZXMvY29sdW1uXCI7XG5pbXBvcnQgQ2xhc3NOYW1lcyBmcm9tIFwiY2xhc3NuYW1lc1wiO1xuLy8gaW1wb3J0IHsgQ2hlY2tib3ggfSBmcm9tIFwicmVhY3QtbWRsXCI7XG5pbXBvcnQgeyBUb29sVGlwQ29tcCB9IGZyb20gXCIuL2NlbGxzXCI7XG5pbXBvcnQgeyBCb3VuZGVkVGV0aGVyQ29tcCB9IGZyb20gXCIuLi9Cb3VuZGVkVGV0aGVyQ29tcFwiO1xudmFyIERhdGV0aW1lID0gcmVxdWlyZSgncmVhY3QtZGF0ZXRpbWUnKTtcbmltcG9ydCB7XG4gICAgVFlQRV9DT05UQUlOUyxcbiAgICBUWVBFX0VRVUFMUyxcbiAgICBUWVBFX0dSRUFURVJfT1JfRVFVQUwsXG4gICAgVFlQRV9MRVNTX09SX0VRVUFMLFxuICAgIFRZUEVfQkVUV0VFTixcbiAgICBUWVBFX0lOLFxuICAgIFRZUEVfTlVNQkVSXG59IGZyb20gXCIuLi8uLi9lbnRpdGllcy9jdXN0b21fY29uZmlnXCI7XG5cbmV4cG9ydCBjbGFzcyBIZWFkZXJDZWxsIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY29sdW1uQ29uZmlnOiBudWxsLFxuICAgICAgICAgICAgb3BlbkZpbHRlcjogZmFsc2UsXG4gICAgICAgICAgICBtb3VzZUhvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgIGN1cnJlbnRGaWx0ZXJlZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gbmV3IFRhYmxlU2VydmljZSgpO1xuICAgICAgICB0aGlzLl9zZXRDZmcgPSB0aGlzLl9zZXRDZmcuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fc2V0RmlsdGVyQ2ZnID0gdGhpcy5fc2V0RmlsdGVyQ2ZnLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc29ydCA9IHRoaXMuc29ydC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmZpbHRlciA9IHRoaXMuZmlsdGVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25DbG9zZSA9IHRoaXMub25DbG9zZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uTW91c2VFbnRlclNvcnQgPSB0aGlzLm9uTW91c2VFbnRlclNvcnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vbk1vdXNlTGVhdmVTb3J0ID0gdGhpcy5vbk1vdXNlTGVhdmVTb3J0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25GaWx0ZXJVcGRhdGUgPSB0aGlzLm9uRmlsdGVyVXBkYXRlLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICAgICAgdGhpcy5zdG9yZSA9IFModGhpcy5wcm9wcy5hcHBJZCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVyQ2xvc2VBbGxQb3BVcCA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlVG8odGhpcy5zdG9yZS5DTE9TRV9BTExfRklMVEVSX1BPUFVQLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudW5zdWJzcmliZXJTb3J0Q29sdW1uID0gdGhpcy5zdG9yZS5zdWJzY3JpYmVUbyh0aGlzLnN0b3JlLlNPUlRfQ09MVU1OLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zZXRDZmcoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudW5zdWJzcmliZXJGaWx0ZXJDb2x1bW4gPSB0aGlzLnN0b3JlLnN1YnNjcmliZVRvKHRoaXMuc3RvcmUuRklMVEVSX1VQREFURSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fc2V0RmlsdGVyQ2ZnKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zZXRDZmcoKTtcbiAgICAgICAgdGhpcy5fc2V0RmlsdGVyQ2ZnKCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY3VycmVudFNvcnRlZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZXJDbG9zZUFsbFBvcFVwKCk7XG4gICAgICAgIHRoaXMudW5zdWJzcmliZXJTb3J0Q29sdW1uKCk7XG4gICAgICAgIHRoaXMudW5zdWJzcmliZXJGaWx0ZXJDb2x1bW4oKTtcbiAgICB9XG4gICAgX3NldENmZyAoKSB7XG4gICAgICAgIGxldCBjb2x1bW5Db25maWcgPSBTKHRoaXMucHJvcHMuYXBwSWQpXG4gICAgICAgICAgICAuZ2V0U3RhdGUoKVxuICAgICAgICAgICAgLmNvbmZpZy5nZXRDb2x1bW5Db25maWcodGhpcy5wcm9wcy5jb2x1bW5LZXkpO1xuICAgICAgICBsZXQgY3VzdG9tQ29uZmlnID0gUyh0aGlzLnByb3BzLmFwcElkKS5nZXRTdGF0ZSgpLmN1c3RvbUNvbmZpZztcbiAgICAgICAgbGV0IHNvcnRJY29uO1xuICAgICAgICBpZiAoY29sdW1uQ29uZmlnLnNvcnRhYmxlICYmIGN1c3RvbUNvbmZpZykge1xuICAgICAgICAgICAgaWYgKGN1c3RvbUNvbmZpZy5nZXRDb2x1bW5Tb3J0T3JkZXIodGhpcy5wcm9wcy5jb2x1bW5LZXkpICE9PSBPUkRFUl9OT05FKSB7XG4gICAgICAgICAgICAgICAgc29ydEljb24gPSA8aSBjbGFzc05hbWU9e1xuICAgICAgICAgICAgICAgICAgICBDbGFzc05hbWVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWF0ZXJpYWwtaWNvbnNcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic29ydEljb25VcFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzb3J0SWNvbkRvd25cIjogY3VzdG9tQ29uZmlnLnNvcnRlci5vcmRlciA9PT0gT1JERVJfREVTQ1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0+YXJyb3dfdXB3YXJkPC9pPjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvcnRJY29uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGNvbHVtbkNvbmZpZzogY29sdW1uQ29uZmlnLFxuICAgICAgICAgICAgc29ydEljb246IHNvcnRJY29uXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9zZXRGaWx0ZXJDZmcgKCkge1xuICAgICAgICBsZXQgY3VzdG9tQ29uZmlnID0gUyh0aGlzLnByb3BzLmFwcElkKS5nZXRTdGF0ZSgpLmN1c3RvbUNvbmZpZztcbiAgICAgICAgbGV0IGN1cnJlbnRGaWx0ZXJlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoY3VzdG9tQ29uZmlnICYmIGN1c3RvbUNvbmZpZy5nZXRGaWx0ZXJGb3IodGhpcy5wcm9wcy5jb2x1bW5LZXkpKSB7XG4gICAgICAgICAgICBjdXJyZW50RmlsdGVyZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY3VycmVudEZpbHRlcmVkOiBjdXJyZW50RmlsdGVyZWRcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc29ydCAoKSB7XG4gICAgICAgIGxldCBjb2x1bW5Db25maWcgPSBTKHRoaXMucHJvcHMuYXBwSWQpXG4gICAgICAgICAgICAuZ2V0U3RhdGUoKVxuICAgICAgICAgICAgLmNvbmZpZy5nZXRDb2x1bW5Db25maWcodGhpcy5wcm9wcy5jb2x1bW5LZXkpO1xuICAgICAgICBpZiAoY29sdW1uQ29uZmlnLnNvcnRhYmxlKSB7XG4gICAgICAgICAgICBTKHRoaXMucHJvcHMuYXBwSWQpLnNldENvbHVtblNvcnQodGhpcy5wcm9wcy5jb2x1bW5LZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZpbHRlciAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50KSB7IGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOyB9XG4gICAgICAgIHRoaXMuc3RvcmUuY2xvc2VBbGxGaWx0ZXJQb3BVcCgpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG9wZW5GaWx0ZXI6ICF0aGlzLnN0YXRlLm9wZW5GaWx0ZXJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG9uQ2xvc2UgKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG9wZW5GaWx0ZXI6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbkZpbHRlclVwZGF0ZSAoZmlsdGVyKSB7XG4gICAgICAgIHRoaXMuc3RvcmUuc2V0RmlsdGVyKGZpbHRlcik7XG4gICAgfVxuICAgIG9uTW91c2VFbnRlclNvcnQgKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG1vdXNlSG92ZXI6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG9uTW91c2VMZWF2ZVNvcnQgKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG1vdXNlSG92ZXI6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW5kZXIgKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5jb2x1bW5Db25maWcgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgbGV0IGZpbHRlckljb247XG4gICAgICAgIGxldCBjb2x1bW5Db25maWcgPSBTKHRoaXMucHJvcHMuYXBwSWQpXG4gICAgICAgICAgICAuZ2V0U3RhdGUoKVxuICAgICAgICAgICAgLmNvbmZpZy5nZXRDb2x1bW5Db25maWcodGhpcy5wcm9wcy5jb2x1bW5LZXkpO1xuICAgICAgICBpZiAoY29sdW1uQ29uZmlnLmZpbHRlcmFibGUpIHtcbiAgICAgICAgICAgIGZpbHRlckljb24gPSAoXG4gICAgICAgICAgICAgICAgPGlcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtDbGFzc05hbWVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWF0ZXJpYWwtaWNvbnNcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwOiAhdGhpcy5zdGF0ZS5vcGVuRmlsdGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgZG93bjogdGhpcy5zdGF0ZS5vcGVuRmlsdGVyXG4gICAgICAgICAgICAgICAgICAgIH0pfT5cbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyX2xpc3RcbiAgICAgICAgICAgICAgICA8L2k+XG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmlsdGVySWNvbiA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc29ydEljb24gPSBudWxsO1xuICAgICAgICBpZiAoY29sdW1uQ29uZmlnLnNvcnRhYmxlICYmIHRoaXMuc3RhdGUubW91c2VIb3Zlcikge1xuICAgICAgICAgICAgc29ydEljb24gPSA8aSBjbGFzc05hbWU9e1xuICAgICAgICAgICAgICAgIENsYXNzTmFtZXMoe1xuICAgICAgICAgICAgICAgICAgICBcIm1hdGVyaWFsLWljb25zXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwic29ydEljb25VcFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9PmFycm93X3Vwd2FyZDwvaT47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPENlbGw+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJXcmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImhlYWRlclRpdGxlXCIgb25DbGljaz17dGhpcy5zb3J0fVxuICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyPXt0aGlzLm9uTW91c2VFbnRlclNvcnR9IG9uTW91c2VMZWF2ZT17dGhpcy5vbk1vdXNlTGVhdmVTb3J0fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5jb2x1bW5Db25maWcudGl0bGV9XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm91bmRlZFRldGhlckNvbXAgY2xhc3NOYW1lPVwiZHZUZXRoZXJlZFRvb2xUaXBcIiBhdHRhY2htZW50PVwidG9wIGNlbnRlclwiIGFwcElkPXt0aGlzLnByb3BzLmFwcElkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJoZWFkZXJUb29sdGlwQXR0YWNoUG9pbnRcIiAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLm1vdXNlSG92ZXIgJiYgdGhpcy5zdGF0ZS5jb2x1bW5Db25maWcudG9vbHRpcCAmJiA8VG9vbFRpcENvbXAgey4uLnRoaXMucHJvcHN9IGNvbnRlbnQ9e3RoaXMuc3RhdGUuY29sdW1uQ29uZmlnLnRvb2x0aXB9IC8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Cb3VuZGVkVGV0aGVyQ29tcD5cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e0NsYXNzTmFtZXMoeyBzb3J0SWNvbldyYXBwZXI6IHRydWUsIGhvdmVyU29ydDogdGhpcy5zdGF0ZS5tb3VzZUhvdmVyICYmICF0aGlzLnN0YXRlLnNvcnRJY29uIH0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyPXt0aGlzLm9uTW91c2VFbnRlclNvcnR9IG9uTW91c2VMZWF2ZT17dGhpcy5vbk1vdXNlTGVhdmVTb3J0fSBvbkNsaWNrPXt0aGlzLnNvcnR9XG4gICAgICAgICAgICAgICAgICAgID4ge3RoaXMuc3RhdGUuc29ydEljb24gfHwgc29ydEljb259IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Q2xhc3NOYW1lcyh7IGZpbHRlckljb25XcmFwcGVyOiB0cnVlLCBzZWxlY3RlZEZpbHRlcjogdGhpcy5zdGF0ZS5jdXJyZW50RmlsdGVyZWQgfSl9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtlID0+IHRoaXMuZmlsdGVyKGUpfVxuICAgICAgICAgICAgICAgICAgICA+IHtmaWx0ZXJJY29ufSA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxCb3VuZGVkVGV0aGVyQ29tcCBhdHRhY2htZW50PVwidG9wIGxlZnRcIiBhcHBJZD17dGhpcy5wcm9wcy5hcHBJZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmaWx0ZXJBdHRhY2hQb2ludFwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5vcGVuRmlsdGVyICYmIDxIZWFkZXJGaWx0ZXJDb21wIHsuLi50aGlzLnByb3BzfSBvbkNsb3NlPXt0aGlzLm9uQ2xvc2V9IC8+fVxuICAgICAgICAgICAgICAgICAgICA8L0JvdW5kZWRUZXRoZXJDb21wPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuY2xhc3MgSGVhZGVyRmlsdGVyQ29tcCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yIChwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgfVxuICAgIHJlbmRlciAoKSB7XG4gICAgICAgIGxldCBjb2x1bW5Db25maWcgPSBTKHRoaXMucHJvcHMuYXBwSWQpXG4gICAgICAgICAgICAuZ2V0U3RhdGUoKVxuICAgICAgICAgICAgLmNvbmZpZy5nZXRDb2x1bW5Db25maWcodGhpcy5wcm9wcy5jb2x1bW5LZXkpO1xuICAgICAgICBsZXQgZmlsdGVyQ29tcCA9IG51bGw7XG5cbiAgICAgICAgaWYoY29sdW1uQ29uZmlnLnR5cGUgPT09IFRZUEVfTlVNQkVSKXtcbiAgICAgICAgICAgIGZpbHRlckNvbXAgPSA8SGVhZGVyRmlsdGVyTnVtYmVyQ29tcCB7Li4udGhpcy5wcm9wc30gLz47XG4gICAgICAgIH1lbHNlIGlmIChjb2x1bW5Db25maWcudHlwZSA9PT0gVFlQRV9TSU5HTEVfU0VMRUNUX0FDVElPTlMgfHwgY29sdW1uQ29uZmlnLmZpbHRlck9wdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZmlsdGVyQ29tcCA9IDxIZWFkZXJGaWx0ZXJMaXN0Q29tcCB7Li4udGhpcy5wcm9wc30gLz47XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBjb2x1bW5Db25maWcudHlwZSA9PT0gVFlQRV9URVhUIHx8XG4gICAgICAgICAgICBjb2x1bW5Db25maWcudHlwZSA9PT0gVFlQRV9QVVJFX1RFWFQgfHxcbiAgICAgICAgICAgIGNvbHVtbkNvbmZpZy50eXBlID09PSBUWVBFX0hUTUwgfHxcbiAgICAgICAgICAgIGNvbHVtbkNvbmZpZy50eXBlID09PSBUWVBFX0xJU1QgfHxcbiAgICAgICAgICAgIGNvbHVtbkNvbmZpZy50eXBlID09PSBUWVBFX0NMSUNLQUJMRVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGZpbHRlckNvbXAgPSA8SGVhZGVyRmlsdGVyQ29tcFRleHRIdG1sIHsuLi50aGlzLnByb3BzfSAvPjtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGNvbHVtbkNvbmZpZy50eXBlID09PSBUWVBFX0RBVEUgfHwgY29sdW1uQ29uZmlnLnR5cGUgPT09IFRZUEVfREFURVRJTUVcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBmaWx0ZXJDb21wID0gPEhlYWRlckZpbHRlckRhdGVUaW1lQ29tcCB7Li4udGhpcy5wcm9wc30gLz47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtDbGFzc05hbWVzKHtcbiAgICAgICAgICAgIFwiaGVhZGVyRmlsdGVyV3JhcHBlclwiOiB0cnVlLFxuICAgICAgICAgICAgXCJub3JtYUZpbHRlcmxXcmFwcGVyXCI6ICEoY29sdW1uQ29uZmlnLnR5cGUgPT09IFRZUEVfREFURSB8fCBjb2x1bW5Db25maWcudHlwZSA9PT0gVFlQRV9EQVRFVElNRSksXG4gICAgICAgICAgICBcImRhdGVUaW1lUGlja2VyV3JhcHBlclwiOiBjb2x1bW5Db25maWcudHlwZSA9PT0gVFlQRV9EQVRFIHx8IGNvbHVtbkNvbmZpZy50eXBlID09PSBUWVBFX0RBVEVUSU1FXG4gICAgICAgIH0pfSBvbkNsaWNrPXtlID0+IGUuc3RvcFByb3BhZ2F0aW9uKCl9PntmaWx0ZXJDb21wfTwvZGl2PjtcbiAgICB9XG59XG5cbmNsYXNzIEhlYWRlckZpbHRlck51bWJlckNvbXAgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuXG4gICAgICAgIHRoaXMudXBkYXRlU3RhcnROdW0gPSB0aGlzLnVwZGF0ZVN0YXJ0TnVtLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudXBkYXRlRW5kTnVtID0gdGhpcy51cGRhdGVFbmROdW0uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5jb25maXJtID0gdGhpcy5jb25maXJtLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuY2xvc2VtZSA9IHRoaXMuY2xvc2VtZS5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuY3VzdG9tQ29uZmlnID0gUyh0aGlzLnByb3BzLmFwcElkKS5nZXRTdGF0ZSgpLmN1c3RvbUNvbmZpZztcbiAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVyID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5jdXN0b21Db25maWcpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEZpbHRlciA9IHRoaXMuY3VzdG9tQ29uZmlnLmdldEZpbHRlckZvcih0aGlzLnByb3BzLmNvbHVtbktleSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jdXJyZW50RmlsdGVyKSB7XG4gICAgICAgICAgICB0aGlzLmZpbHRlciA9IG5ldyBGaWx0ZXIoe1xuICAgICAgICAgICAgICAgIGJ5OiB0aGlzLnByb3BzLmNvbHVtbktleSxcbiAgICAgICAgICAgICAgICBvcGVyYXRvcjogVFlQRV9CRVRXRUVOLFxuICAgICAgICAgICAgICAgIHZhbHVlMTogdGhpcy5jdXJyZW50RmlsdGVyLnZhbHVlMSxcbiAgICAgICAgICAgICAgICB2YWx1ZTI6IHRoaXMuY3VycmVudEZpbHRlci52YWx1ZTIsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyID0gbmV3IEZpbHRlcih7IGJ5OiB0aGlzLnByb3BzLmNvbHVtbktleSwgb3BlcmF0b3I6IFRZUEVfQkVUV0VFTiwgdmFsdWUxOiAwLCB2YWx1ZTI6IDAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVTdGFydE51bSAoZSkge1xuICAgICAgICB0aGlzLmZpbHRlci52YWx1ZTEgPSBlLnRhcmdldC52YWx1ZTtcbiAgICB9XG4gICAgdXBkYXRlRW5kTnVtIChlKSB7XG4gICAgICAgIHRoaXMuZmlsdGVyLnZhbHVlMiA9IGUudGFyZ2V0LnZhbHVlO1xuICAgIH1cbiAgICBjb25maXJtICgpIHtcbiAgICAgICAgUyh0aGlzLnByb3BzLmFwcElkKS5zZXRGaWx0ZXIodGhpcy5maWx0ZXIpO1xuICAgIH1cbiAgICBjbG9zZW1lICgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsb3NlKCk7XG4gICAgfVxuICAgIHJlbmRlciAoKSB7XG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlckZpbGVyTnVtYmVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlckZpbGVyTnVtYmVyRmlsdGVyc1wiPlxuICAgICAgICAgICAgICAgIDxzcGFuPkZyb206IDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0nbnVtYmVyJyBvbkNoYW5nZT17dGhpcy51cGRhdGVTdGFydE51bX0gLz5cbiAgICAgICAgICAgICAgICA8c3Bhbj5Ubzwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0nbnVtYmVyJyBvbkNoYW5nZT17dGhpcy51cGRhdGVFbmROdW19IC8+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjZnhcIj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyRmlsdGVyQnV0dG9uc1wiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT17Q2xhc3NOYW1lcyh7IFwibWF0ZXJpYWwtaWNvbnNcIjogdHJ1ZSB9KX0gb25DbGljaz17dGhpcy5jb25maXJtfT5cbiAgICAgICAgICAgICAgICAgICAgZG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgIDwvaT5cbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJtYXRlcmlhbC1pY29uc1wiIG9uQ2xpY2s9e3RoaXMuY2xvc2VtZX0+XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgPC9pPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PjtcbiAgICB9XG59XG5cbmNsYXNzIEhlYWRlckZpbHRlckRhdGVUaW1lQ29tcCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yIChwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBpbnZhbGlkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlU3RhcnREYXRlID0gdGhpcy51cGRhdGVTdGFydERhdGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy51cGRhdGVFbmREYXRlID0gdGhpcy51cGRhdGVFbmREYXRlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuY29uZmlybSA9IHRoaXMuY29uZmlybS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmNsb3NlbWUgPSB0aGlzLmNsb3NlbWUuYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLmN1c3RvbUNvbmZpZyA9IFModGhpcy5wcm9wcy5hcHBJZCkuZ2V0U3RhdGUoKS5jdXN0b21Db25maWc7XG4gICAgICAgIHRoaXMuY3VycmVudEZpbHRlciA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VzdG9tQ29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRGaWx0ZXIgPSB0aGlzLmN1c3RvbUNvbmZpZy5nZXRGaWx0ZXJGb3IodGhpcy5wcm9wcy5jb2x1bW5LZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEZpbHRlcikge1xuICAgICAgICAgICAgdGhpcy5maWx0ZXIgPSBuZXcgRmlsdGVyKHtcbiAgICAgICAgICAgICAgICBieTogdGhpcy5wcm9wcy5jb2x1bW5LZXksXG4gICAgICAgICAgICAgICAgb3BlcmF0b3I6IFRZUEVfQkVUV0VFTixcbiAgICAgICAgICAgICAgICB2YWx1ZTE6IG5ldyBEYXRlKHRoaXMuY3VycmVudEZpbHRlci52YWx1ZTEpLFxuICAgICAgICAgICAgICAgIHZhbHVlMjogbmV3IERhdGUodGhpcy5jdXJyZW50RmlsdGVyLnZhbHVlMiksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyID0gbmV3IEZpbHRlcih7IGJ5OiB0aGlzLnByb3BzLmNvbHVtbktleSwgb3BlcmF0b3I6IFRZUEVfQkVUV0VFTiwgdmFsdWUxOiBuZXcgRGF0ZSgpLCB2YWx1ZTI6IG5ldyBEYXRlKCkgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy90aGlzLmNoZWNrVmFsaWRhdGUoKTtcbiAgICB9XG5cbiAgICB1cGRhdGVTdGFydERhdGUgKGUpIHtcbiAgICAgICAgdGhpcy5maWx0ZXIudmFsdWUxID0gZS5fZC5nZXRUaW1lKCk7XG4gICAgICAgIHRoaXMuY2hlY2tWYWxpZGF0ZSgpO1xuICAgIH1cbiAgICB1cGRhdGVFbmREYXRlIChlKSB7XG4gICAgICAgIHRoaXMuZmlsdGVyLnZhbHVlMiA9IGUuX2QuZ2V0VGltZSgpO1xuICAgICAgICB0aGlzLmNoZWNrVmFsaWRhdGUoKTtcbiAgICB9XG5cbiAgICBjaGVja1ZhbGlkYXRlICgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpbnZhbGlkOiB0aGlzLmZpbHRlci5pblZhbGlkKClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uZmlybSAoKSB7XG4gICAgICAgIFModGhpcy5wcm9wcy5hcHBJZCkuc2V0RmlsdGVyKHRoaXMuZmlsdGVyKTtcbiAgICAgICAgdGhpcy5jbG9zZW1lKCk7XG4gICAgfVxuICAgIGNsb3NlbWUgKCkge1xuICAgICAgICB0aGlzLnByb3BzLm9uQ2xvc2UoKTtcbiAgICB9XG4gICAgcmVuZGVyICgpIHtcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyRmlsZXJEYXRlVGltZVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJEYXRlVGltZUZpbHRlcnNcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzdGFydERUV3JhcHBlclwiPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Gcm9tIERhdGVUaW1lPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8RGF0ZXRpbWUgZGF0ZUZvcm1hdD1cIllZWVktTU0tRERcIiBkZWZhdWx0VmFsdWU9e3RoaXMuZmlsdGVyLnZhbHVlMX0gb25DaGFuZ2U9e3RoaXMudXBkYXRlU3RhcnREYXRlfSAvPlxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJlbmREVFdyYXBlclwiPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5UbyBEYXRlVGltZTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPERhdGV0aW1lIGRhdGVGb3JtYXQ9XCJZWVlZLU1NLUREXCIgZGVmYXVsdFZhbHVlPXt0aGlzLmZpbHRlci52YWx1ZTJ9IG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZUVuZERhdGV9IC8+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2Z4XCI+PC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyRmlsdGVyQnV0dG9uc1wiPlxuICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmludmFsaWQgJiYgPGRpdiBjbGFzc05hbWU9J2Vycm9yJz57dGhpcy5zdGF0ZS5pbnZhbGlkfTwvZGl2Pn1cbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9e0NsYXNzTmFtZXMoeyBcIm1hdGVyaWFsLWljb25zXCI6IHRydWUsIFwiaGlkZGVuXCI6IHRoaXMuc3RhdGUuaW52YWxpZCB9KX0gb25DbGljaz17dGhpcy5jb25maXJtfT5cbiAgICAgICAgICAgICAgICAgICAgZG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgIDwvaT5cbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJtYXRlcmlhbC1pY29uc1wiIG9uQ2xpY2s9e3RoaXMuY2xvc2VtZX0+XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgPC9pPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PjtcbiAgICB9XG59XG5cbmNsYXNzIEhlYWRlckZpbHRlckxpc3RDaGVja0JveENvbXAgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLmZpbHRlciA9IHRoaXMuZmlsdGVyLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjaGVja2VkOiB0aGlzLnByb3BzLmN1cnJlbnRGaWx0ZXIudmFsdWUxLmluY2x1ZGVzKHRoaXMucHJvcHMuaXRlbS52YWx1ZSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY2hlY2tlZDogbmV4dFByb3BzLmN1cnJlbnRGaWx0ZXIudmFsdWUxLmluY2x1ZGVzKHRoaXMucHJvcHMuaXRlbS52YWx1ZSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZmlsdGVyICgpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjaGVja2VkOiAhdGhpcy5zdGF0ZS5jaGVja2VkXG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMudXBkYXRlRmlsdGVyKHRoaXMucHJvcHMuaXRlbSwgIXRoaXMuc3RhdGUuY2hlY2tlZCk7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuICAgIHJlbmRlciAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNoZWNrQm94Um93V3JhcHBlclwiPlxuICAgICAgICAgICAgICAgIDxzcGFuPkNoZWNrYm94PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRpdGxlXCIgb25DbGljaz17dGhpcy5maWx0ZXJ9PlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5pdGVtLnRpdGxlfVxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cbi8vIDxDaGVja2JveCBrZXk9e3RoaXMucHJvcHMuaXRlbS52YWx1ZX0gY2hlY2tlZD17dGhpcy5zdGF0ZS5jaGVja2VkfSBvbkNoYW5nZT17dGhpcy5maWx0ZXJ9IC8+XG5jbGFzcyBIZWFkZXJGaWx0ZXJMaXN0Q29tcCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yIChwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuY2xvc2VtZSA9IHRoaXMuY2xvc2VtZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmN1c3RvbUNvbmZpZyA9IFModGhpcy5wcm9wcy5hcHBJZCkuZ2V0U3RhdGUoKS5jdXN0b21Db25maWc7XG4gICAgICAgIHRoaXMuY3VycmVudEZpbHRlciA9IG51bGw7XG4gICAgICAgIHRoaXMuY29sdW1uQ29uZmlnID0gUyh0aGlzLnByb3BzLmFwcElkKVxuICAgICAgICAgICAgLmdldFN0YXRlKClcbiAgICAgICAgICAgIC5jb25maWcuZ2V0Q29sdW1uQ29uZmlnKHRoaXMucHJvcHMuY29sdW1uS2V5KTtcbiAgICAgICAgdGhpcy5rZXlzTWFwID0gW107XG4gICAgICAgIHRoaXMuY2hlY2tMaXN0ID0gW107XG4gICAgICAgIHRoaXMuZmlsdGVyT2JqID0ge1xuICAgICAgICAgICAgYnk6IHRoaXMucHJvcHMuY29sdW1uS2V5LFxuICAgICAgICAgICAgb3BlcmF0b3I6IFwiaW5cIixcbiAgICAgICAgICAgIHZhbHVlMTogW11cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuY29sdW1uQ29uZmlnLmZpbHRlck9wdGlvbnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNvbHVtbkNvbmZpZy5maWx0ZXJPcHRpb25zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzTWFwLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0udmFsdWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbHVtbkNvbmZpZy5hY3Rpb25PcHRpb25zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5jb2x1bW5Db25maWcuYWN0aW9uT3B0aW9ucy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMua2V5c01hcC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0udGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpdGVtLnZhbHVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpbHRlck9iai52YWx1ZTEgPSBbLi4udGhpcy5rZXlzTWFwXTtcbiAgICAgICAgdGhpcy5rZXlzTWFwLnVuc2hpZnQoe1xuICAgICAgICAgICAgdGl0bGU6ICdBbGwnLFxuICAgICAgICAgICAgdmFsdWU6ICdhbGwnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLmN1c3RvbUNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVyID0gdGhpcy5jdXN0b21Db25maWcuZ2V0RmlsdGVyRm9yKHRoaXMucHJvcHMuY29sdW1uS2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRGaWx0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyID0gbmV3IEZpbHRlcih7XG4gICAgICAgICAgICAgICAgYnk6IHRoaXMucHJvcHMuY29sdW1uS2V5LFxuICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBUWVBFX0VRVUFMUyxcbiAgICAgICAgICAgICAgICB2YWx1ZTE6IHRoaXMuY3VycmVudEZpbHRlci52YWx1ZTFcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmNoZWNrTGlzdCA9IHRoaXMua2V5c01hcC5tYXAoKGVsZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGVsZS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBlbGUudGl0bGUgPT09ICdBbGwnID8gYCR7dGhpcy5wcm9wcy5jb2x1bW5LZXl9X2FsbGAgOiBgJHtlbGUudGl0bGV9XyR7a2V5fWAsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBlbGUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IGVsZS50aXRsZSA9PT0gJ0FsbCcgPyB0aGlzLmN1cnJlbnRGaWx0ZXIudmFsdWUxLmxlbmd0aCArIDEgPT09IHRoaXMua2V5c01hcC5sZW5ndGggOiB0aGlzLmN1cnJlbnRGaWx0ZXIudmFsdWUxLmluY2x1ZGVzKGVsZS52YWx1ZSlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrTGlzdCA9IHRoaXMua2V5c01hcC5tYXAoKGVsZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGVsZS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBlbGUudGl0bGUgPT09ICdBbGwnID8gYCR7dGhpcy5wcm9wcy5jb2x1bW5LZXl9X2FsbGAgOiBgJHtlbGUudGl0bGV9XyR7a2V5fWAsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBlbGUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuZmlsdGVyID0gbmV3IEZpbHRlcih0aGlzLmZpbHRlck9iaik7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRGaWx0ZXIgPSB0aGlzLmZpbHRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBjaGVja0xpc3Q6IHRoaXMuY2hlY2tMaXN0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY2xvc2VtZSAoKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25DbG9zZSgpO1xuICAgIH1cbiAgICBjaGVja1RoaXMgKGl0ZW0pIHtcbiAgICAgICAgaWYgKGl0ZW0udGl0bGUgPT09ICdBbGwnKSB7XG4gICAgICAgICAgICBpZiAoaXRlbS5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja0xpc3QuZm9yRWFjaChpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaS5jaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tMaXN0LmZvckVhY2goaSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGkuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWx0ZXJWYWx1ZSA9IFtdO1xuICAgICAgICB0aGlzLmNoZWNrTGlzdC5mb3JFYWNoKGogPT4ge1xuICAgICAgICAgICAgaWYgKGl0ZW0udGl0bGUgIT09ICdBbGwnICYmIGoudGl0bGUgPT09IGl0ZW0udGl0bGUpIHtcbiAgICAgICAgICAgICAgICBqLmNoZWNrZWQgPSAhai5jaGVja2VkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW0udGl0bGUgIT09ICdBbGwnICYmIGouY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIGZpbHRlclZhbHVlLnB1c2goai52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdW5jaGVjayA9IHRoaXMuY2hlY2tMaXN0LmZpbmQoKGVsZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBpbmRleCAhPT0gMCAmJiBlbGUuY2hlY2tlZCA9PT0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNoZWNrTGlzdFswXS5jaGVja2VkID0gIXVuY2hlY2s7XG5cblxuICAgICAgICB0aGlzLmZpbHRlciA9IG5ldyBGaWx0ZXIoe1xuICAgICAgICAgICAgYnk6IHRoaXMucHJvcHMuY29sdW1uS2V5LFxuICAgICAgICAgICAgb3BlcmF0b3I6IFwiaW5cIixcbiAgICAgICAgICAgIHZhbHVlMTogZmlsdGVyVmFsdWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjaGVja0xpc3Q6IFsuLi50aGlzLmNoZWNrTGlzdF1cbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVyID0gdGhpcy5maWx0ZXI7XG4gICAgICAgICAgICBTKHRoaXMucHJvcHMuYXBwSWQpLnNldEZpbHRlcih0aGlzLmZpbHRlcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbmRlciAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlckxpc3RXcmFwcGVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJGaWx0ZXJCdXR0b25zXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cIm1hdGVyaWFsLWljb25zXCIgb25DbGljaz17dGhpcy5jbG9zZW1lfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyXG4gICAgICAgICAgICAgICAgICAgIDwvaT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuY2hlY2tMaXN0Lmxlbmd0aCAhPT0gMCAmJiB0aGlzLnN0YXRlLmNoZWNrTGlzdC5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPGRpdiBrZXk9e2l0ZW0ua2V5fSBjbGFzc05hbWU9XCJjaGVja0JveFJvd1dyYXBwZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5jaGVja2JveDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0aXRsZVwiIG9uQ2xpY2s9eygpID0+IHRoaXMuY2hlY2tUaGlzKGl0ZW0pfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2l0ZW0udGl0bGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+O1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cbi8vIDxDaGVja2JveCBjaGVja2VkPXtpdGVtLmNoZWNrZWR9IG9uQ2hhbmdlPXsoKSA9PiB0aGlzLmNoZWNrVGhpcyhpdGVtKX0gLz5cbmNsYXNzIEhlYWRlckZpbHRlckNvbXBUZXh0SHRtbCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yIChwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuY29uZmlybSA9IHRoaXMuY29uZmlybS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmNsb3NlbWUgPSB0aGlzLmNsb3NlbWUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vbkZvY3VzID0gdGhpcy5vbkZvY3VzLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub25CbHVyID0gdGhpcy5vbkJsdXIuYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLmN1c3RvbUNvbmZpZyA9IFModGhpcy5wcm9wcy5hcHBJZCkuZ2V0U3RhdGUoKS5jdXN0b21Db25maWc7XG4gICAgICAgIHRoaXMuY3VycmVudEZpbHRlciA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLmN1c3RvbUNvbmZpZykge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVyID0gdGhpcy5jdXN0b21Db25maWcuZ2V0RmlsdGVyRm9yKHRoaXMucHJvcHMuY29sdW1uS2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRGaWx0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyID0gbmV3IEZpbHRlcih7XG4gICAgICAgICAgICAgICAgYnk6IHRoaXMucHJvcHMuY29sdW1uS2V5LFxuICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBcImNvbnRhaW5zXCIsXG4gICAgICAgICAgICAgICAgdmFsdWUxOiB0aGlzLmN1cnJlbnRGaWx0ZXIudmFsdWUxXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyID0gbmV3IEZpbHRlcih7IGJ5OiB0aGlzLnByb3BzLmNvbHVtbktleSwgb3BlcmF0b3I6IFwiY29udGFpbnNcIiwgdmFsdWUxOiBcIlwiIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGZvY3VzZWQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgfVxuICAgIG9uRmlsdGVyVXBkYXRlIChmaWx0ZXIpIHtcbiAgICAgICAgUyh0aGlzLnByb3BzLmFwcElkKS5zZXRGaWx0ZXIodGhpcy5maWx0ZXIpO1xuICAgIH1cbiAgICBjb25maXJtICgpIHtcbiAgICAgICAgLy8gdGhpcy5maWx0ZXIudmFsdWUxID0gdGhpcy5yZWZzLmNvbHVtbklucHV0Qm94LnZhbHVlO1xuICAgICAgICAvLyBTKHRoaXMucHJvcHMuYXBwSWQpLnNldEZpbHRlcih0aGlzLmZpbHRlcik7XG4gICAgICAgIC8vIHRoaXMuY2xvc2VtZSgpO1xuICAgIH1cbiAgICBjbG9zZW1lICgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsb3NlKCk7XG4gICAgfVxuICAgIG9uRm9jdXMgKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGZvY3VzZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG9uQmx1ciAoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgZm9jdXNlZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlbmRlciAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmlsdGVyU2VhcmNoVGl0bGVcIj5QbGVhc2UgZW50ZXIgY29udGVudCB0byBzZWFyY2g6PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e0NsYXNzTmFtZXMoeyBmaWx0ZXJTZWFyY2hXcmFwcGVyOiB0cnVlLCBmb2N1c2VkOiB0aGlzLnN0YXRlLmZvY3VzZWQgfSl9PlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgcmVmPVwiY29sdW1uSW5wdXRCb3hcIiBwbGFjZWhvbGRlcj1cIlNlYXJjaFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkZvY3VzPXt0aGlzLm9uRm9jdXN9IG9uQmx1cj17dGhpcy5vbkJsdXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiIGRlZmF1bHRWYWx1ZT17dGhpcy5maWx0ZXIudmFsdWUxfSAvPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJtYXRlcmlhbC1pY29uc1wiPnNlYXJjaDwvaT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlckZpbHRlckJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwibWF0ZXJpYWwtaWNvbnNcIiBvbkNsaWNrPXt0aGlzLmNvbmZpcm19PlxuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZVxuICAgICAgICAgICAgICAgICAgICA8L2k+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cIm1hdGVyaWFsLWljb25zXCIgb25DbGljaz17dGhpcy5jbG9zZW1lfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyXG4gICAgICAgICAgICAgICAgICAgIDwvaT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9kYXRhdGFibGUuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBjb25zdCBUWVBFX1RFWFQgPSAndGV4dCc7XG5leHBvcnQgY29uc3QgVFlQRV9QVVJFX1RFWFQgPSAncHVyZV90ZXh0JztcbmV4cG9ydCBjb25zdCBUWVBFX0hUTUwgPSAnaHRtbCc7XG5leHBvcnQgY29uc3QgVFlQRV9DTElDS0FCTEUgPSAnY2xpY2thYmxlJztcbmV4cG9ydCBjb25zdCBUWVBFX1BVUkVfQ0xJQ0tBQkxFID0gJ3B1cmVfY2xpY2thYmxlJztcbmV4cG9ydCBjb25zdCBUWVBFX1NJTkdMRV9TRUxFQ1RfQUNUSU9OUyA9ICdzaW5nbGVfc2VsZWN0X2FjdGlvbnMnO1xuZXhwb3J0IGNvbnN0IFRZUEVfSUNPTl9DQUxMX0JBQ0sgPSAnaWNvbl9jYWxsX2JhY2snO1xuZXhwb3J0IGNvbnN0IFRZUEVfTElTVCA9ICdsaXN0JztcbmV4cG9ydCBjb25zdCBUWVBFX05VTUJFUiA9ICdudW1iZXInO1xuZXhwb3J0IGNvbnN0IFRZUEVfSFRNTF9MSVNUID0gJ2h0bWxfbGlzdCc7XG5leHBvcnQgY29uc3QgVFlQRV9NT1JFX09QVElPTlMgPSAnbW9yZV9vcHRpb25zJztcbmV4cG9ydCBjb25zdCBET1dOTE9BRF9TVEFOREFSRF9BTFdBWVMgPSAnYWx3YXlzJztcbmV4cG9ydCBjb25zdCBET1dOTE9BRF9TVEFOREFSRF9ORVZFUiA9ICduZXZlcic7XG5leHBvcnQgY29uc3QgVFlQRV9EQVRFID0gJ2RhdGUnO1xuZXhwb3J0IGNvbnN0IFRZUEVfREFURVRJTUUgPSAnZGF0ZV90aW1lJztcblxuZXhwb3J0IGNvbnN0IFRZUEVfTlVNQkVSX0ZPUk1BVF9DT01NQVNFUEVSQVRFRD0nQ09NTUFTRVBFUkFURUQnO1xuZXhwb3J0IGNvbnN0IFRZUEVfTlVNQkVSX0ZPUk1BVF9TSE9SVEVORUQ9J1NIT1JURU5FRCc7XG5cbmNsYXNzIENvbHVtbkFjdGlvbk9wdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICB0aGlzWyd2YWx1ZSddID0gJ3ZhbHVlJyBpbiBkYXRhID8gZGF0YS52YWx1ZSA6ICcnO1xuICAgICAgICB0aGlzWyd0aXRsZSddID0gJ3RpdGxlJyBpbiBkYXRhID8gZGF0YS50aXRsZSA6ICcnO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sdW1uIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCBpbmRleCkge1xuICAgICAgICB0aGlzW1wia2V5XCJdID0gZGF0YVtcImtleVwiXSB8fCBcIlwiO1xuICAgICAgICB0aGlzW1widGl0bGVcIl0gPSBkYXRhW1widGl0bGVcIl0gfHwgXCJcIjtcbiAgICAgICAgdGhpc1tcInR5cGVcIl0gPSBkYXRhW1widHlwZVwiXSB8fCBUWVBFX0hUTUw7IC8vIHRleHQgfCBodG1sXG4gICAgICAgIHRoaXNbXCJ3aWR0aFwiXSA9IGRhdGFbXCJ3aWR0aFwiXSB8fCAxMDA7XG4gICAgICAgIHRoaXNbXCJyZXNpemFibGVcIl0gPSBcInJlc2l6YWJsZVwiIGluIGRhdGEgPyBkYXRhLnJlc2l6YWJsZSA6IGZhbHNlO1xuICAgICAgICB0aGlzW1wicmVvcmRhYmxlXCJdID0gXCJyZW9yZGFibGVcIiBpbiBkYXRhID8gZGF0YS5yZW9yZGFibGUgOiBmYWxzZTtcbiAgICAgICAgdGhpc1tcImZsZXhHcm93XCJdID0gXCJmbGV4R3Jvd1wiIGluIGRhdGEgPyBkYXRhLmZsZXhHcm93IDogMTtcbiAgICAgICAgdGhpc1tcImZpeGVkXCJdID0gXCJmaXhlZFwiIGluIGRhdGEgPyBkYXRhLmZpeGVkIDogZmFsc2U7XG4gICAgICAgIHRoaXNbXCJmaXhlZFJpZ2h0XCJdID0gXCJmaXhlZFJpZ2h0XCIgaW4gZGF0YSA/IGRhdGEuZml4ZWRSaWdodCA6IGZhbHNlO1xuICAgICAgICB0aGlzWydmb3JtYXQnXSA9ICdmb3JtYXQnIGluIGRhdGE/ZGF0YS5mb3JtYXQ6Jyc7XG4gICAgICAgIHRoaXNbJ2VkaXRhYmxlJ10gPSAnZWRpdGFibGUnIGluIGRhdGE/ZGF0YS5lZGl0YWJsZTpmYWxzZTtcbiAgICAgICAgbGV0IGFjdGlvbk9wdGlvbnMgPSBbXTtcbiAgICAgICAgaWYgKCdhY3Rpb25PcHRpb25zJyBpbiBkYXRhKSB7XG4gICAgICAgICAgICBkYXRhLmFjdGlvbk9wdGlvbnMuZm9yRWFjaChvcHRpb24gPT4ge1xuICAgICAgICAgICAgICAgIGFjdGlvbk9wdGlvbnMucHVzaChuZXcgQ29sdW1uQWN0aW9uT3B0aW9uKG9wdGlvbikpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1snYWN0aW9uT3B0aW9ucyddID0gYWN0aW9uT3B0aW9ucztcblxuICAgICAgICB0aGlzWydoaWRkZW4nXSA9ICdoaWRkZW4nIGluIGRhdGEgPyBkYXRhLmhpZGRlbiA6IGZhbHNlO1xuICAgICAgICB0aGlzWydzb3J0YWJsZSddID0gJ3NvcnRhYmxlJyBpbiBkYXRhID8gZGF0YS5zb3J0YWJsZSA6IGZhbHNlO1xuICAgICAgICB0aGlzWydmaWx0ZXJhYmxlJ10gPSAnZmlsdGVyYWJsZScgaW4gZGF0YSA/IGRhdGEuZmlsdGVyYWJsZSA6IGZhbHNlO1xuICAgICAgICB0aGlzW1wicHJpbWFyeUtleVwiXSA9IFwicHJpbWFyeUtleVwiIGluIGRhdGEgPyBkYXRhLnByaW1hcnlLZXkgOiBpbmRleCA9PT0gMDtcbiAgICAgICAgdGhpc1snZmlsdGVyT3B0aW9ucyddID0gJ2ZpbHRlck9wdGlvbnMnIGluIGRhdGEgPyBkYXRhLmZpbHRlck9wdGlvbnMgOiBbXTtcbiAgICAgICAgdGhpc1snY29udHJvbGxlcnMnXSA9ICdjb250cm9sbGVycycgaW4gZGF0YSA/IGRhdGEuY29udHJvbGxlcnMgOiB7fTtcbiAgICAgICAgdGhpc1snZG93bmxvYWRTdGFuZGFyZCddID0gJ2Rvd25sb2FkU3RhbmRhcmQnIGluIGRhdGEgPyBkYXRhLmRvd25sb2FkU3RhbmRhcmQgOiAnJztcbiAgICAgICAgdGhpc1sndG9vbHRpcCddID0gJ3Rvb2x0aXAnIGluIGRhdGEgPyBkYXRhLnRvb2x0aXAgOiAnJztcbiAgICAgICAgdGhpc1snZGlzYWJsZVRvb2x0aXAnXSA9ICdkaXNhYmxlVG9vbHRpcCcgaW4gZGF0YT9kYXRhLmRpc2FibGVUb29sdGlwOmZhbHNlO1xuICAgICAgICAvL2R5bmFtaWNhbGx5IGFkanVzdCBjb2x1bW4gbWlud2lkdGgsIHNvIHRoYXQgaGVhZGVyIGlzIGZ1bGx5IHZpZXdcbiAgICAgICAgaWYgKCh0aGlzW1widGl0bGVcIl0gIT09ICcnKSkge1xuICAgICAgICAgICAgaWYgKHRoaXNbJ3dpZHRoJ10gPiAyMCkge1xuICAgICAgICAgICAgICAgIC8vZm9yIHNvbWUgY29sdW1uLCBzdWNoIGFzIHNwYWNlciwgd2UgbmVlZCBpdCB0byBiZSBzbWFsbFxuICAgICAgICAgICAgICAgIHRoaXNbJ21pbldpZHRoJ10gPSB0aGlzWydoaWRkZW4nXSA/IDAgOiAodGhpcy5nZXRXaWR0aE9mVGV4dCh0aGlzW1widGl0bGVcIl0pICsgMTAwKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1snbWluV2lkdGgnXSA+IHRoaXNbJ3dpZHRoJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1snd2lkdGgnXSA9IHRoaXNbJ21pbldpZHRoJ107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzWydtaW5XaWR0aCddID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXNbJ21pbldpZHRoJ10gPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEFjdGlvbk9wdGlvbnMob3B0aW9uVmFsdWUpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5hY3Rpb25PcHRpb25zLmZpbmQoaXRlbSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS52YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBvcHRpb25WYWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbiA/IG9wdGlvbiA6IHtcbiAgICAgICAgICAgIHRpdGxlOiBvcHRpb25WYWx1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBvcHRpb25WYWx1ZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0V2lkdGhPZlRleHQodHh0KSB7XG4gICAgICAgIGNvbnN0IGZvbnROYW1lID0gJ1JvYm90bywgXCJIZWx2ZXRpY2EgTmV1ZSBMaWdodFwiLCBcIkhlbHZldGljYSBOZXVlXCIsIEhlbHZldGljYSwgQXJpYWwsIFwiTHVjaWRhIEdyYW5kZVwiLCBzYW5zLXNlcmlmJztcbiAgICAgICAgY29uc3QgZm9udFNpemUgPSAnMTRweCc7XG4gICAgICAgIGlmICh0aGlzLmdldFdpZHRoT2ZUZXh0LmMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5nZXRXaWR0aE9mVGV4dC5jID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0V2lkdGhPZlRleHQuY3R4ID0gdGhpcy5nZXRXaWR0aE9mVGV4dC5jLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdldFdpZHRoT2ZUZXh0LmN0eC5mb250ID0gZm9udFNpemUgKyBcIiBcIiArIGZvbnROYW1lO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRXaWR0aE9mVGV4dC5jdHgubWVhc3VyZVRleHQodHh0KS53aWR0aDtcbiAgICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3VzdG9tQ29uZmlnIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHRoaXNbXCJjb2x1bW5zT3JkZXJcIl0gPSBbXTtcbiAgICAgICAgdGhpc1tcImhpZGRlbkNvbHVtbnNcIl0gPSBbXTtcbiAgICAgICAgdGhpc1tcInNvcnRlclwiXSA9IHt9O1xuICAgICAgICB0aGlzW1wiZmlsdGVyc1wiXSA9IFtdO1xuICAgICAgICB0aGlzW1wiY29sdW1uV2lkdGhzXCJdID0ge307XG5cbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChcImNvbHVtbnNPcmRlclwiIGluIGRhdGEpIHRoaXNbXCJjb2x1bW5zT3JkZXJcIl0gPSBkYXRhW1wiY29sdW1uc09yZGVyXCJdO1xuICAgICAgICAgICAgaWYgKFwiaGlkZGVuQ29sdW1uc1wiIGluIGRhdGEpIHRoaXNbXCJoaWRkZW5Db2x1bW5zXCJdID0gZGF0YVtcImhpZGRlbkNvbHVtbnNcIl07XG4gICAgICAgICAgICBpZiAoXCJzb3J0ZXJcIiBpbiBkYXRhKSB0aGlzW1wic29ydGVyXCJdID0gbmV3IFNvcnRlcihkYXRhLnNvcnRlcik7XG4gICAgICAgICAgICBpZiAoXCJjb2x1bW5XaWR0aHNcIiBpbiBkYXRhKSB0aGlzWydjb2x1bW5XaWR0aHMnXSA9IGRhdGFbJ2NvbHVtbldpZHRocyddO1xuICAgICAgICAgICAgaWYgKFwiZmlsdGVyc1wiIGluIGRhdGEpXG4gICAgICAgICAgICAgICAgZGF0YVtcImZpbHRlcnNcIl0uZm9yRWFjaChmaWx0ZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbHRlcnMucHVzaChuZXcgRmlsdGVyKGZpbHRlcikpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldENvbHVtbldpZHRocyh3aWR0aHMpIHtcbiAgICAgICAgdGhpc1snY29sdW1uV2lkdGhzJ10gPSB3aWR0aHM7XG4gICAgfVxuICAgIHNldENvbHVtbnNPcmRlcihjb2x1bW5zKSB7XG4gICAgICAgIHRoaXNbXCJjb2x1bW5zT3JkZXJcIl0gPSBjb2x1bW5zO1xuICAgIH1cblxuICAgIHNldEhpZGRlbkNvbHVtbnMoY29sdW1ucykge1xuICAgICAgICB0aGlzW1wiaGlkZGVuQ29sdW1uc1wiXSA9IGNvbHVtbnM7XG4gICAgfVxuXG4gICAgZ2V0Q29sdW1uU29ydE9yZGVyKGNvbHVtbktleSkge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5zb3J0ZXIpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIE9SREVSX05PTkU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zb3J0ZXIuYnkgPT09IGNvbHVtbktleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNvcnRlci5vcmRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9SREVSX05PTkU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVTb3J0ZXIoY29sdW1uS2V5KSB7XG4gICAgICAgIC8vaWYgc29ydGVyIGlzIGVtcHR5LCBjcmVhdGUgaXRcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuc29ydGVyKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc29ydGVyID0gbmV3IFNvcnRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc29ydGVyLnRvZ2dsZShjb2x1bW5LZXkpO1xuICAgIH1cblxuICAgIHVwZGF0ZUZpbHRlcihmaWx0ZXIpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gLTE7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmZpbHRlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcnNbaV0uYnkgPT09IGZpbHRlci5ieSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLzEuIGlmIG5vdCBleGlzdCwgd2UganVzdCBhZGRcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vMi4gaWYgZXhpc3QsIHdlIG5lZWQgdG8gdXBkYXRlXG4gICAgICAgICAgICAvLzIuMSwgaWYgdmFsdWUgaXMgZW1wdHksIHdlIHJlbW92ZSBpdDFcbiAgICAgICAgICAgIGxldCB0b1JlbW92ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGZpbHRlci5vcGVyYXRvciA9PT0gVFlQRV9DT05UQUlOUyB8fFxuICAgICAgICAgICAgICAgIGZpbHRlci5vcGVyYXRvciA9PT0gVFlQRV9FUVVBTFMgfHxcbiAgICAgICAgICAgICAgICBmaWx0ZXIub3BlcmF0b3IgPT09IFRZUEVfR1JFQVRFUl9PUl9FUVVBTCB8fFxuICAgICAgICAgICAgICAgIGZpbHRlci5vcGVyYXRvciA9PT0gVFlQRV9MRVNTX09SX0VRVUFMXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyLnZhbHVlMSA9PT0gXCJcIiB8fCBmaWx0ZXIudmFsdWUxID09PSB1bmRlZmluZWQgfHwgZmlsdGVyLnZhbHVlMSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgdG9SZW1vdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlci5vcGVyYXRvciA9PT0gVFlQRV9JTikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyLnZhbHVlMS5sZW5ndGg9PT0wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmIGVtcHR5IGxpc3QgaXRlbSwgbGV0J3MganVzdCByZW1vdmUgaXRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvUmVtb3ZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbGV0J3MgcmVtb3ZlIGZpbHRlclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b1JlbW92ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyLnZhbHVlMSA9PT0gXCJcIiB8fFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIudmFsdWUxID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyLnZhbHVlMSA9PSBudWxsIHx8XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlci52YWx1ZTIgPT09IFwiXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyLnZhbHVlMiA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlci52YWx1ZTIgPT0gbnVsbFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgdG9SZW1vdmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodG9SZW1vdmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy90b1VwZGF0ZVxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyc1tpbmRleF0gPSBmaWx0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRGaWx0ZXJGb3IoY29sS2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlcnMuZmluZChmaWx0ZXIgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGZpbHRlci5ieSA9PT0gY29sS2V5O1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBPUkRFUl9BU0MgPSBcImFzY1wiO1xuZXhwb3J0IGNvbnN0IE9SREVSX0RFU0MgPSBcImRlc2NcIjtcbmV4cG9ydCBjb25zdCBPUkRFUl9OT05FID0gXCJub25lXCI7XG5cbmV4cG9ydCBjbGFzcyBTb3J0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuYnkgPSBcImJ5XCIgaW4gZGF0YSA/IGRhdGFbXCJieVwiXSA6IFwiXCI7XG4gICAgICAgICAgICB0aGlzLm9yZGVyID0gXCJvcmRlclwiIGluIGRhdGEgPyBkYXRhW1wib3JkZXJcIl0gOiBPUkRFUl9BU0M7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJ5ID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMub3JkZXIgPSBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9nZ2xlKGNvbHVtbktleSkge1xuICAgICAgICBpZiAodGhpcy5ieSAhPT0gY29sdW1uS2V5KSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0U29ydChjb2x1bW5LZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVTb3J0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXNldFNvcnQoY29sdW1uS2V5KSB7XG4gICAgICAgIHRoaXMuYnkgPSBjb2x1bW5LZXk7XG4gICAgICAgIHRoaXMub3JkZXIgPSBPUkRFUl9BU0M7XG4gICAgfVxuXG4gICAgdG9nZ2xlU29ydCgpIHtcbiAgICAgICAgbGV0IG5leHRPcmRlcjtcbiAgICAgICAgaWYgKHRoaXMub3JkZXIgPT09IE9SREVSX0FTQykge1xuICAgICAgICAgICAgbmV4dE9yZGVyID0gT1JERVJfREVTQztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9yZGVyID09PSBPUkRFUl9ERVNDKSB7XG4gICAgICAgICAgICBuZXh0T3JkZXIgPSBPUkRFUl9OT05FO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dE9yZGVyID0gT1JERVJfQVNDO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3JkZXIgPSBuZXh0T3JkZXI7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgVFlQRV9DT05UQUlOUyA9IFwiY29udGFpbnNcIjtcbmV4cG9ydCBjb25zdCBUWVBFX0VRVUFMUyA9IFwiZXF1YWxzXCI7XG5leHBvcnQgY29uc3QgVFlQRV9HUkVBVEVSX09SX0VRVUFMID0gXCJncmVhdGVyX29yX2VxdWFsXCI7XG5leHBvcnQgY29uc3QgVFlQRV9MRVNTX09SX0VRVUFMID0gXCJsZXNzX29yX2VxdWFsXCI7XG5leHBvcnQgY29uc3QgVFlQRV9CRVRXRUVOID0gXCJiZXR3ZWVuXCI7XG5leHBvcnQgY29uc3QgVFlQRV9OVU1CRVIgPSBcIm51bWJlclwiO1xuZXhwb3J0IGNvbnN0IFRZUEVfSU4gPSBcImluXCI7XG5leHBvcnQgY2xhc3MgRmlsdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHRoaXMuYnkgPSBcImJ5XCIgaW4gZGF0YSA/IGRhdGEuYnkgOiBcIlwiO1xuICAgICAgICB0aGlzLm9wZXJhdG9yID0gXCJvcGVyYXRvclwiIGluIGRhdGEgPyBkYXRhLm9wZXJhdG9yIDogXCJcIjtcbiAgICAgICAgdGhpcy52YWx1ZTEgPSBcInZhbHVlMVwiIGluIGRhdGEgPyBkYXRhW1widmFsdWUxXCJdIDogXCJcIjtcbiAgICAgICAgdGhpcy52YWx1ZTIgPSBcInZhbHVlMlwiIGluIGRhdGEgPyBkYXRhW1widmFsdWUyXCJdIDogXCJcIjtcbiAgICB9XG5cbiAgICBpblZhbGlkKCl7XG4gICAgICAgIGlmKHRoaXMub3BlcmF0b3IgPT09IFRZUEVfQkVUV0VFTil7XG4gICAgICAgICAgICBsZXQgZXJyb3JDb2RlPSBmYWxzZTtcbiAgICAgICAgICAgIGlmKCF0aGlzLnZhbHVlMSl7XG4gICAgICAgICAgICAgICAgZXJyb3JDb2RlID0nU3RhcnQgZGF0ZXRpbWUgbWlzc2luZyc7XG4gICAgICAgICAgICB9ZWxzZSBpZighdGhpcy52YWx1ZTIpe1xuICAgICAgICAgICAgICAgIGVycm9yQ29kZSA9J0VuZCBkYXRldGltZSBtaXNzaW5nJztcbiAgICAgICAgICAgIH1lbHNlIGlmKHRoaXMudmFsdWUxPnRoaXMudmFsdWUyKXtcbiAgICAgICAgICAgICAgICBlcnJvckNvZGUgPSAnRW5kIGRhdGV0aW1lIGJlZm9yZSBzdGFydCBkYXRldGltZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXJyb3JDb2RlO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiY2xhc3MgTW9yZU9wdGlvbkl0ZW17XG4gICAgY29uc3RydWN0b3IoaXRlbSl7XG4gICAgICAgIGlmKHR5cGVvZiBpdGVtID09PSdzdHJpbmcnKXtcbiAgICAgICAgICAgIHRoaXNbJ3ZhbHVlJ10gPSBpdGVtO1xuICAgICAgICAgICAgdGhpc1sndGl0bGUnXSA9IGl0ZW07XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpc1sndmFsdWUnXSA9IGl0ZW1bJ3ZhbHVlJ107XG4gICAgICAgICAgICB0aGlzWyd0aXRsZSddID0gaXRlbVsndGl0bGUnXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vcmVPcHRpb25JdGVtc3tcbiAgICBjb25zdHJ1Y3RvcihsaXN0KXtcbiAgICAgICAgdGhpc1snbW9yZU9wdGlvbkl0ZW1zJ10gPSBbXTtcbiAgICAgICAgaWYobGlzdCl7XG4gICAgICAgICAgICBsaXN0LmZvckVhY2goaXRlbT0+e1xuICAgICAgICAgICAgICAgIHRoaXNbJ21vcmVPcHRpb25JdGVtcyddLnB1c2gobmV3IE1vcmVPcHRpb25JdGVtKGl0ZW0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZpbmRCeVZhbHVlKHZhbHVlKXtcbiAgICAgICAgbGV0IGZvdW5kSXRlbSA9IG51bGw7XG4gICAgICAgIHRoaXNbJ21vcmVPcHRpb25JdGVtcyddLmZvckVhY2goaXRlbT0+e1xuICAgICAgICAgICAgaWYoaXRlbS52YWx1ZSA9PSB2YWx1ZSl7XG4gICAgICAgICAgICAgICAgZm91bmRJdGVtID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmb3VuZEl0ZW07XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgdGhpc1tcInRvdGFsXCJdID0gXCJ0b3RhbFwiIGluIGRhdGEgPyBkYXRhW1widG90YWxcIl0gOiAwO1xuICAgICAgICAgICAgdGhpc1tcInBhZ2VTaXplXCJdID0gXCJwYWdlU2l6ZVwiIGluIGRhdGEgPyBkYXRhW1wicGFnZVNpemVcIl0gOiAyMDtcbiAgICAgICAgICAgIHRoaXNbXCJjdXJyZW50UGFnZVwiXSA9IFwiY3VycmVudFBhZ2VcIiBpbiBkYXRhID8gZGF0YVtcImN1cnJlbnRQYWdlXCJdIDogMTtcbiAgICAgICAgICAgIHRoaXNbXCJ0b3RhbFBhZ2VcIl0gPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpc1tcInRvdGFsXCJdID0gMDtcbiAgICAgICAgICAgIHRoaXNbXCJwYWdlU2l6ZVwiXSA9IDIwO1xuICAgICAgICAgICAgdGhpc1tcImN1cnJlbnRQYWdlXCJdID0gMTtcbiAgICAgICAgICAgIHRoaXNbXCJ0b3RhbFBhZ2VcIl0gPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLnRvdGFsID0gMDtcbiAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDE7XG4gICAgICAgIHRoaXMudG90YWxQYWdlID0gMDtcbiAgICB9XG4gICAgc2V0VG90YWwodG90YWwpIHtcbiAgICAgICAgdGhpcy50b3RhbCA9IHRvdGFsO1xuICAgICAgICBpZiAodG90YWwgJSB0aGlzLnBhZ2VTaXplID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnRvdGFsUGFnZSA9IHRvdGFsIC8gdGhpcy5wYWdlU2l6ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG90YWxQYWdlID0gTWF0aC5jZWlsKHRvdGFsIC8gdGhpcy5wYWdlU2l6ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0Q3VycmVudFBhZ2UocGFnZSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gcGFnZTtcbiAgICB9XG4gICAgZ2V0UGFnZVJhbmdlKCkge1xuICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLnBhZ2VTaXplICogKHRoaXMuY3VycmVudFBhZ2UgLSAxKSArIDE7XG4gICAgICAgIGxldCBlbmQgPSBNYXRoLm1pbih0aGlzLnBhZ2VTaXplICogdGhpcy5jdXJyZW50UGFnZSwgdGhpcy50b3RhbCk7XG4gICAgICAgIHJldHVybiBbc3RhcnQsIGVuZF07XG4gICAgfVxuICAgIGlzRmlyc3RFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50UGFnZSAhPT0gMTtcbiAgICB9XG4gICAgaXNQcmVFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50UGFnZSA+IDE7XG4gICAgfVxuICAgIGlzTmV4dEVuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRQYWdlIDwgdGhpcy50b3RhbFBhZ2U7XG4gICAgfVxuICAgIGlzTGFzdEVuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRQYWdlICE9PSB0aGlzLnRvdGFsUGFnZTtcbiAgICB9XG5cbiAgICBmaXJzdCgpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDE7XG4gICAgfVxuICAgIHByZSgpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50UGFnZS0tO1xuICAgIH1cbiAgICBuZXh0KCkge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50UGFnZSA8IHRoaXMudG90YWxQYWdlKSB0aGlzLmN1cnJlbnRQYWdlKys7XG4gICAgfVxuICAgIGxhc3QoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSB0aGlzLnRvdGFsUGFnZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgQ29sdW1uIGZyb20gXCIuL2NvbHVtblwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJsZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICB0aGlzWydyb3dIZWlnaHQnXSA9ICdyb3dIZWlnaHQnIGluIGRhdGEgPyBkYXRhLnJvd0hlaWdodCA6IDUwO1xuICAgICAgICB0aGlzWydoZWFkZXJIZWlnaHQnXSA9ICdoZWFkZXJIZWlnaHQnIGluIGRhdGEgPyBkYXRhLmhlYWRlckhlaWdodCA6IDYwO1xuICAgICAgICB0aGlzWyd3aWR0aCddID0gJ3dpZHRoJyBpbiBkYXRhID8gZGF0YS53aWR0aCA6IDgwMDtcbiAgICAgICAgdGhpc1snaGVpZ2h0J10gPSAnaGVpZ2h0JyBpbiBkYXRhID8gZGF0YS5oZWlnaHQgOiA0MDA7XG4gICAgICAgIHRoaXNbXCJlbmFibGVDaGVja0JveFwiXSA9IFwiZW5hYmxlQ2hlY2tCb3hcIiBpbiBkYXRhID8gZGF0YVtcImVuYWJsZUNoZWNrQm94XCJdIDogZmFsc2U7XG4gICAgICAgIHRoaXNbJ2VuYWJsZVJhZGlvQnV0dG9uJ10gPSAnZW5hYmxlUmFkaW9CdXR0b24nIGluIGRhdGEgPyBkYXRhLmVuYWJsZVJhZGlvQnV0dG9uIDogZmFsc2U7XG4gICAgICAgIHRoaXNbXCJlbmFibGVQYWdpbmF0b3JcIl0gPSBcImVuYWJsZVBhZ2luYXRvclwiIGluIGRhdGEgPyBkYXRhW1wiZW5hYmxlUGFnaW5hdG9yXCJdIDogZmFsc2U7XG4gICAgICAgIHRoaXNbJ3BhZ2VTaXplJ10gPSAncGFnZVNpemUnIGluIGRhdGEgPyBkYXRhLnBhZ2VTaXplIDogMjA7XG4gICAgICAgIHRoaXNbXCJyb3dFeHBhbmRhYmxlXCJdID0gXCJyb3dFeHBhbmRhYmxlXCIgaW4gZGF0YSA/IGRhdGEucm93RXhwYW5kYWJsZSA6IGZhbHNlO1xuICAgICAgICB0aGlzW1wicm93Q29sbGFwc2VhYmxlXCJdID0gXCJyb3dDb2xsYXBzZWFibGVcIiBpbiBkYXRhID8gZGF0YVtcInJvd0NvbGxhcHNlYWJsZVwiXSA6IGZhbHNlO1xuICAgICAgICB0aGlzW1wiY29sbGFwc2VSb3dIZWlnaHRcIl0gPSBcImNvbGxhcHNlUm93SGVpZ2h0XCIgaW4gZGF0YSA/IGRhdGFbXCJjb2xsYXBzZVJvd0hlaWdodFwiXSA6IDUwO1xuICAgICAgICB0aGlzW1wic2luZ2xlUm93VG9nZ2xlYWJsZVwiXSA9IFwic2luZ2xlUm93VG9nZ2xlYWJsZVwiIGluIGRhdGEgPyBkYXRhLnNpbmdsZVJvd1RvZ2dsZWFibGUgOiBmYWxzZTtcbiAgICAgICAgdGhpc1tcInRoZW1lXCJdID0gXCJ0aGVtZVwiIGluIGRhdGEgPyBkYXRhLnRoZW1lIDogXCJsaWdodFwiO1xuICAgICAgICB0aGlzW1wiZ2xvYmFsXCJdID0gXCJnbG9iYWxcIiBpbiBkYXRhID8gZGF0YS5nbG9iYWwgOiBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXNbXCJnbG9iYWxcIl0gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aGlzWyd0YWJsZVNlYXJjaCddID0gJ3RhYmxlU2VhcmNoJyBpbiBkYXRhID8gZGF0YS50YWJsZVNlYXJjaCA6IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpc1sndGFibGVTZWFyY2gnXSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXNbJ2hpZGVTZXR0aW5nJ10gPSAnaGlkZVNldHRpbmcnIGluIGRhdGEgPyBkYXRhWydoaWRlU2V0dGluZyddIDogZmFsc2U7XG4gICAgICAgIHRoaXNbXCJuYXZpZ2F0ZWFibGVcIl0gPSBcIm5hdmlnYXRlYWJsZVwiIGluIGRhdGEgPyBkYXRhLm5hdmlnYXRlYWJsZSA6IGZhbHNlO1xuICAgICAgICB0aGlzW1wiY29sdW1uc1wiXSA9IFtdO1xuICAgICAgICBsZXQgaW5kZXggPSAwO1xuICAgICAgICBkYXRhW1wiY29sdW1uc1wiXS5mb3JFYWNoKGNvbCA9PiB7XG4gICAgICAgICAgICB0aGlzW1wiY29sdW1uc1wiXS5wdXNoKG5ldyBDb2x1bW4oY29sLCBpbmRleCkpO1xuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXNbJ2Rvd25sb2FkYWJsZSddID0gJ2Rvd25sb2FkYWJsZScgaW4gZGF0YSA/IGRhdGEuZG93bmxvYWRhYmxlIDogZmFsc2U7XG4gICAgICAgIHRoaXNbJ2xpc3REZWxpbWluYXRvciddID0gJ2xpc3REZWxpbWluYXRvcicgaW4gZGF0YSA/IGRhdGEubGlzdERlbGltaW5hdG9yIDogJywnO1xuICAgICAgICB0aGlzWyd0b3RhbFRpdGxlJ10gPSAndG90YWxUaXRsZScgaW4gZGF0YSA/IGRhdGEudG90YWxUaXRsZSA6ICcnO1xuICAgICAgICB0aGlzWydlbmFibGVBbGxHbG9iYWxTZWxlY3RvciddID0gJ2VuYWJsZUFsbEdsb2JhbFNlbGVjdG9yJyBpbiBkYXRhID8gZGF0YS5lbmFibGVBbGxHbG9iYWxTZWxlY3RvciA6IGZhbHNlO1xuICAgICAgICB0aGlzWydkZUNvdXBsZVJvd1NlbGVjdEFuZENoZWNrYm94J10gPSAnZGVDb3VwbGVSb3dTZWxlY3RBbmRDaGVja2JveCcgaW4gZGF0YSA/IGRhdGEuZGVDb3VwbGVSb3dTZWxlY3RBbmRDaGVja2JveCA6IGZhbHNlO1xuICAgICAgICB0aGlzWydsaXN0VmlldyddID0gJ2xpc3RWaWV3JyBpbiBkYXRhID8gZGF0YS5saXN0VmlldyA6IGZhbHNlO1xuICAgICAgICBpZiAodGhpc1snbGlzdFZpZXcnXSkge1xuICAgICAgICAgICAgdGhpc1tcInJvd0hlaWdodFwiXSArPSAxMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzWydoaWRlVG90YWwnXSA9ICdoaWRlVG90YWwnIGluIGRhdGE/IGRhdGEuaGlkZVRvdGFsIDogZmFsc2U7XG4gICAgICAgIHRoaXNbJ2VuZm9yY2VSZXNldEZpbHRlckJ0biddID0gJ2VuZm9yY2VSZXNldEZpbHRlckJ0bicgaW4gZGF0YT9kYXRhLmVuZm9yY2VSZXNldEZpbHRlckJ0bjpmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRDb2x1bW5zT3JkZXIoKSB7XG4gICAgICAgIGxldCBjb2x1bW5LZXlzID0gW107XG4gICAgICAgIHRoaXMuY29sdW1ucy5mb3JFYWNoKGNvbHVtbiA9PiB7XG4gICAgICAgICAgICBjb2x1bW5LZXlzLnB1c2goY29sdW1uLmtleSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29sdW1uS2V5cztcbiAgICB9XG5cbiAgICBnZXRWaXNpYmxlQ29sdW1uc09yZGVyKCkge1xuICAgICAgICBsZXQgY29sdW1uS2V5cyA9IFtdO1xuICAgICAgICB0aGlzLmNvbHVtbnMuZm9yRWFjaChjb2x1bW4gPT4ge1xuICAgICAgICAgICAgaWYgKCFjb2x1bW4uaGlkZGVuKVxuICAgICAgICAgICAgICAgIGNvbHVtbktleXMucHVzaChjb2x1bW4ua2V5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb2x1bW5LZXlzO1xuICAgIH1cblxuICAgIGdldENvbHVtbkNvbmZpZyhrZXkpIHtcbiAgICAgICAgbGV0IGNvbmZpZyA9IG51bGw7XG4gICAgICAgIHRoaXMuY29sdW1ucy5mb3JFYWNoKGNvbHVtbiA9PiB7XG4gICAgICAgICAgICBpZiAoY29sdW1uLmtleSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAgY29uZmlnID0gY29sdW1uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBnZXRQcmltYXJ5Q29sdW1uS2V5KCkge1xuICAgICAgICBsZXQga2V5ID0gXCJcIjtcbiAgICAgICAgdGhpc1tcImNvbHVtbnNcIl0uZm9yRWFjaChjb2wgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbC5wcmltYXJ5S2V5KSB7XG4gICAgICAgICAgICAgICAga2V5ID0gY29sLmtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuXG4gICAgY29sdW1uSGlkZGVuKGNvbHVtbktleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb2x1bW5Db25maWcoY29sdW1uS2V5KSA/IHRoaXMuZ2V0Q29sdW1uQ29uZmlnKGNvbHVtbktleSkuaGlkZGVuIDogdHJ1ZTtcbiAgICB9XG5cbiAgICBjb2x1bW5Ub0JlRG93bmxvYWRlZChjb2x1bW5LZXkpIHtcbiAgICAgICAgY29uc3QgY2ZnID0gdGhpcy5nZXRDb2x1bW5Db25maWcoY29sdW1uS2V5KTtcbiAgICAgICAgaWYgKCFjZmcpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IENoZWNrIHRoZSBsb2dpYzogY29sdW1uIGlzIG5vdCB0aGVyZSwgdGhlbiBkb24ndCBkb3dubG9hZFxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnZG93bmxvYWRTdGFuZGFyZCcgaW4gY2ZnICYmIGNmZy5kb3dubG9hZFN0YW5kYXJkICE9PSAnJykge1xuICAgICAgICAgICAgaWYgKGNmZy5kb3dubG9hZFN0YW5kYXJkID09PSAnbmV2ZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjZmcuZG93bmxvYWRTdGFuZGFyZCA9PT0gJ2Fsd2F5cycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY2ZnLnR5cGUgPT09ICd0ZXh0JyB8fCBjZmcudHlwZSA9PT0gJ2h0bWwnIHx8IGNmZy50eXBlID09PSAncHVyZV90ZXh0Jykge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLmNvbHVtbkhpZGRlbihjb2x1bW5LZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBnZXRIaWRkZW5Db2x1bW5LZXlzKCkge1xuICAgICAgICBsZXQga2V5cyA9IFtdO1xuICAgICAgICB0aGlzW1wiY29sdW1uc1wiXS5mb3JFYWNoKGNvbCA9PiB7XG4gICAgICAgICAgICBpZiAoY29sLmhpZGRlbikge1xuICAgICAgICAgICAgICAgIGtleXMucHVzaChjb2wua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBrZXlzO1xuICAgIH1cblxuICAgIHVwZGF0ZUNvbHVtbldpZHRoKGNvbEtleSwgd2lkdGgpIHtcbiAgICAgICAgdGhpc1tcImNvbHVtbnNcIl0uZm9yRWFjaChjb2wgPT4ge1xuICAgICAgICAgICAgaWYgKGNvbC5rZXkgPT09IGNvbEtleSkge1xuICAgICAgICAgICAgICAgIGNvbC53aWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgREFUQV9VUERBVEVEID0gXCJEQVRBX1VQREFURURcIjtcbmV4cG9ydCBjb25zdCBDRUxMX0RBVEFfVVBEQVRFRCA9IFwiQ0VMTF9EQVRBX1VQREFURURcIjtcbmV4cG9ydCBjb25zdCBSRVNJWklORyA9IFwiUkVTSVpJTkdcIjtcbmV4cG9ydCBjb25zdCBDT05GSUdfVVBEQVRFID0gXCJDT05GSUdfVVBEQVRFXCI7XG5leHBvcnQgY29uc3QgQ1VTVE9NX0NPTkZJR19VUERBVEUgPSBcIkNVU1RPTV9DT05GSUdfVVBEQVRFXCI7XG5leHBvcnQgY29uc3QgUk9XX0FMTF9TRUxFQ1RFRCA9IFwiUk9XX0FMTF9TRUxFQ1RFRFwiO1xuZXhwb3J0IGNvbnN0IFJPV19TRUxFQ1RFRCA9IFwiUk9XX1NFTEVDVEVEXCI7XG5leHBvcnQgY29uc3QgU0lOR0xFX1JPV19TRUxFQ1RFRCA9IFwiU0lOR0xFX1JPV19TRUxFQ1RFRFwiO1xuZXhwb3J0IGNvbnN0IFJBV19BQ1RJT05fU0VMRUNURUQgPSBcIlJBV19BQ1RJT05fU0VMRUNURURcIjtcbmV4cG9ydCBjb25zdCBTRVRfQ09MVU1OX0hJRERFTiA9IFwiU0VUX0NPTFVNTl9ISURERU5cIjtcbmV4cG9ydCBjb25zdCBTRVRfQ09MVU1OU19ISURERU4gPSBcIlNFVF9DT0xVTU5TX0hJRERFTlwiO1xuZXhwb3J0IGNvbnN0IFNPUlRfQ09MVU1OID0gXCJTT1JUX0NPTFVNTlwiO1xuZXhwb3J0IGNvbnN0IEZJTFRFUl9VUERBVEUgPSBcIkZJTFRFUl9VUERBVEVcIjtcbmV4cG9ydCBjb25zdCBVUERBVEVfVEhFTUUgPSBcIlVQREFURV9USEVNRVwiO1xuZXhwb3J0IGNvbnN0IFRPR0dMRV9BTExfUk9XUyA9IFwiVE9HR0xFX0FMTF9ST1dTXCI7XG5leHBvcnQgY29uc3QgUEFHRV9VUERBVEUgPSBcIlBBR0VfVVBEQVRFXCI7XG5leHBvcnQgY29uc3QgVVBEQVRFX1NJTkdMRV9TRUxFQ1RFRF9BQ1RJT04gPSBcIlVQREFURV9TSU5HTEVfU0VMRUNURURfQUNUSU9OXCI7XG5leHBvcnQgY29uc3QgU0VMRUNUX0FMTF9MRVZFTCA9IFwiU0VMRUNUX0FMTF9MRVZFTFwiO1xuZXhwb3J0IGNvbnN0IFJFU0VUX0ZJTFRFUiA9IFwiUkVTRVRfRklMVEVSXCI7XG5leHBvcnQgY29uc3QgU0lOR0xFX1JPV19TRUxFQ1RFRF9XSVRIX0tFWSA9IFwiU0lOR0xFX1JPV19TRUxFQ1RFRF9XSVRIX0tFWVwiO1xuZXhwb3J0IGNvbnN0IFNFVF9ET1dOTE9BRF9EQVRBPSdTRVRfRE9XTkxPQURfREFUQSc7XG5leHBvcnQgY29uc3QgVEFCTEVfU0VBUkNIID0gXCJUQUJMRV9TRUFSQ0hcIjtcbmV4cG9ydCBjb25zdCBDSEVDS0JPWF9DSEVDS0VEID0gXCJDSEVDS0JPWF9DSEVDS0VEXCI7XG5leHBvcnQgY29uc3QgQ0xPU0VfQUxMX1BPUFVQPSdDTE9TRV9BTExfUE9QVVAnO1xuZXhwb3J0IGNvbnN0IENMT1NFX0FMTF9GSUxURVJfUE9QVVA9J0NMT1NFX0FMTF9GSUxURVJfUE9QVVAnO1xuZXhwb3J0IGNvbnN0IFVOQ0xJQ0tBQkxFX0NFTExTX1VQREFURUQ9J1VOQ0xJQ0tBQkxFX0NFTExTX1VQREFURUQnO1xuZXhwb3J0IGNvbnN0IE9SSUdJTkFMX0NPTkZJR19VUERBVEU9J09SSUdJTkFMX0NPTkZJR19VUERBVEUnO1xuZXhwb3J0IGNvbnN0IFNDUk9MTF9QT1NJVElPTl9VUERBVEU9J1NDUk9MTF9QT1NJVElPTl9VUERBVEUnO1xuZXhwb3J0IGNvbnN0IEdPVE9fU0NST0xMX1BPU0lUSU9OPSdHT1RPX1NDUk9MTF9QT1NJVElPTic7XG5leHBvcnQgY29uc3QgU0VUX0NPTFVNTlNfSElEREVOX1RFTVAgPSAnU0VUX0NPTFVNTlNfSElEREVOX1RFTVAnO1xuIiwiaW1wb3J0ICogYXMgYWN0aW9uVHlwZSBmcm9tIFwiLi9BY3Rpb25UeXBlXCI7XG5cbmV4cG9ydCBjb25zdCB0YWJsZVNlYXJjaGVkID0gZnVuY3Rpb24odGVybSl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogYWN0aW9uVHlwZS5UQUJMRV9TRUFSQ0gsXG4gICAgICAgIHBheWxvYWQ6IHRlcm1cbiAgICB9O1xufVxuXG5leHBvcnQgY29uc3QgZ290b1Njcm9sbFBvc2l0aW9uID0gIGZ1bmN0aW9uKHNjcm9sbFgsIHNjcm9sbFkpe1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGFjdGlvblR5cGUuR09UT19TQ1JPTExfUE9TSVRJT04sXG4gICAgICAgIHBheWxvYWQ6IFtzY3JvbGxYLCBzY3JvbGxZXVxuICAgIH07XG59XG5cbmV4cG9ydCBjb25zdCBzZXRVcGRhdGVkU2Nyb2xsUG9zaXRpb24gPSBmdW5jdGlvbihzY3JvbGxYLCBzY3JvbGxZKXtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBhY3Rpb25UeXBlLlNDUk9MTF9QT1NJVElPTl9VUERBVEUsXG4gICAgICAgIHBheWxvYWQ6IFtzY3JvbGxYLCBzY3JvbGxZXVxuICAgIH07XG59XG5cbmV4cG9ydCBjb25zdCBzZXRPcmlnaW5hbENvbmZpZyA9IGZ1bmN0aW9uKGNvbmZpZyl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogYWN0aW9uVHlwZS5PUklHSU5BTF9DT05GSUdfVVBEQVRFLFxuICAgICAgICBwYXlsb2FkOiBjb25maWdcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNldERvd25sb2FkRGF0YSA9IGZ1bmN0aW9uKGRhdGFMaXN0KXtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBhY3Rpb25UeXBlLlNFVF9ET1dOTE9BRF9EQVRBLFxuICAgICAgICBwYXlsb2FkOiBkYXRhTGlzdFxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0VXBkYXRlZERhdGEgPSBmdW5jdGlvbihkYXRhTGlzdCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGFjdGlvblR5cGUuREFUQV9VUERBVEVELFxuICAgICAgICBwYXlsb2FkOiBkYXRhTGlzdFxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0VXBkYXRlZENlbGxEYXRhID0gZnVuY3Rpb24ocm93S2V5VmFsLCBjb2x1bW5LZXksIHZhbHVlKXtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBhY3Rpb25UeXBlLkNFTExfREFUQV9VUERBVEVELFxuICAgICAgICBwYXlsb2FkOiBbcm93S2V5VmFsLCBjb2x1bW5LZXksIHZhbHVlXVxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3QgcmVzaXppbmdUYWJsZSA9IGZ1bmN0aW9uKHdpZHRoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogYWN0aW9uVHlwZS5SRVNJWklORyxcbiAgICAgICAgcGF5bG9hZDogd2lkdGhcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNldFVwZGF0ZWRDb25maWcgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBhY3Rpb25UeXBlLkNPTkZJR19VUERBVEUsXG4gICAgICAgIHBheWxvYWQ6IGNvbmZpZ1xuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0Q3VzdG9tQ29uZmlnID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogYWN0aW9uVHlwZS5DVVNUT01fQ09ORklHX1VQREFURSxcbiAgICAgICAgcGF5bG9hZDogY29uZmlnXG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRSb3dBbGxTZWxlY3RlZCA9IGZ1bmN0aW9uKHNlbGVjdGVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogYWN0aW9uVHlwZS5ST1dfQUxMX1NFTEVDVEVELFxuICAgICAgICBwYXlsb2FkOiBzZWxlY3RlZFxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0Um93U2VsZWN0ZWQgPSBmdW5jdGlvbihyb3dJbmRleCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGFjdGlvblR5cGUuUk9XX1NFTEVDVEVELFxuICAgICAgICBwYXlsb2FkOiByb3dJbmRleFxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0U2luZ2xlUm93U2VsZWN0ZWQgPSBmdW5jdGlvbihyb3dJbmRleCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGFjdGlvblR5cGUuU0lOR0xFX1JPV19TRUxFQ1RFRCxcbiAgICAgICAgcGF5bG9hZDogcm93SW5kZXhcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNldFNpbmdsZVJvd1NlbGVjdGVkV2l0aEtleSA9IGZ1bmN0aW9uKHJvd0tleSl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogYWN0aW9uVHlwZS5TSU5HTEVfUk9XX1NFTEVDVEVEX1dJVEhfS0VZLFxuICAgICAgICBwYXlsb2FkOiByb3dLZXlcbiAgICB9XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0U2luZ2xlU2VsZWN0ZWRBY3Rpb24gPSBmdW5jdGlvbihyb3dJbmRleCwgY29sdW1uS2V5LCBuZXdWYWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGFjdGlvblR5cGUuVVBEQVRFX1NJTkdMRV9TRUxFQ1RFRF9BQ1RJT04sXG4gICAgICAgIHBheWxvYWQ6IFtyb3dJbmRleCwgY29sdW1uS2V5LCBuZXdWYWx1ZV1cbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNldFJvd0FjdGlvblNlbGVjdGVkID0gZnVuY3Rpb24ocm93SW5kZXgsIGFjdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGFjdGlvblR5cGUuUkFXX0FDVElPTl9TRUxFQ1RFRCxcbiAgICAgICAgcGF5bG9hZDogW3Jvd0luZGV4LCBhY3Rpb25dXG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRDb2x1bW5IaWRkZW4gPSBmdW5jdGlvbihjb2x1bW5LZXksIGhpZGRlbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGFjdGlvblR5cGUuU0VUX0NPTFVNTl9ISURERU4sXG4gICAgICAgIHBheWxvYWQ6IFtjb2x1bW5LZXksIGhpZGRlbl1cbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNldENvbHVtbnNIaWRkZW4gPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBhY3Rpb25UeXBlLlNFVF9DT0xVTU5TX0hJRERFTixcbiAgICAgICAgcGF5bG9hZDogb2JqZWN0XG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRDb2x1bW5Tb3J0ID0gZnVuY3Rpb24oY29sdW1uS2V5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogYWN0aW9uVHlwZS5TT1JUX0NPTFVNTixcbiAgICAgICAgcGF5bG9hZDogY29sdW1uS2V5XG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCB1cGRhdGVGaWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBhY3Rpb25UeXBlLkZJTFRFUl9VUERBVEUsXG4gICAgICAgIHBheWxvYWQ6IGZpbHRlclxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3QgcmVzZXRGaWx0ZXIgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGFjdGlvblR5cGUuUkVTRVRfRklMVEVSXG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCB1ZHBhdGVUaGVtZSA9IGZ1bmN0aW9uKHRoZW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogYWN0aW9uVHlwZS5VUERBVEVfVEhFTUUsXG4gICAgICAgIHBheWxvYWQ6IHRoZW1lXG4gICAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCB0b2dnbGVBbGxSb3dzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogYWN0aW9uVHlwZS5UT0dHTEVfQUxMX1JPV1NcbiAgICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZVBhZ2UgPSBmdW5jdGlvbihwYWdlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogYWN0aW9uVHlwZS5QQUdFX1VQREFURSxcbiAgICAgICAgcGF5bG9hZDogcGFnZVxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0U2VsZWN0QWxsTGV2ZWwgPSBmdW5jdGlvbihsZXZlbCl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogYWN0aW9uVHlwZS5TRUxFQ1RfQUxMX0xFVkVMLFxuICAgICAgICBwYXlsb2FkOiBsZXZlbFxuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBzZXRUYWJsZVNlYXJjaFRlcm0gPSBmdW5jdGlvbih0ZXJtKXtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBhY3Rpb25UeXBlLlRBQkxFX1NFQVJDSCxcbiAgICAgICAgcGF5bG9hZDogdGVybVxuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCByb3dDaGVja2JveENoYW5nZWQgPSBmdW5jdGlvbihyb3dJbmRleCwgc2VsZWN0ZWQpe1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGFjdGlvblR5cGUuQ0hFQ0tCT1hfQ0hFQ0tFRCxcbiAgICAgICAgcGF5bG9hZDogW3Jvd0luZGV4LCBzZWxlY3RlZF1cbiAgICB9XG59O1xuXG5leHBvcnQgY29uc3QgY2xvc2VBbGxQb3BVcCA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogYWN0aW9uVHlwZS5DTE9TRV9BTExfUE9QVVBcbiAgICB9XG59O1xuXG5leHBvcnQgY29uc3QgY2xvc2VBbGxGaWx0ZXJQb3BVcCA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogYWN0aW9uVHlwZS5DTE9TRV9BTExfRklMVEVSX1BPUFVQXG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZVVuQ2xpY2thYmxlQ2VsbHMgPSBmdW5jdGlvbihvYmope1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGFjdGlvblR5cGUuVU5DTElDS0FCTEVfQ0VMTFNfVVBEQVRFRCxcbiAgICAgICAgcGF5bG9hZDogb2JqXG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZUNvbHVtbkhpZGRlblRlbXAgPSBmdW5jdGlvbihvYmope1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IGFjdGlvblR5cGUuU0VUX0NPTFVNTlNfSElEREVOX1RFTVAsXG4gICAgICAgIHBheWxvYWQ6IG9ialxuICAgIH1cbn1cbiIsImltcG9ydCAqIGFzIGFjdGlvblR5cGUgZnJvbSBcIi4vQWN0aW9uVHlwZVwiO1xuaW1wb3J0IFRhYmxlU2VydmljZSBmcm9tIFwiLi4vc2VydmljZXMvdGFibGVfc2VydmljZVwiO1xuY29uc3QgRGF0YVRhYmxlUmVkdWNlciA9IChzdGF0ZSA9IHt9LCBhY3Rpb24pID0+IHtcbiAgICBsZXQgbmV3U3RhdGU7XG4gICAgbGV0IHNlcnZpY2UgPSBuZXcgVGFibGVTZXJ2aWNlKCk7XG4gICAgbGV0IGNvbmZpZyA9IHN0YXRlLmNvbmZpZztcbiAgICBsZXQgY3VzdG9tQ29uZmlnID0gc3RhdGUuY3VzdG9tQ29uZmlnO1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlLk9SSUdJTkFMX0NPTkZJR19VUERBVEU6XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxDb25maWc6IGFjdGlvbi5wYXlsb2FkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGFjdGlvblR5cGUuU0VUX0RPV05MT0FEX0RBVEE6XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XG4gICAgICAgICAgICAgICAgZG93bmxvYWREYXRhTGlzdDogYWN0aW9uLnBheWxvYWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgYWN0aW9uVHlwZS5EQVRBX1VQREFURUQ6XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XG4gICAgICAgICAgICAgICAgZGF0YUxpc3Q6IGFjdGlvbi5wYXlsb2FkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGFjdGlvblR5cGUuUkVTSVpJTkc6XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IGFjdGlvbi5wYXlsb2FkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGFjdGlvblR5cGUuQ09ORklHX1VQREFURTpcbiAgICAgICAgICAgIG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcbiAgICAgICAgICAgICAgICBjb25maWc6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRDb2x1bW5zOiBzZXJ2aWNlLmdldERlZmF1bHRDb2x1bW5zKGFjdGlvbi5wYXlsb2FkLmNvbHVtbnMpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGFjdGlvblR5cGUuQ1VTVE9NX0NPTkZJR19VUERBVEU6XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XG4gICAgICAgICAgICAgICAgLy9oZXJlIHdlIG5lZWQgdG8gZml4IGN1c3RvbUNvbmZpZyBhdXRvbWF0aWFsbHksIGFzIHNvbWV0aW1lcywgY3VzdG9tZXIgY29uZmlnIHNhdmVkIG5vbi1leGlzdGluZyBjb2x1bW5zXG4gICAgICAgICAgICAgICAgY3VzdG9tQ29uZmlnOiBzZXJ2aWNlLmZpeGluZ0N1c3RvbWVyQ29uZmlnKGFjdGlvbi5wYXlsb2FkLCBzdGF0ZS5kYXRhTGlzdCksXG4gICAgICAgICAgICAgICAgLy8gb25jZSBjdXN0b21lciBjb25maWcgdXBkYXRlZCwgd2UgbmVlZCB0byBtZXJnZSBiYWNrIHRvIHRhYmxlIGNvbmZpZ1xuICAgICAgICAgICAgICAgIGNvbmZpZzogc2VydmljZS5tZXJnZUN1c3RvbWVyQ29uZmlnKHN0YXRlLmNvbmZpZywgYWN0aW9uLnBheWxvYWQpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGFjdGlvblR5cGUuUk9XX0FMTF9TRUxFQ1RFRDpcbiAgICAgICAgICAgIG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcbiAgICAgICAgICAgICAgICByb3dBbGxTZWxlY3RlZDogYWN0aW9uLnBheWxvYWQsXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dLZXlzOiBzZXJ2aWNlLmdlbmVyYXRlQWxsU2VsZWN0ZWRSb3dLZXlzKHN0YXRlLmNvbmZpZywgc3RhdGUuZGF0YUxpc3QsIGFjdGlvbi5wYXlsb2FkKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlLlJPV19TRUxFQ1RFRDpcbiAgICAgICAgICAgIGlmIChhY3Rpb24ucGF5bG9hZCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFJvd0tleXM6IHNlcnZpY2UuZ2VuZXJhdGVTZWxlY3RlZFJvd0tleXMoXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jb25maWcsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5kYXRhTGlzdCwgIXN0YXRlLmNvbmZpZy5lbmFibGVSYWRpb0J1dHRvbiA/IHN0YXRlLnNlbGVjdGVkUm93S2V5cyA6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLnBheWxvYWRcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XG4gICAgICAgICAgICAgICAgICAgIHJvd0FsbFNlbGVjdGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dLZXlzOiBbXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgYWN0aW9uVHlwZS5TSU5HTEVfUk9XX1NFTEVDVEVEOlxuICAgICAgICAgICAgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkUm93S2V5czogc2VydmljZS5nZW5lcmF0ZVNpbmdsZVNlbGVjdGVkUm93S2V5cyhcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuY29uZmlnLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5kYXRhTGlzdCwgIXN0YXRlLmNvbmZpZy5lbmFibGVSYWRpb0J1dHRvbiA/IHN0YXRlLnNlbGVjdGVkUm93S2V5cyA6IFtdLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24ucGF5bG9hZFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgYWN0aW9uVHlwZS5TSU5HTEVfUk9XX1NFTEVDVEVEX1dJVEhfS0VZOlxuICAgICAgICAgICAgbGV0IGN1cnJlbnRSb3dLZXlzID0gc3RhdGUuc2VsZWN0ZWRSb3dLZXlzO1xuICAgICAgICAgICAgY3VycmVudFJvd0tleXMucHVzaChhY3Rpb24ucGF5bG9hZCk7XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dLZXlzOiBjdXJyZW50Um93S2V5c1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlLlVQREFURV9TSU5HTEVfU0VMRUNURURfQUNUSU9OOlxuICAgICAgICAgICAgdmFyIHVwZGF0ZWRSZXN1bHRzID0gc2VydmljZS51cGRhdGVTaW5nbGVTZWxlY3RlZFJvd0FjdGlvbihzdGF0ZSwgLi4uYWN0aW9uLnBheWxvYWQpO1xuICAgICAgICAgICAgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICAgIGRhdGFMaXN0OiB1cGRhdGVkUmVzdWx0c1swXSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbERhdGFMaXN0OiB1cGRhdGVkUmVzdWx0c1sxXSxcbiAgICAgICAgICAgICAgICByb3drZXlWYWw6IHVwZGF0ZWRSZXN1bHRzWzJdLFxuICAgICAgICAgICAgICAgIG9sZENvbHVtbktleTogdXBkYXRlZFJlc3VsdHNbM10sXG4gICAgICAgICAgICAgICAgb2xkVmFsdWU6IHVwZGF0ZWRSZXN1bHRzWzRdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGFjdGlvblR5cGUuUkFXX0FDVElPTl9TRUxFQ1RFRDpcbiAgICAgICAgICAgIG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcbiAgICAgICAgICAgICAgICByb3dBY3Rpb25TZWxlY3RlZDogc2VydmljZS51cGRhdGVSb3dBY3Rpb25TZWxlY3RlZChhY3Rpb24ucGF5bG9hZFswXSwgYWN0aW9uLnBheWxvYWRbMV0sIHN0YXRlKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlLlNFVF9DT0xVTU5fSElEREVOOlxuICAgICAgICAgICAgY29uZmlnLmNvbHVtbnMgPSBzZXJ2aWNlLnNldENvbHVtbkhpZGRlbihhY3Rpb24ucGF5bG9hZFswXSwgYWN0aW9uLnBheWxvYWRbMV0sIGNvbmZpZy5jb2x1bW5zKTtcbiAgICAgICAgICAgIG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcbiAgICAgICAgICAgICAgICBjb25maWc6IGNvbmZpZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlLlNFVF9DT0xVTU5TX0hJRERFTjpcbiAgICAgICAgICAgIGNvbmZpZy5jb2x1bW5zID0gc2VydmljZS5zZXRDb2x1bW5zSGlkZGVuKGFjdGlvbi5wYXlsb2FkLCBjb25maWcuY29sdW1ucyk7XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XG4gICAgICAgICAgICAgICAgY29uZmlnOiBjb25maWdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgYWN0aW9uVHlwZS5TT1JUX0NPTFVNTjpcbiAgICAgICAgICAgIGN1c3RvbUNvbmZpZy51cGRhdGVTb3J0ZXIoYWN0aW9uLnBheWxvYWQpO1xuICAgICAgICAgICAgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICAgIGN1c3RvbUNvbmZpZzogY3VzdG9tQ29uZmlnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGFjdGlvblR5cGUuRklMVEVSX1VQREFURTpcbiAgICAgICAgICAgIGN1c3RvbUNvbmZpZy51cGRhdGVGaWx0ZXIoYWN0aW9uLnBheWxvYWQpO1xuICAgICAgICAgICAgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICAgIGN1c3RvbUNvbmZpZzogY3VzdG9tQ29uZmlnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGFjdGlvblR5cGUuUkVTRVRfRklMVEVSOlxuICAgICAgICAgICAgY3VzdG9tQ29uZmlnLmZpbHRlcnMgPSBbXTtcbiAgICAgICAgICAgIG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcbiAgICAgICAgICAgICAgICBjdXN0b21Db25maWc6IGN1c3RvbUNvbmZpZ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlLlVQREFURV9USEVNRTpcbiAgICAgICAgICAgIGNvbmZpZy50aGVtZSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgICAgICAgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICAgIGNvbmZpZzogY29uZmlnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGFjdGlvblR5cGUuVE9HR0xFX0FMTF9ST1dTOlxuICAgICAgICAgICAgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICAgIGFsbE9wZW5lZDogIXN0YXRlLmFsbE9wZW5lZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlLlBBR0VfVVBEQVRFOlxuICAgICAgICAgICAgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICAgIHBhZ2U6IGFjdGlvbi5wYXlsb2FkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGFjdGlvblR5cGUuQ0VMTF9EQVRBX1VQREFURUQ6XG4gICAgICAgICAgICB2YXIgdXBkYXRlZFJlc3VsdHMgPSBzZXJ2aWNlLnVwZGF0ZVNpbmdsZUNlbGxWYWx1ZShzdGF0ZSwgLi4uYWN0aW9uLnBheWxvYWQpO1xuICAgICAgICAgICAgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICAgIGRhdGFMaXN0OiB1cGRhdGVkUmVzdWx0c1swXSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbERhdGFMaXN0OiB1cGRhdGVkUmVzdWx0c1sxXSxcbiAgICAgICAgICAgICAgICBwYXNzZWRJbkNlbGxEYXRhOiBhY3Rpb24ucGF5bG9hZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlLlNFTEVDVF9BTExfTEVWRUw6XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XG4gICAgICAgICAgICAgICAgc2VsZWN0QWxsTGV2ZWw6IGFjdGlvbi5wYXlsb2FkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGFjdGlvblR5cGUuQ0hFQ0tCT1hfQ0hFQ0tFRDpcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrZWRSb3dzID0gc2VydmljZS5nZW5lcmF0ZUNoZWNrZWRSb3dLZXlzKFxuICAgICAgICAgICAgICAgIHN0YXRlLmNvbmZpZyxcbiAgICAgICAgICAgICAgICBzdGF0ZS5kYXRhTGlzdCwgIXN0YXRlLmNvbmZpZy5lbmFibGVSYWRpb0J1dHRvbiA/IHN0YXRlLmNoZWNrZWRSb3dLZXlzIDogW10sXG4gICAgICAgICAgICAgICAgYWN0aW9uLnBheWxvYWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XG4gICAgICAgICAgICAgICAgY2hlY2tlZFJvd0tleXM6IGNoZWNrZWRSb3dzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGFjdGlvblR5cGUuVU5DTElDS0FCTEVfQ0VMTFNfVVBEQVRFRDpcbiAgICAgICAgICAgIG5ld1N0YXRlID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcbiAgICAgICAgICAgICAgICB1bkNsaWNrYWJsZUNlbGxzOiBhY3Rpb24ucGF5bG9hZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlLlNDUk9MTF9QT1NJVElPTl9VUERBVEU6XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XG4gICAgICAgICAgICAgICAgc2Nyb2xsUG9zaXRpb246IGFjdGlvbi5wYXlsb2FkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGFjdGlvblR5cGUuR09UT19TQ1JPTExfUE9TSVRJT046XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XG4gICAgICAgICAgICAgICAgc2Nyb2xsUG9zaXRpb246IGFjdGlvbi5wYXlsb2FkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGFjdGlvblR5cGUuVEFCTEVfU0VBUkNIOlxuICAgICAgICAgICAgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICAgIHRhYmxlU2VhcmNoZWRUZXJtOiBhY3Rpb24ucGF5bG9hZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBhY3Rpb25UeXBlLlNFVF9DT0xVTU5TX0hJRERFTl9URU1QOlxuICAgICAgICAgICAgbmV3U3RhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICAgIGNvbHVtbkhpZGRlblRtcDogYWN0aW9uLnBheWxvYWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBuZXdTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1N0YXRlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRGF0YVRhYmxlUmVkdWNlcjtcbiIsImltcG9ydCB7XG4gICAgc2V0VXBkYXRlZERhdGEsXG4gICAgcmVzaXppbmdUYWJsZSxcbiAgICBzZXRVcGRhdGVkQ29uZmlnLFxuICAgIHNldEN1c3RvbUNvbmZpZyxcbiAgICBzZXRSb3dBbGxTZWxlY3RlZCxcbiAgICBzZXRSb3dTZWxlY3RlZCxcbiAgICBzZXRSb3dBY3Rpb25TZWxlY3RlZCxcbiAgICBzZXRDb2x1bW5IaWRkZW4sXG4gICAgc2V0Q29sdW1uU29ydCxcbiAgICB1cGRhdGVGaWx0ZXIsXG4gICAgc2V0U2luZ2xlUm93U2VsZWN0ZWQsXG4gICAgdWRwYXRlVGhlbWUsXG4gICAgdG9nZ2xlQWxsUm93cyxcbiAgICB1cGRhdGVQYWdlLFxuICAgIHNldFNpbmdsZVNlbGVjdGVkQWN0aW9uLFxuICAgIHNldENvbHVtbnNIaWRkZW4sXG4gICAgc2V0VXBkYXRlZENlbGxEYXRhLFxuICAgIHNldEdsb2JhbEFsbCxcbiAgICBzZXRTZWxlY3RBbGxMZXZlbCxcbiAgICByZXNldEZpbHRlcixcbiAgICBzZXRTaW5nbGVSb3dTZWxlY3RlZFdpdGhLZXksXG4gICAgc2V0RG93bmxvYWREYXRhLFxuICAgIHJvd0NoZWNrYm94Q2hhbmdlZCxcbiAgICBjbG9zZUFsbFBvcFVwLFxuICAgIHVwZGF0ZVVuQ2xpY2thYmxlQ2VsbHMsXG4gICAgY2xvc2VBbGxGaWx0ZXJQb3BVcCxcbiAgICBzZXRPcmlnaW5hbENvbmZpZyxcbiAgICBzZXRVcGRhdGVkU2Nyb2xsUG9zaXRpb24sXG4gICAgZ290b1Njcm9sbFBvc2l0aW9uLFxuICAgIHRhYmxlU2VhcmNoZWQsXG4gICAgdXBkYXRlQ29sdW1uSGlkZGVuVGVtcFxufSBmcm9tIFwiLi9hY3Rpb25zXCI7XG5pbXBvcnQgRGF0YVRhYmxlUmVkdWNlciBmcm9tIFwiLi9yZWR1Y2VyXCI7XG5cbmNsYXNzIFN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcihhcHBJZCwgcmVkdWNlcikge1xuICAgICAgICB0aGlzLkNPTkZJR19VUERBVEUgPSBcIkNPTkZJR19VUERBVEVcIjtcbiAgICAgICAgdGhpcy5EQVRBX1VQREFURUQgPSBcIkRBVEFfVVBEQVRFRFwiO1xuICAgICAgICB0aGlzLkNFTExfREFUQV9VUERBVEVEID0gXCJDRUxMX0RBVEFfVVBEQVRFRFwiO1xuICAgICAgICB0aGlzLlJFU0laSU5HID0gXCJSRVNJWklOR1wiO1xuICAgICAgICB0aGlzLkNVU1RPTV9DT05GSUdfVVBEQVRFID0gXCJDVVNUT01fQ09ORklHX1VQREFURVwiO1xuICAgICAgICB0aGlzLlJPV19BTExfU0VMRUNURUQgPSBcIlJPV19BTExfU0VMRUNURURcIjtcbiAgICAgICAgdGhpcy5ST1dfU0VMRUNURUQgPSBcIlJPV19TRUxFQ1RFRFwiO1xuICAgICAgICB0aGlzLlNJTkdMRV9ST1dfU0VMRUNURUQgPSBcIlNJTkdMRV9ST1dfU0VMRUNURURcIjtcbiAgICAgICAgdGhpcy5SRVNFVF9EQVRBID0gXCJSRVNFVF9EQVRBXCI7XG4gICAgICAgIHRoaXMuUkFXX0FDVElPTl9TRUxFQ1RFRCA9IFwiUkFXX0FDVElPTl9TRUxFQ1RFRFwiO1xuICAgICAgICB0aGlzLlNFVF9DT0xVTU5fSElEREVOID0gXCJTRVRfQ09MVU1OX0hJRERFTlwiO1xuICAgICAgICB0aGlzLlNFVF9DT0xVTU5TX0hJRERFTiA9IFwiU0VUX0NPTFVNTlNfSElEREVOXCI7XG4gICAgICAgIHRoaXMuU09SVF9DT0xVTU4gPSBcIlNPUlRfQ09MVU1OXCI7XG4gICAgICAgIHRoaXMuRklMVEVSX1VQREFURSA9IFwiRklMVEVSX1VQREFURVwiO1xuICAgICAgICB0aGlzLlVQREFURV9USEVNRSA9IFwiVVBEQVRFX1RIRU1FXCI7XG4gICAgICAgIHRoaXMuVE9HR0xFX0FMTF9ST1dTID0gXCJUT0dHTEVfQUxMX1JPV1NcIjtcbiAgICAgICAgdGhpcy5QQUdFX1VQREFURSA9IFwiUEFHRV9VUERBVEVcIjtcbiAgICAgICAgdGhpcy5VUERBVEVfU0lOR0xFX1NFTEVDVEVEX0FDVElPTiA9IFwiVVBEQVRFX1NJTkdMRV9TRUxFQ1RFRF9BQ1RJT05cIjtcbiAgICAgICAgdGhpcy5JQ09OX0NFTExfQ0xJQ0tFRF9BQ1RJT04gPSBcIklDT05fQ0VMTF9DTElDS0VEX0FDVElPTlwiO1xuICAgICAgICB0aGlzLlNFTEVDVF9BTExfTEVWRUwgPSAnU0VMRUNUX0FMTF9MRVZFTCc7XG4gICAgICAgIHRoaXMuU0lOR0xFX1JPV19TRUxFQ1RFRF9XSVRIX0tFWSA9ICdTSU5HTEVfUk9XX1NFTEVDVEVEX1dJVEhfS0VZJztcblxuICAgICAgICB0aGlzLlNFTEVDVF9BTExfQ09MVU1OUyA9IFwiU0VMRUNUX0FMTF9DT0xVTU5TXCI7XG4gICAgICAgIHRoaXMuU0VMRUNUX0RFRkFVTFRfQ09MVU1OUyA9IFwiREVMRUNUX0RFRkFVTFRfQ09MVU1OU1wiO1xuICAgICAgICB0aGlzLlRBQkxFX1NFQVJDSCA9IFwiVEFCTEVfU0VBUkNIXCI7XG4gICAgICAgIHRoaXMuU0VUX0RPV05MT0FEX0RBVEEgPSBcIlNFVF9ET1dOTE9BRF9EQVRBXCI7XG4gICAgICAgIHRoaXMuQ0hFQ0tCT1hfQ0hFQ0tFRCA9IFwiQ0hFQ0tCT1hfQ0hFQ0tFRFwiO1xuICAgICAgICB0aGlzLkNMT1NFX0FMTF9QT1BVUCA9ICdDTE9TRV9BTExfUE9QVVAnO1xuICAgICAgICB0aGlzLkNMT1NFX0FMTF9GSUxURVJfUE9QVVAgPSAnQ0xPU0VfQUxMX0ZJTFRFUl9QT1BVUCc7XG4gICAgICAgIHRoaXMuVU5DTElDS0FCTEVfQ0VMTFNfVVBEQVRFRCA9ICdVTkNMSUNLQUJMRV9DRUxMU19VUERBVEVEJztcbiAgICAgICAgdGhpcy5PUklHSU5BTF9DT05GSUdfVVBEQVRFID0gJ09SSUdJTkFMX0NPTkZJR19VUERBVEUnO1xuICAgICAgICB0aGlzLlNDUk9MTF9QT1NJVElPTl9VUERBVEUgPSAnU0NST0xMX1BPU0lUSU9OX1VQREFURSc7XG4gICAgICAgIHRoaXMuR09UT19TQ1JPTExfUE9TSVRJT049J0dPVE9fU0NST0xMX1BPU0lUSU9OJztcbiAgICAgICAgdGhpcy5TRVRfQ09MVU1OU19ISURERU5fVEVNUD0nU0VUX0NPTFVNTlNfSElEREVOX1RFTVAnO1xuXG4gICAgICAgIHRoaXMuX2FwcElkID0gYXBwSWQ7XG4gICAgICAgIHRoaXMuX3N0YXRlID0ge1xuICAgICAgICAgICAgY29uZmlnOiBudWxsLFxuICAgICAgICAgICAgb3JpZ2luYWxEYXRhTGlzdDogbnVsbCxcbiAgICAgICAgICAgIG9yaWdpbmFsQ29uZmlnOiBudWxsLCAvL3VzZWQgdG8gc2F2ZSBvcmlnaW5hbCB0YWJsZSBjb25maWdcbiAgICAgICAgICAgIGRhdGFMaXN0OiBbXSxcbiAgICAgICAgICAgIGN1c3RvbUNvbmZpZzogbnVsbCxcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgcm93QWxsU2VsZWN0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc2VsZWN0ZWRSb3dLZXlzOiBbXSxcbiAgICAgICAgICAgIGNoZWNrZWRSb3dLZXlzOiBbXSxcbiAgICAgICAgICAgIHJvd0FjdGlvblNlbGVjdGVkOiB7fSxcbiAgICAgICAgICAgIGFsbE9wZW5lZDogZmFsc2UsXG4gICAgICAgICAgICBkZWZhdWx0Q29sdW1uczogW10sXG4gICAgICAgICAgICBwYXNzZWRJbkNlbGxEYXRhOiBudWxsLCAvL3VzZWQgdG8gc2F2ZSBwYXNzZWQgaW4gY2VsbCBkYXRhLCBmb3IgcmVzZXR0aW5nIHB1cnBvc2VcbiAgICAgICAgICAgIHBhZ2U6IG51bGwsIC8vdGhpcyBpcyBwYWdlIG9iamVjdCwgbm90IG51bWJlclxuICAgICAgICAgICAgZ2xvYmFsQWxsOiBmYWxzZSxcbiAgICAgICAgICAgIHNlbGVjdEFsbExldmVsOiAwLFxuICAgICAgICAgICAgZG93bmxvYWREYXRhTGlzdDogW10sXG4gICAgICAgICAgICBnbG9iYWxEb3dubG9hZENvbmZpZzogbnVsbCxcbiAgICAgICAgICAgIHVuQ2xpY2thYmxlQ2VsbHM6IHt9LCAvLyB1c2VkIHRvIGRlZmluZSB3aGljaCBjZWxscyBhcmUgTk9UIGNsaWNrYWJsZSwga2V5LWNvbHVtbktleSwgdmFsdWUtW2tleSBsaXN0XVxuICAgICAgICAgICAgc2Nyb2xsUG9zaXRpb246IFswLDBdLCAvL3JlbWVtYmVyIHByZXZpb3VzIHNjcm9sbFBvc2l0aW9uXG4gICAgICAgICAgICB0YWJsZVNlYXJjaGVkVGVybTogJycsXG4gICAgICAgICAgICBjb2x1bW5IaWRkZW5UbXA6IHt9LCAvL3RlbXByYXJpbHkgc2F2ZSBjb2x1bW4gaGlkZGVuIHN0YXR1cyBiZWZvcmUgdXNlciBjbGljayBzYXZlIGJ1dHRvblxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzRm9yID0ge307XG4gICAgICAgIHRoaXMuX3JlZHVjZXIgPSByZWR1Y2VyO1xuXG4gICAgICAgIHRoaXMucGFzc2VkQmFja1BhcmFtcyA9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0U3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcbiAgICB9XG5cbiAgICBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLl9yZWR1Y2VyKHRoaXMuX3N0YXRlLCBhY3Rpb24pO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcih0aGlzLl9zdGF0ZSkpO1xuICAgIH1cbiAgICBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICAvL3RoaXMgcmV0dXJuIGlzIHVzZWQgZm9yIHJldHVybiB1bnN1YnNjcmliIGNhbGwgYmFjayBmb3IgcHVycG9zZSBvZiByZW1vdmluZyBsaXN0ZW5lcnNcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGdldFN0b3JlKHRoaXMuX2FwcElkKS5fbGlzdGVuZXJzID0gZ2V0U3RvcmUodGhpcy5fYXBwSWQpLl9saXN0ZW5lcnMuZmlsdGVyKGwgPT4gbCAhPT0gbGlzdGVuZXIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGRpc3BhdGNoRm9yKHR5cGUsIGFjdGlvbikge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuX3JlZHVjZXIodGhpcy5fc3RhdGUsIGFjdGlvbik7XG4gICAgICAgIGlmICh0eXBlIGluIHRoaXMuX2xpc3RlbmVyc0ZvcilcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyc0Zvclt0eXBlXS5mb3JFYWNoKGxpc3RlbmVyID0+IGxpc3RlbmVyKHRoaXMuX3N0YXRlKSk7XG4gICAgfVxuICAgIHN1YnNjcmliZVRvKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICghKHR5cGUgaW4gdGhpcy5fbGlzdGVuZXJzRm9yKSkge1xuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzRm9yW3R5cGVdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzRm9yW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgZ2V0U3RvcmUodGhpcy5fYXBwSWQpLl9saXN0ZW5lcnNGb3JbdHlwZV0gPSBnZXRTdG9yZSh0aGlzLl9hcHBJZCkuX2xpc3RlbmVyc0Zvclt0eXBlXS5maWx0ZXIoXG4gICAgICAgICAgICAgICAgbCA9PiBsICE9PSBsaXN0ZW5lclxuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzZXRUb3RhbFJlY29yZHModG90YWwpIHtcbiAgICAgICAgbGV0IHBhZ2UgPSB0aGlzLl9zdGF0ZVtcInBhZ2VcIl07XG4gICAgICAgIHBhZ2Uuc2V0VG90YWwodG90YWwpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRm9yKHRoaXMuUEFHRV9VUERBVEUsIHVwZGF0ZVBhZ2UocGFnZSkpO1xuICAgIH1cblxuICAgIHNldFVwZGF0ZWREYXRhKHJlc3VsdHNPYmosIGFzT3JpZ2luYWwgPSBmYWxzZSwgb3ZlcldyaXRlU2VsZWN0ZWRLZXlzID0gdHJ1ZSkge1xuICAgICAgICAvL1VJLTI5NzYgLSBSZXNldCBQcmUtU2VsZWN0ZWQgY29sdW1ucyB3aGVuIGRhdGEgaXMgdXBkYXRlZFxuICAgICAgICBpZiAob3ZlcldyaXRlU2VsZWN0ZWRLZXlzKSB7XG4gICAgICAgICAgICB0aGlzLnNldERlZmF1bHRTZWxlY3RlZFJvd0tleXMoW10pOyAvL2NsZWFyIGFsbCBwcmUtc2VsZWN0ZWQgcm93S2V5c1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRSb3dBbGxTZWxlY3RlZChmYWxzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaGFuZGxlciBkYXRhIGlucHV0OiBjb250YWlucyB0b3RhbCBhbmQgZGF0YUxpc3QgZmllbGRcbiAgICAgICAgaWYgKFwidG90YWxcIiBpbiByZXN1bHRzT2JqKSB7XG4gICAgICAgICAgICBsZXQgdG90YWwgPSByZXN1bHRzT2JqW1widG90YWxcIl07XG4gICAgICAgICAgICBsZXQgcGFnZSA9IHRoaXMuX3N0YXRlW1wicGFnZVwiXTtcbiAgICAgICAgICAgIHBhZ2Uuc2V0VG90YWwodG90YWwpO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEZvcih0aGlzLlBBR0VfVVBEQVRFLCB1cGRhdGVQYWdlKHBhZ2UpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBwYWdlID0gdGhpcy5fc3RhdGVbXCJwYWdlXCJdO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEZvcih0aGlzLlBBR0VfVVBEQVRFLCB1cGRhdGVQYWdlKHBhZ2UpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxpc3QgPSByZXN1bHRzT2JqW1wiZGF0YUxpc3RcIl07XG5cbiAgICAgICAgaWYgKGFzT3JpZ2luYWwpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlLm9yaWdpbmFsRGF0YUxpc3QgPSBsaXN0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kaXNwYXRjaEZvcih0aGlzLkRBVEFfVVBEQVRFRCwgc2V0VXBkYXRlZERhdGEobGlzdCkpO1xuICAgICAgICB0aGlzLmNsb3NlQWxsUG9wVXAoKTtcbiAgICB9XG5cbiAgICBzZXRVcGRhdGVkQ2VsbFZhbHVlKHJvd0tleSwgY29sdW1uS2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRm9yKHRoaXMuQ0VMTF9EQVRBX1VQREFURUQsIHNldFVwZGF0ZWRDZWxsRGF0YShyb3dLZXksIGNvbHVtbktleSwgdmFsdWUpKTtcbiAgICB9XG5cbiAgICBzZXRBcHBlbmRlZERhdGEocmVzdWx0c09iaikge1xuICAgICAgICAvL2hhbmRsZXIgZGF0YSBpbnB1dDogY29udGFpbnMgdG90YWwgYW5kIGRhdGFMaXN0IGZpZWxkXG4gICAgICAgIGlmIChcInRvdGFsXCIgaW4gcmVzdWx0c09iaikge1xuICAgICAgICAgICAgbGV0IHRvdGFsID0gcmVzdWx0c09ialtcInRvdGFsXCJdO1xuICAgICAgICAgICAgbGV0IHBhZ2UgPSB0aGlzLl9zdGF0ZVtcInBhZ2VcIl07XG4gICAgICAgICAgICBwYWdlLnNldFRvdGFsKHRvdGFsKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hGb3IodGhpcy5QQUdFX1VQREFURSwgdXBkYXRlUGFnZShwYWdlKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxpc3QgPSByZXN1bHRzT2JqW1wiZGF0YUxpc3RcIl07XG5cbiAgICAgICAgdGhpcy5fc3RhdGUub3JpZ2luYWxEYXRhTGlzdCA9IHRoaXMuX3N0YXRlLm9yaWdpbmFsRGF0YUxpc3QuY29uY2F0KGxpc3QpO1xuICAgICAgICBsaXN0ID0gdGhpcy5fc3RhdGUuZGF0YUxpc3QuY29uY2F0KGxpc3QpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRm9yKHRoaXMuREFUQV9VUERBVEVELCBzZXRVcGRhdGVkRGF0YShsaXN0KSk7XG4gICAgICAgIHRoaXMuY2xvc2VBbGxQb3BVcCgpO1xuICAgIH1cbiAgICBzZXRPcmlnaW5hbFRhYmxlQ29uZmlnKGNvbmZpZykge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRm9yKHRoaXMuT1JJR0lOQUxfQ09ORklHX1VQREFURSwgc2V0T3JpZ2luYWxDb25maWcoY29uZmlnKSk7XG4gICAgfVxuICAgIHNldFVwZGF0ZWRUYWJsZUNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEZvcih0aGlzLkNPTkZJR19VUERBVEUsIHNldFVwZGF0ZWRDb25maWcoY29uZmlnKSk7XG4gICAgfVxuICAgIHNldE5ld1RhYmxlV2lkdGgod2lkdGgpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEZvcih0aGlzLlJFU0laSU5HLCByZXNpemluZ1RhYmxlKHdpZHRoKSk7XG4gICAgfVxuICAgIHNldEN1c3RvbUNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEZvcih0aGlzLkNVU1RPTV9DT05GSUdfVVBEQVRFLCBzZXRDdXN0b21Db25maWcoY29uZmlnKSk7XG4gICAgfVxuICAgIHNldFJvd0FsbFNlbGVjdGVkKGFsbFNlbGVjdGVkKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hGb3IodGhpcy5ST1dfQUxMX1NFTEVDVEVELCBzZXRSb3dBbGxTZWxlY3RlZChhbGxTZWxlY3RlZCkpO1xuICAgIH1cbiAgICB0b2dnbGVTaW5nbGVSb3dTZWxlY3RlZChyb3dJbmRleCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRm9yKHRoaXMuU0lOR0xFX1JPV19TRUxFQ1RFRCwgc2V0U2luZ2xlUm93U2VsZWN0ZWQocm93SW5kZXgpKTtcbiAgICB9XG4gICAgdG9nZ2xlQ2hlY2tCb3hDaGFuZ2VkKHJvd0luZGV4LCBzZWxlY3RlZCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRm9yKHRoaXMuQ0hFQ0tCT1hfQ0hFQ0tFRCwgcm93Q2hlY2tib3hDaGFuZ2VkKHJvd0luZGV4LCBzZWxlY3RlZCkpO1xuICAgIH1cbiAgICB0b2dnbGVSb3dTZWxlY3RlZChyb3dJbmRleCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRm9yKHRoaXMuUk9XX1NFTEVDVEVELCBzZXRSb3dTZWxlY3RlZChyb3dJbmRleCkpO1xuICAgIH1cbiAgICB0b2dnbGVSb3dTZWxlY3RlZFdpdGhLZXkocm93S2V5KSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hGb3IodGhpcy5TSU5HTEVfUk9XX1NFTEVDVEVEX1dJVEhfS0VZLCBzZXRTaW5nbGVSb3dTZWxlY3RlZFdpdGhLZXkocm93S2V5KSk7XG4gICAgfVxuICAgIHNldFJvd0FjdGlvblNlbGVjdGVkKHJvd0luZGV4LCBhY3Rpb24pIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEZvcih0aGlzLlJBV19BQ1RJT05fU0VMRUNURUQsIHNldFJvd0FjdGlvblNlbGVjdGVkKHJvd0luZGV4LCBhY3Rpb24pKTtcbiAgICB9XG4gICAgc2V0Q29sdW1uSGlkZGVuKGNvbHVtbktleSwgaGlkZGVuKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hGb3IodGhpcy5TRVRfQ09MVU1OX0hJRERFTiwgc2V0Q29sdW1uSGlkZGVuKGNvbHVtbktleSwgaGlkZGVuKSk7XG4gICAgfVxuICAgIHNldENvbHVtbnNIaWRkZW4oY29uZmlnT2JqKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hGb3IodGhpcy5TRVRfQ09MVU1OU19ISURERU4sIHNldENvbHVtbnNIaWRkZW4oY29uZmlnT2JqKSk7XG4gICAgfVxuICAgIHNldENvbHVtblNvcnQoY29sdW1uS2V5KSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hGb3IodGhpcy5TT1JUX0NPTFVNTiwgc2V0Q29sdW1uU29ydChjb2x1bW5LZXkpKTtcbiAgICB9XG4gICAgc2V0RmlsdGVyKGZpbHRlcikge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRm9yKHRoaXMuRklMVEVSX1VQREFURSwgdXBkYXRlRmlsdGVyKGZpbHRlcikpO1xuICAgIH1cbiAgICByZXNldEZpbHRlcigpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEZvcih0aGlzLkZJTFRFUl9VUERBVEUsIHJlc2V0RmlsdGVyKCkpO1xuICAgIH1cbiAgICBzZXRUaGVtZSh0aGVtZSkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRm9yKHRoaXMuVVBEQVRFX1RIRU1FLCB1ZHBhdGVUaGVtZSh0aGVtZSkpO1xuICAgIH1cbiAgICB0b2dnbGVBbGxSb3dzKCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRm9yKHRoaXMuVE9HR0xFX0FMTF9ST1dTLCB0b2dnbGVBbGxSb3dzKCkpO1xuICAgIH1cbiAgICB1cGRhdGVQYWdlKHBhZ2VPYmopIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEZvcih0aGlzLlBBR0VfVVBEQVRFLCB1cGRhdGVQYWdlKHBhZ2VPYmopKTtcbiAgICB9XG4gICAgdXBkYXRlU2luZ2xlU2VsZWN0QWN0aW9uKHJvd0luZGV4LCBjb2x1bW5LZXksIG5ld1ZhbHVlKSB7XG4gICAgICAgIC8vYmVsb3cgaXMgdG8gYmUgcmV0dXJuZWRcbiAgICAgICAgdGhpcy5wYXNzZWRCYWNrUGFyYW1zID0ge1xuICAgICAgICAgICAgcm93SW5kZXg6IHJvd0luZGV4LFxuICAgICAgICAgICAgY29sdW1uS2V5OiBjb2x1bW5LZXksXG4gICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsdWVcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEZvcih0aGlzLlVQREFURV9TSU5HTEVfU0VMRUNURURfQUNUSU9OLCBzZXRTaW5nbGVTZWxlY3RlZEFjdGlvbihyb3dJbmRleCwgY29sdW1uS2V5LCBuZXdWYWx1ZSkpO1xuICAgIH1cbiAgICB1cGRhdGVJY29uRHJvcERvd25Db250ZW50KGh0bWxDb250ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLklDT05fQ0VMTF9DTElDS0VEX0FDVElPTiBpbiB0aGlzLl9saXN0ZW5lcnNGb3IpXG4gICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnNGb3JbdGhpcy5JQ09OX0NFTExfQ0xJQ0tFRF9BQ1RJT05dLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIoaHRtbENvbnRlbnQpKTtcbiAgICB9XG4gICAgdHJpZ2dlclNlbGVjdEFsbENvbHVtbnMoc2VsZWN0ZWQpIHtcbiAgICAgICAgaWYgKHRoaXMuU0VMRUNUX0FMTF9DT0xVTU5TIGluIHRoaXMuX2xpc3RlbmVyc0ZvcilcbiAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyc0Zvclt0aGlzLlNFTEVDVF9BTExfQ09MVU1OU10uZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcihzZWxlY3RlZCkpO1xuICAgIH1cbiAgICB0cmlnZ2VyRGVmYXVsdENvbHVtbnMoc2VsZWN0ZWQpIHtcbiAgICAgICAgaWYgKHRoaXMuU0VMRUNUX0RFRkFVTFRfQ09MVU1OUyBpbiB0aGlzLl9saXN0ZW5lcnNGb3IpXG4gICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnNGb3JbdGhpcy5TRUxFQ1RfREVGQVVMVF9DT0xVTU5TXS5mb3JFYWNoKGxpc3RlbmVyID0+IGxpc3RlbmVyKHNlbGVjdGVkKSk7XG4gICAgfVxuICAgIHJlc2V0QWxsKCkge1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzRm9yID0ge307XG4gICAgfVxuICAgIHNldFNlbGVjdEFsbExldmVsKGxldmVsKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hGb3IodGhpcy5TRUxFQ1RfQUxMX0xFVkVMLCBzZXRTZWxlY3RBbGxMZXZlbChsZXZlbCkpO1xuICAgIH1cbiAgICBzZXRHbG9iYWxTZWFyY2hUZXJtKHRlcm0pIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEZvcih0aGlzLlRBQkxFX1NFQVJDSCwgdGFibGVTZWFyY2hlZCh0ZXJtKSk7XG4gICAgfVxuICAgIHNldERlZmF1bHRTZWxlY3RlZFJvd0tleXMoZGVmYXVsdFJvd0tleXMpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUuc2VsZWN0ZWRSb3dLZXlzID0gZGVmYXVsdFJvd0tleXM7XG4gICAgfVxuICAgIHNldERvd25sb2FkRGF0YShkYXRhTGlzdCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRm9yKHRoaXMuU0VUX0RPV05MT0FEX0RBVEEsIHNldERvd25sb2FkRGF0YShkYXRhTGlzdCkpO1xuICAgIH1cbiAgICBzZXRHbG9iYWxEb3dubG9hZENvbmZpZyhjZmcpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUuZ2xvYmFsRG93bmxvYWRDb25maWcgPSBjZmc7XG4gICAgfVxuICAgIHNldFVuQ2xpY2thYmxlQ2VsbHMob2JqKSB7IC8vIHsgY29sS2V5OiBbbGlzdCBvZiBrZXlzXSB9XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hGb3IodGhpcy5VTkNMSUNLQUJMRV9DRUxMU19VUERBVEVELCB1cGRhdGVVbkNsaWNrYWJsZUNlbGxzKG9iaikpO1xuICAgIH1cbiAgICBjbG9zZUFsbFBvcFVwKCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRm9yKHRoaXMuQ0xPU0VfQUxMX1BPUFVQLCBjbG9zZUFsbFBvcFVwKCkpO1xuICAgIH1cbiAgICBjbG9zZUFsbEZpbHRlclBvcFVwKCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRm9yKHRoaXMuQ0xPU0VfQUxMX0ZJTFRFUl9QT1BVUCwgY2xvc2VBbGxGaWx0ZXJQb3BVcCgpKTtcbiAgICB9XG4gICAgc2Nyb2xsUG9zaXRpb25VcGRhdGVkKHNjcm9sbFgsIHNjcm9sbFkpe1xuICAgICAgICB0aGlzLmRpc3BhdGNoRm9yKHRoaXMuU0NST0xMX1BPU0lUSU9OX1VQREFURSwgc2V0VXBkYXRlZFNjcm9sbFBvc2l0aW9uKHNjcm9sbFgsIHNjcm9sbFkpKTtcbiAgICB9XG4gICAgZ290b1Njcm9sbFBvc2l0aW9uKHNjcm9sbFgsIHNjcm9sbFkpe1xuICAgICAgICB0aGlzLmRpc3BhdGNoRm9yKHRoaXMuR09UT19TQ1JPTExfUE9TSVRJT04sIGdvdG9TY3JvbGxQb3NpdGlvbihzY3JvbGxYLCBzY3JvbGxZKSk7XG4gICAgfVxuICAgIHNldENvbHVtblRlbXBIaWRkZW5TdGF0dXMob2JqKXtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEZvcih0aGlzLlNFVF9DT0xVTU5TX0hJRERFTl9URU1QLCB1cGRhdGVDb2x1bW5IaWRkZW5UZW1wKG9iaikpO1xuICAgIH1cbn1cblxubGV0IHN0b3JlO1xuY29uc3QgZ2V0U3RvcmUgPSBhcHBJZCA9PiB7XG4gICAgaWYgKCFzdG9yZSkge1xuICAgICAgICBzdG9yZSA9IHt9O1xuICAgIH1cbiAgICBpZiAoIShhcHBJZCBpbiBzdG9yZSkpIHN0b3JlW2FwcElkXSA9IG5ldyBTdG9yZShhcHBJZCwgRGF0YVRhYmxlUmVkdWNlcik7XG5cbiAgICByZXR1cm4gc3RvcmVbYXBwSWRdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0U3RvcmU7XG4iLCJpbXBvcnQgVGFibGUgZnJvbSBcIi4uL2VudGl0aWVzL3RhYmxlXCI7XG5pbXBvcnQgQ3VzdG9tQ29uZmlnIGZyb20gXCIuLi9lbnRpdGllcy9jdXN0b21fY29uZmlnXCI7XG5pbXBvcnQge1xuICAgIE9SREVSX0FTQyxcbiAgICBPUkRFUl9ERVNDLFxuICAgIE9SREVSX05PTkUsXG4gICAgVFlQRV9DT05UQUlOUyxcbiAgICBUWVBFX0VRVUFMUyxcbiAgICBUWVBFX0dSRUFURVJfT1JfRVFVQUwsXG4gICAgVFlQRV9MRVNTX09SX0VRVUFMLFxuICAgIFRZUEVfQkVUV0VFTixcbiAgICBUWVBFX0lOXG59IGZyb20gXCIuLi9lbnRpdGllcy9jdXN0b21fY29uZmlnXCI7XG5pbXBvcnQge1xuICAgIFRZUEVfVEVYVCxcbiAgICBUWVBFX0xJU1QsXG4gICAgVFlQRV9IVE1MLFxuICAgIFRZUEVfSFRNTF9MSVNUXG59IGZyb20gXCIuLi9lbnRpdGllcy9jb2x1bW5cIjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhYmxlU2VydmljZSB7XG4gICAgZ2V0QXZhaWxhYmxlTGlzdFJlc3VsdChkYXRhTGlzdCwgdGFibGVDb25maWcpIHtcbiAgICAgICAgaWYgKHRhYmxlQ29uZmlnLmdsb2JhbCkgcmV0dXJuIHt9O1xuICAgICAgICBsZXQgY29sTGlzdE9iaiA9IHt9O1xuICAgICAgICB0YWJsZUNvbmZpZy5jb2x1bW5zLmZvckVhY2goY29sdW1uID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGNvbHVtbi50eXBlKTtcbiAgICAgICAgICAgIGlmIChjb2x1bW4udHlwZSA9PT0gVFlQRV9MSVNUKSB7XG4gICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSBbXTtcbiAgICAgICAgICAgICAgICBkYXRhTGlzdC5mb3JFYWNoKHJvdyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5pbmNsdWRlcyhyb3dbY29sdW1uLmtleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnB1c2gocm93W2NvbHVtbi5rZXldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbExpc3RPYmpbY29sdW1uLmtleV0gPSBvcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbExpc3RPYmo7XG4gICAgfVxuXG4gICAgZ2VuZW5lcmF0ZVRhYmxlQ29uZmlnKHJhd0NvbmZpZykge1xuICAgICAgICByZXR1cm4gbmV3IFRhYmxlKHJhd0NvbmZpZyk7XG4gICAgfVxuXG4gICAgZ2VuZW5lcmF0ZUN1c3RvbUNvbmZpZyhjdXN0b21Db25maWcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDdXN0b21Db25maWcoY3VzdG9tQ29uZmlnKTtcbiAgICB9XG5cbiAgICBnZXROZXdDb2x1bW5PcmRlcihvcmlnaW5hbENvbHVtbk9yZGVycywgcmVvcmRlckNvbHVtbiwgY29sdW1uQWZ0ZXIpIHtcbiAgICAgICAgbGV0IGNvbHVtbnNPcmRlciA9IG9yaWdpbmFsQ29sdW1uT3JkZXJzLmZpbHRlcihrZXkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGtleSAhPT0gcmVvcmRlckNvbHVtbjtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjb2x1bW5BZnRlcikge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gY29sdW1uc09yZGVyLmluZGV4T2YoY29sdW1uQWZ0ZXIpO1xuICAgICAgICAgICAgY29sdW1uc09yZGVyLnNwbGljZShpbmRleCwgMCwgcmVvcmRlckNvbHVtbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb2x1bW5zT3JkZXIucHVzaChyZW9yZGVyQ29sdW1uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sdW1uc09yZGVyO1xuICAgIH1cblxuICAgIGdldENvbHVtbnNPcmRlcih0YWJsZUNvbmZpZywgY3VzdG9tQ29uZmlnKSB7XG4gICAgICAgIGlmIChjdXN0b21Db25maWcgJiYgXCJjb2x1bW5zT3JkZXJcIiBpbiBjdXN0b21Db25maWcgJiYgY3VzdG9tQ29uZmlnLmNvbHVtbnNPcmRlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gY3VzdG9tQ29uZmlnLmNvbHVtbnNPcmRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0YWJsZUNvbmZpZy5nZXRDb2x1bW5zT3JkZXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbiAgICBnZXROb25lU3RpY2t5Q29sdW1uc09yZGVyKHRhYmxlQ29uZmlnLCBjdXN0b21Db25maWcsIG9yaWdpbmFsVGFibGVDb25maWcpIHtcbiAgICAgICAgbGV0IGNvbE9yZGVycyA9IFtdO1xuICAgICAgICBpZiAoY3VzdG9tQ29uZmlnICYmIFwiY29sdW1uc09yZGVyXCIgaW4gY3VzdG9tQ29uZmlnICYmIGN1c3RvbUNvbmZpZy5jb2x1bW5zT3JkZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29sT3JkZXJzID0gY3VzdG9tQ29uZmlnLmNvbHVtbnNPcmRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbE9yZGVycyA9IHRhYmxlQ29uZmlnLmdldENvbHVtbnNPcmRlcigpO1xuICAgICAgICB9XG4gICAgICAgIC8vbGV0J3MgcmVtb3ZlIGZpeGVkIG9uZXNcbiAgICAgICAgY29sT3JkZXJzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjb2xPcmRlcnMpKTtcbiAgICAgICAgdGFibGVDb25maWcuY29sdW1ucy5mb3JFYWNoKGNvbCA9PiB7XG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbENvbHVtbkNvbmZpZyA9IG9yaWdpbmFsVGFibGVDb25maWcuZ2V0Q29sdW1uQ29uZmlnKGNvbC5rZXkpO1xuICAgICAgICAgICAgaWYoIWNvbE9yZGVycy5pbmNsdWRlcyhjb2wua2V5KSl7XG4gICAgICAgICAgICAgICAgY29sT3JkZXJzLnB1c2goY29sLmtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKGNvbC5maXhlZCB8fCBjb2wuZml4ZWRSaWdodCB8fCBvcmlnaW5hbENvbHVtbkNvbmZpZy5oaWRkZW4gJiYgb3JpZ2luYWxDb2x1bW5Db25maWcucHJpbWFyeUtleSkgJiYgY29sT3JkZXJzLmluY2x1ZGVzKGNvbC5rZXkpKSB7XG4gICAgICAgICAgICAgICAgY29sT3JkZXJzLnNwbGljZShjb2xPcmRlcnMuaW5kZXhPZihjb2wua2V5KSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29sT3JkZXJzO1xuICAgIH1cblxuICAgIGdldFZpc2libGVDb2x1bW5zT3JkZXIodGFibGVDb25maWcsIGN1c3RvbUNvbmZpZykge1xuICAgICAgICBpZiAoY3VzdG9tQ29uZmlnICYmIFwiY29sdW1uc09yZGVyXCIgaW4gY3VzdG9tQ29uZmlnICYmIGN1c3RvbUNvbmZpZy5jb2x1bW5zT3JkZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGN1c3RvbUNvbmZpZy5jb2x1bW5zT3JkZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGFibGVDb25maWcuZ2V0VmlzaWJsZUNvbHVtbnNPcmRlcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Q29sdW1uc09yZGVyRnJvbVN0YXRlKHN0YXRlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENvbHVtbnNPcmRlcihzdGF0ZS5jb25maWcsIHN0YXRlLmN1c3RvbUNvbmZpZyk7XG4gICAgfVxuXG4gICAgZ2V0Tm9uZVN0aWNreUNvbHVtbnNPcmRlckZyb21TdGF0ZShzdGF0ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXROb25lU3RpY2t5Q29sdW1uc09yZGVyKHN0YXRlLmNvbmZpZywgc3RhdGUuY3VzdG9tQ29uZmlnLCBzdGF0ZS5vcmlnaW5hbENvbmZpZyk7XG4gICAgfVxuXG4gICAgcmVzdG9yZVN0aWNreUNvbHVtbnNGcm9tU3RhdGUoc3RhdGUsIGNvbHVtbnMpIHtcblxuICAgICAgICBzdGF0ZS5jb25maWcuY29sdW1ucy5mb3JFYWNoKGNvbCA9PiB7XG4gICAgICAgICAgICBpZiAoY29sLmZpeGVkKSB7XG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIGxlZnQgZml4XG4gICAgICAgICAgICAgICAgY29sdW1ucy51bnNoaWZ0KGNvbC5rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbC5maXhlZFJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgY29sdW1ucy5wdXNoKGNvbC5rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbHVtbnM7XG4gICAgfVxuXG4gICAgZ2V0VmlzaWJsZUNvbHVtbnNPcmRlckZyb21TdGF0ZShzdGF0ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRWaXNpYmxlQ29sdW1uc09yZGVyKHN0YXRlLmNvbmZpZywgc3RhdGUuY3VzdG9tQ29uZmlnKTtcbiAgICB9XG5cblxuICAgIGdlbmVyYXRlQWxsU2VsZWN0ZWRSb3dLZXlzKHRhYmxlQ29uZmlnLCBkYXRhTGlzdCwgYWxsU2VsZWN0ZWQpIHtcbiAgICAgICAgbGV0IHNlbGVjdGVkUm93S2V5cyA9IFtdO1xuICAgICAgICBpZiAoYWxsU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIGxldCBrZXlDb2x1bW5LZXkgPSB0YWJsZUNvbmZpZy5nZXRQcmltYXJ5Q29sdW1uS2V5KCk7XG4gICAgICAgICAgICBkYXRhTGlzdC5mb3JFYWNoKHJvdyA9PiB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dLZXlzLnB1c2gocm93W2tleUNvbHVtbktleV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkUm93S2V5cztcbiAgICB9XG5cbiAgICBnZW5lcmF0ZVNlbGVjdGVkUm93S2V5cyh0YWJsZUNvbmZpZywgZGF0YUxpc3QsIGN1cnJlbnRTZWxlY3RlZEtleXMsIGluZGV4KSB7XG4gICAgICAgIGxldCBzZWxlY3RlZFJvd0tleSA9IGRhdGFMaXN0W2luZGV4XVt0YWJsZUNvbmZpZy5nZXRQcmltYXJ5Q29sdW1uS2V5KCldO1xuICAgICAgICBpZiAoY3VycmVudFNlbGVjdGVkS2V5cy5pbmNsdWRlcyhzZWxlY3RlZFJvd0tleSkpIHtcbiAgICAgICAgICAgIC8vcmVtb3ZlIGl0XG4gICAgICAgICAgICBjdXJyZW50U2VsZWN0ZWRLZXlzLnNwbGljZShjdXJyZW50U2VsZWN0ZWRLZXlzLmluZGV4T2Yoc2VsZWN0ZWRSb3dLZXkpLCAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vYWRkIGl0XG4gICAgICAgICAgICBjdXJyZW50U2VsZWN0ZWRLZXlzLnB1c2goc2VsZWN0ZWRSb3dLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRTZWxlY3RlZEtleXMuc29ydCgpO1xuICAgICAgICByZXR1cm4gY3VycmVudFNlbGVjdGVkS2V5cztcbiAgICB9XG5cbiAgICBnZW5lcmF0ZUNoZWNrZWRSb3dLZXlzKHRhYmxlQ29uZmlnLCBkYXRhTGlzdCwgY3VycmVudFNlbGVjdGVkS2V5cywgcGF5bG9hZCkge1xuICAgICAgICBsZXQgaW5kZXggPSBwYXlsb2FkWzBdO1xuICAgICAgICBsZXQgc2VsZWN0ZWQgPSBwYXlsb2FkWzFdO1xuICAgICAgICBsZXQgc2VsZWN0ZWRSb3dLZXkgPSBkYXRhTGlzdFtpbmRleF1bdGFibGVDb25maWcuZ2V0UHJpbWFyeUNvbHVtbktleSgpXTtcbiAgICAgICAgaWYgKGN1cnJlbnRTZWxlY3RlZEtleXMuaW5jbHVkZXMoc2VsZWN0ZWRSb3dLZXkpKSB7XG4gICAgICAgICAgICAvL3JlbW92ZSBpdFxuICAgICAgICAgICAgY3VycmVudFNlbGVjdGVkS2V5cy5zcGxpY2UoY3VycmVudFNlbGVjdGVkS2V5cy5pbmRleE9mKHNlbGVjdGVkUm93S2V5KSwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL2FkZCBpdFxuICAgICAgICAgICAgY3VycmVudFNlbGVjdGVkS2V5cy5wdXNoKHNlbGVjdGVkUm93S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50U2VsZWN0ZWRLZXlzLnNvcnQoKTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTZWxlY3RlZEtleXM7XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVTaW5nbGVTZWxlY3RlZFJvd0tleXModGFibGVDb25maWcsIGRhdGFMaXN0LCBjdXJyZW50U2VsZWN0ZWRLZXlzLCBpbmRleCkge1xuICAgICAgICBsZXQgc2VsZWN0ZWRSb3dLZXkgPSBkYXRhTGlzdFtpbmRleF1bdGFibGVDb25maWcuZ2V0UHJpbWFyeUNvbHVtbktleSgpXTtcbiAgICAgICAgaWYgKGN1cnJlbnRTZWxlY3RlZEtleXMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50U2VsZWN0ZWRLZXlzWzBdID09IHNlbGVjdGVkUm93S2V5KSB7XG4gICAgICAgICAgICAgICAgLy91bnRvZ2dsZSBpdFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTZWxlY3RlZEtleXMgPSBbXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFNlbGVjdGVkS2V5c1swXSA9IHNlbGVjdGVkUm93S2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3VycmVudFNlbGVjdGVkS2V5cyA9IFtzZWxlY3RlZFJvd0tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTZWxlY3RlZEtleXM7XG4gICAgfVxuICAgIGlzQWxsUm93U2VsZWN0ZWQoZGF0YUxpc3QsIHRhYmxlQ29uZmlnLCBzZWxlY3RlZFJvd0tleXMpIHtcbiAgICAgICAgbGV0IGFsbFNlbGVjdGVkID0gZGF0YUxpc3QubGVuZ3RoID4gMDsgLy8gaWYgdGFibGUgaGFzIG5vIGRhdGEsIHNob3VsZCBiZSBmYWxzZVxuICAgICAgICBkYXRhTGlzdC5mb3JFYWNoKHJvdyA9PiB7XG4gICAgICAgICAgICBpZiAoIXNlbGVjdGVkUm93S2V5cy5pbmNsdWRlcyhyb3dbdGFibGVDb25maWcuZ2V0UHJpbWFyeUNvbHVtbktleSgpXSkpIHtcbiAgICAgICAgICAgICAgICBhbGxTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFsbFNlbGVjdGVkO1xuICAgIH1cblxuICAgIGlzUm93U2VsZWN0ZWQocm93SW5kZXgsIHN0YXRlKSB7XG4gICAgICAgIGxldCBzZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5zZWxlY3RlZFJvd0tleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gdGhpcy5nZXRSb3dLZXlWYWxGcm9tSW5kZXgocm93SW5kZXgsIHN0YXRlKSlcbiAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7XG4gICAgfVxuXG4gICAgaXNSb3dDaGVja2VkKHJvd0luZGV4LCBzdGF0ZSkge1xuICAgICAgICBsZXQgY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5jaGVja2VkUm93S2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSB0aGlzLmdldFJvd0tleVZhbEZyb21JbmRleChyb3dJbmRleCwgc3RhdGUpKVxuICAgICAgICAgICAgICAgIGNoZWNrZWQgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNoZWNrZWQ7XG4gICAgfVxuXG4gICAgZ2V0Um93S2V5VmFsRnJvbUluZGV4KHJvd0luZGV4LCBzdGF0ZSkge1xuICAgICAgICBsZXQgcm93RGF0YSA9IHN0YXRlLmRhdGFMaXN0W3Jvd0luZGV4XTtcbiAgICAgICAgbGV0IGtleUNvbHVtbktleSA9IHN0YXRlLmNvbmZpZy5nZXRQcmltYXJ5Q29sdW1uS2V5KCk7XG4gICAgICAgIHJldHVybiByb3dEYXRhID8gcm93RGF0YVtrZXlDb2x1bW5LZXldIDogJyc7XG4gICAgfVxuXG4gICAgZmluZFJvd0luZGV4RnJvbVJvd0tleVZhbHVlKGtleVZhbCwgc3RhdGUpIHtcbiAgICAgICAgbGV0IHJvd0luZGV4ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0ZS5kYXRhTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGtleVZhbCA9PT0gdGhpcy5nZXRSb3dLZXlWYWxGcm9tSW5kZXgoaSwgc3RhdGUpKSB7XG4gICAgICAgICAgICAgICAgcm93SW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb3dJbmRleDtcbiAgICB9XG5cbiAgICB1cGRhdGVSb3dBY3Rpb25TZWxlY3RlZChyb3dJbmRleCwgYWN0aW9uLCBzdGF0ZSkge1xuICAgICAgICBsZXQgcm93S2V5VmFsID0gdGhpcy5nZXRSb3dLZXlWYWxGcm9tSW5kZXgocm93SW5kZXgsIHN0YXRlKTtcbiAgICAgICAgbGV0IGN1cnJlbnRSb3dBY3Rpb25TZWxlY3RlZCA9IHN0YXRlLnJvd0FjdGlvblNlbGVjdGVkO1xuICAgICAgICBjdXJyZW50Um93QWN0aW9uU2VsZWN0ZWRbcm93S2V5VmFsXSA9IGFjdGlvbjtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRSb3dBY3Rpb25TZWxlY3RlZDtcbiAgICB9XG5cbiAgICBnZXRSb3dBY3Rpb25TZWxlY3RlZEZyb21JbmRleChyb3dJbmRleCwgc3RhdGUpIHtcbiAgICAgICAgbGV0IHJvd0tleVZhbCA9IHRoaXMuZ2V0Um93S2V5VmFsRnJvbUluZGV4KHJvd0luZGV4LCBzdGF0ZSk7XG4gICAgICAgIGlmIChyb3dLZXlWYWwgaW4gc3RhdGUucm93QWN0aW9uU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5yb3dBY3Rpb25TZWxlY3RlZFtyb3dLZXlWYWxdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRDb2x1bW5IaWRkZW4oY29sdW1uS2V5LCBoaWRkZW4sIGNvbHVtbnMpIHtcbiAgICAgICAgY29sdW1ucy5mb3JFYWNoKGNvbHVtbiA9PiB7XG4gICAgICAgICAgICBpZiAoY29sdW1uLmtleSA9PSBjb2x1bW5LZXkpIHtcbiAgICAgICAgICAgICAgICBjb2x1bW4uaGlkZGVuID0gaGlkZGVuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbHVtbnM7XG4gICAgfVxuXG4gICAgc2V0Q29sdW1uc0hpZGRlbihjb25maWdPYmosIGNvbHVtbnMpIHtcbiAgICAgICAgT2JqZWN0LmtleXMoY29uZmlnT2JqKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBjb2x1bW5zLmZvckVhY2goY29sdW1uID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmtleSA9PSBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLmhpZGRlbiA9IGNvbmZpZ09ialtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbHVtbnM7XG4gICAgfVxuXG4gICAgbWVyZ2VDdXN0b21lckNvbmZpZyh0YWJsZUNvbmZpZywgY3VzdG9tZXJDb25maWcpIHtcbiAgICAgICAgLy9zdGVwIDEsIG1lcmdlIGhpZGRlbiBjb2x1bW4gc3RhdHVzXG4gICAgICAgIGlmIChjdXN0b21lckNvbmZpZ1tcImhpZGRlbkNvbHVtbnNcIl0pIHtcbiAgICAgICAgICAgIHRhYmxlQ29uZmlnLmNvbHVtbnMuZm9yRWFjaChjb2x1bW4gPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjdXN0b21lckNvbmZpZ1tcImhpZGRlbkNvbHVtbnNcIl0uaW5jbHVkZXMoY29sdW1uLmtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLmhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL3N0ZXAgMi4gbWVyZ2UgY29sdW1uV2lkdGhzXG4gICAgICAgIGlmIChjdXN0b21lckNvbmZpZ1snY29sdW1uV2lkdGhzJ10pIHtcbiAgICAgICAgICAgIHRhYmxlQ29uZmlnLmNvbHVtbnMuZm9yRWFjaChjb2x1bW4gPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjb2x1bW5LZXkgPSBjb2x1bW4ua2V5O1xuICAgICAgICAgICAgICAgIGlmIChjb2x1bW5LZXkgaW4gY3VzdG9tZXJDb25maWdbJ2NvbHVtbldpZHRocyddKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtblsnd2lkdGgnXSA9IGN1c3RvbWVyQ29uZmlnWydjb2x1bW5XaWR0aHMnXVtjb2x1bW5LZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhYmxlQ29uZmlnO1xuICAgIH1cblxuICAgIHNlYXJjaFdob2xlRGF0YShzdGF0ZSwgdGVybSkge1xuICAgICAgICBsZXQgb3JpZ2luYWxEYXRhTGlzdCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3RhdGUub3JpZ2luYWxEYXRhTGlzdCkpO1xuICAgICAgICBsZXQgc29ydGVyID0gc3RhdGUuY3VzdG9tQ29uZmlnLnNvcnRlcjtcbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgICAgbGV0IF9maWx0ZXIgPSBmdW5jdGlvbiAobGlzdCwgZmlsdGVyKSB7XG4gICAgICAgICAgICBsZXQgZmlsdGVyUmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGJNYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGxldCByb3cgPSBsaXN0W2ldO1xuICAgICAgICAgICAgICAgIC8vd2UgbmVlZCB0byBmaWxlciBhbGwgdGhlIGNvbHVtbnNcbiAgICAgICAgICAgICAgICBsZXQgY29sS2V5cyA9IE9iamVjdC5rZXlzKHJvdyk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2xLZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3dbY29sS2V5c1tqXV0gJiYgKCcnICsgcm93W2NvbEtleXNbal1dKS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCgnJyArIHRlcm0pLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGJNYXRjaCkgZmlsdGVyUmVzdWx0cy5wdXNoKHJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyUmVzdWx0cztcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHNvcnRlci5vcmRlciA9PSBPUkRFUl9BU0MgfHwgc29ydGVyLm9yZGVyID09IE9SREVSX0RFU0MpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsRGF0YUxpc3Quc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChzb3J0ZXIub3JkZXIgPT0gT1JERVJfQVNDKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YoYVtzb3J0ZXIuYnldKSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnN0cmlwSHRtbChhW3NvcnRlci5ieV0pID4gX3RoaXMuc3RyaXBIdG1sKGJbc29ydGVyLmJ5XSkgPyAxIDogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0eXBlb2YoYVtzb3J0ZXIuYnldKSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlcihhW3NvcnRlci5ieV0pID4gTnVtYmVyKGJbc29ydGVyLmJ5XSkgPyAxIDogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mKGFbc29ydGVyLmJ5XSkgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5zdHJpcEh0bWwoYVtzb3J0ZXIuYnldKSA+IF90aGlzLnN0cmlwSHRtbChiW3NvcnRlci5ieV0pID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYodHlwZW9mKGFbc29ydGVyLmJ5XSkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIoYVtzb3J0ZXIuYnldKSA+IE51bWJlcihiW3NvcnRlci5ieV0pID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvL25vdyBsZXQncyBmaWx0ZXJcbiAgICAgICAgb3JpZ2luYWxEYXRhTGlzdCA9IF9maWx0ZXIob3JpZ2luYWxEYXRhTGlzdCwgdGVybSk7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbERhdGFMaXN0O1xuICAgIH1cblxuICAgIHNvcnRGaWx0ZXJEYXRhKHN0YXRlKSB7XG4gICAgICAgIGxldCBvcmlnaW5hbERhdGFMaXN0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdGF0ZS5vcmlnaW5hbERhdGFMaXN0KSk7XG4gICAgICAgIGxldCBzb3J0ZXIgPSBzdGF0ZS5jdXN0b21Db25maWcuc29ydGVyO1xuICAgICAgICBsZXQgZmlsdGVycyA9IHN0YXRlLmN1c3RvbUNvbmZpZy5maWx0ZXJzO1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICBsZXQgdGFibGVDb25maWcgPSBzdGF0ZS5jb25maWc7XG5cbiAgICAgICAgaWYoc3RhdGUudGFibGVTZWFyY2hlZFRlcm0hPT0nJyl7XG4gICAgICAgICAgICBvcmlnaW5hbERhdGFMaXN0ID0gdGhpcy5zZWFyY2hXaG9sZURhdGEoc3RhdGUsIHN0YXRlLnRhYmxlU2VhcmNoZWRUZXJtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBfZmlsdGVyID0gZnVuY3Rpb24gKGxpc3QsIGZpbHRlcikge1xuICAgICAgICAgICAgbGV0IGZpbHRlclJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgIGxpc3QuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgYk1hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChmaWx0ZXIub3BlcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUWVBFX0NPTlRBSU5TOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnN0cmlwSHRtbChpdGVtW2ZpbHRlci5ieV0pLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoZmlsdGVyLnZhbHVlMS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBUWVBFX0VRVUFMUzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZpbHRlci52YWx1ZTEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWx0ZXJWYWwgb2YgZmlsdGVyLnZhbHVlMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc3RyaXBIdG1sKGl0ZW1bZmlsdGVyLmJ5XSkudG9Mb3dlckNhc2UoKSA9PT0gZmlsdGVyVmFsLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJNYXRjaCA9IF90aGlzLnN0cmlwSHRtbChpdGVtW2ZpbHRlci5ieV0pLnRvTG93ZXJDYXNlKCkgPT09IGZpbHRlci52YWx1ZTEudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFRZUEVfSU46XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlsdGVyZWRWYWx1ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlci52YWx1ZTEuZm9yRWFjaCh2ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZFZhbHVlcy5wdXNoKHYudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJlZFZhbHVlcy5pbmNsdWRlcyhfdGhpcy5zdHJpcEh0bWwoaXRlbVtmaWx0ZXIuYnldKS50b0xvd2VyQ2FzZSgpKSkgYk1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlci52YWx1ZTEuZm9yRWFjaChmID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnN0cmlwSHRtbChpdGVtW2ZpbHRlci5ieV0pLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoZi50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYk1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVFlQRV9CRVRXRUVOOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbHVtblR5cGUgPSB0YWJsZUNvbmZpZy5nZXRDb2x1bW5Db25maWcoZmlsdGVyLmJ5KS50eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gaXRlbVtmaWx0ZXIuYnldO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gZmlsdGVyLnZhbHVlMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlbmQgPSBmaWx0ZXIudmFsdWUyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoY29sdW1uVHlwZSA9PT0gJ2RhdGUnIHx8IGNvbHVtblR5cGUgPT09ICdkYXRlX3RpbWUnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighaXNOYU4oZmlsdGVyLnZhbHVlMSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IG5ldyBEYXRlKHN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWlzTmFOKGZpbHRlci52YWx1ZTIpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gbmV3IERhdGUoZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWVEYXRlID0gbmV3IERhdGUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYk1hdGNoID0gdmFsdWVEYXRlPj1zdGFydCAmJiB2YWx1ZURhdGU8PWVuZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGJNYXRjaCkgZmlsdGVyUmVzdWx0cy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyUmVzdWx0cztcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoc29ydGVyLmJ5ICYmIChzb3J0ZXIub3JkZXIgPT0gT1JERVJfQVNDIHx8IHNvcnRlci5vcmRlciA9PSBPUkRFUl9ERVNDKSkge1xuICAgICAgICAgICAgb3JpZ2luYWxEYXRhTGlzdC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNvcnRlci5vcmRlciA9PSBPUkRFUl9BU0MpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZihhW3NvcnRlci5ieV0pID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnN0cmlwSHRtbChhW3NvcnRlci5ieV0pID4gX3RoaXMuc3RyaXBIdG1sKGJbc29ydGVyLmJ5XSkgPyAxIDogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0eXBlb2YoYVtzb3J0ZXIuYnldKSA9PT0gJ251bWJlcicpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlcihhW3NvcnRlci5ieV0pID4gTnVtYmVyKGJbc29ydGVyLmJ5XSkgPyAxIDogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mKGFbc29ydGVyLmJ5XSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc3RyaXBIdG1sKGFbc29ydGVyLmJ5XSkgPiBfdGhpcy5zdHJpcEh0bWwoYltzb3J0ZXIuYnldKSA/IC0xIDogMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKHR5cGVvZihhW3NvcnRlci5ieV0pID09PSAnbnVtYmVyJyl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyKGFbc29ydGVyLmJ5XSkgPiBOdW1iZXIoYltzb3J0ZXIuYnldKSA/IC0xIDogMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vbm93IGxldCdzIGZpbHRlclxuICAgICAgICBmaWx0ZXJzLmZvckVhY2goZmlsdGVyID0+IHtcbiAgICAgICAgICAgIG9yaWdpbmFsRGF0YUxpc3QgPSBfZmlsdGVyKG9yaWdpbmFsRGF0YUxpc3QsIGZpbHRlcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBvcmlnaW5hbERhdGFMaXN0O1xuICAgIH1cblxuICAgIHVwZGF0ZVNpbmdsZVNlbGVjdGVkUm93QWN0aW9uKHN0YXRlLCByb3dJbmRleCwgY29sdW1uS2V5LCBuZXdWYWx1ZSkge1xuICAgICAgICBsZXQgZGF0YUxpc3QgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlLmRhdGFMaXN0KSk7XG4gICAgICAgIGxldCBvbGRWYWx1ZSA9IGRhdGFMaXN0W3Jvd0luZGV4XVtjb2x1bW5LZXldO1xuICAgICAgICBkYXRhTGlzdFtyb3dJbmRleF1bY29sdW1uS2V5XSA9IG5ld1ZhbHVlO1xuICAgICAgICAvL2hlcmUgd2UgbmVlZCB0byB1ZHBhdGUgb3JpZ2luYWxEYXRhTGlzdCBhcyB3ZWxsIGFzIGRhdGFMaXN0XG4gICAgICAgIGxldCByb3dLZXlWYWwgPSB0aGlzLmdldFJvd0tleVZhbEZyb21JbmRleChyb3dJbmRleCwgc3RhdGUpO1xuICAgICAgICBsZXQgb3JpZ2luYWxEYXRhTGlzdCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3RhdGUub3JpZ2luYWxEYXRhTGlzdCkpO1xuICAgICAgICBsZXQgcHJpbWFyeUtleSA9IHN0YXRlLmNvbmZpZy5nZXRQcmltYXJ5Q29sdW1uS2V5KCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3JpZ2luYWxEYXRhTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG9yaWdpbmFsRGF0YUxpc3RbaV1bcHJpbWFyeUtleV0gPT0gcm93S2V5VmFsKSB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxEYXRhTGlzdFtpXVtjb2x1bW5LZXldID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtkYXRhTGlzdCwgb3JpZ2luYWxEYXRhTGlzdCwgcm93S2V5VmFsLCBjb2x1bW5LZXksIG9sZFZhbHVlXTtcbiAgICB9XG5cbiAgICB1cGRhdGVTaW5nbGVDZWxsVmFsdWUoc3RhdGUsIHJvd0tleVZhbCwgY29sdW1uS2V5LCB2YWx1ZSkge1xuICAgICAgICAvLzEuIHdlIG5lZWQgdG8gdXNlIHJvd0tleVZhbCB0byBmaW5kIG91dCByb3dJbmRleFxuICAgICAgICBsZXQgZGF0YUxpc3QgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlLmRhdGFMaXN0KSk7XG4gICAgICAgIGxldCBwcmltYXJ5S2V5ID0gc3RhdGUuY29uZmlnLmdldFByaW1hcnlDb2x1bW5LZXkoKTtcbiAgICAgICAgbGV0IG9yaWdpbmFsRGF0YUxpc3QgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHN0YXRlLm9yaWdpbmFsRGF0YUxpc3QpKTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyb3dLZXlWYWwpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGFMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocm93S2V5VmFsKSAmJiByb3dLZXlWYWwuaW5jbHVkZXMoZGF0YUxpc3RbaV1bcHJpbWFyeUtleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFMaXN0W2ldW2NvbHVtbktleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3JpZ2luYWxEYXRhTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJvd0tleVZhbCkgJiYgcm93S2V5VmFsLmluY2x1ZGVzKG9yaWdpbmFsRGF0YUxpc3RbaV1bcHJpbWFyeUtleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRGF0YUxpc3RbaV1bY29sdW1uS2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YUxpc3RbaV1bcHJpbWFyeUtleV0gPT0gcm93S2V5VmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFMaXN0W2ldW2NvbHVtbktleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmlnaW5hbERhdGFMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsRGF0YUxpc3RbaV1bcHJpbWFyeUtleV0gPT0gcm93S2V5VmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRGF0YUxpc3RbaV1bY29sdW1uS2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtkYXRhTGlzdCwgb3JpZ2luYWxEYXRhTGlzdF07XG4gICAgfVxuXG4gICAgdXBncmFkZUNvbmZpZyh0YWJsZSwgcm93cykge1xuICAgICAgICB0YWJsZS5jb2x1bW5zLmZvckVhY2goY29sdW1uID0+IHtcbiAgICAgICAgICAgIGlmIChjb2x1bW4udHlwZSA9PSBUWVBFX1RFWFQgJiYgdGhpcy5pc0RhdGFMaXN0VHlwZShjb2x1bW4ua2V5LCByb3dzLCB0YWJsZS5saXN0RGVsaW1pbmF0b3IpKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uLnR5cGUgPSBUWVBFX0xJU1Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29sdW1uLnR5cGUgPT0gVFlQRV9IVE1MICYmIHRoaXMuaXNEYXRhSFRNTExpc3RUeXBlKGNvbHVtbi5rZXksIHJvd3MpKSB7XG4gICAgICAgICAgICAgICAgY29sdW1uLnR5cGUgPSBUWVBFX0hUTUxfTElTVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaXNEYXRhTGlzdFR5cGUoY29sS2V5LCByb3dzLCBkZWxpbWluYXRvciA9IFwiLFwiKSB7XG4gICAgICAgIC8vMSBjaGVjayBsZW5ndGggb2YgZWFjaCBjZWxsLCBleGNsdWRlICdVTktOT1dOJ1xuICAgICAgICAvLzIuIHdlIG9ubHkgY2hlY2sgMTAgcmVjb3JkcyBoZXJlLCBpZiBuZWlnaGJvdXIgdHdvIGl0ZW1zIGhhcyBsZW5ndGggZGlmZmVyZW5lIG1vcmUgdGhhbiA1LCB0aGVuIG5vdCBhIGxpc3RcblxuICAgICAgICBsZXQgbGVuZ3RoVGhyZXNob2xkID0gMTA7XG4gICAgICAgIGxldCBjaGVja2luZ0NvdW50ID0gNTtcbiAgICAgICAgbGV0IGJMaXN0ID0gdHJ1ZTtcbiAgICAgICAgbGV0IGNvbW1hUm93cyA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvdyA9IHJvd3NbaV07XG4gICAgICAgICAgICBpZiAoaXNOYU4ocm93W2NvbEtleV0pICYmIHJvd1tjb2xLZXldICYmIHJvd1tjb2xLZXldLmluY2x1ZGVzKGRlbGltaW5hdG9yKSkge1xuICAgICAgICAgICAgICAgIGxldCBhdmdMZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIGNvbW1hUm93cysrO1xuICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IHJvd1tjb2xLZXldLnNwbGl0KGRlbGltaW5hdG9yKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGl0ZW1zLmxlbmd0aCAtIDE7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbSA9IGl0ZW1zW2pdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnRvTG93ZXJDYXNlKCkgIT0gXCJ1bmtub3duXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udG9Mb3dlckNhc2UoKSAhPSBcIlwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1tqICsgMV0udG9Mb3dlckNhc2UoKSAhPSBcInVua25vd25cIiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXNbaiArIDFdLnRvTG93ZXJDYXNlKCkgIT0gXCJcIlxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhpdGVtc1tqICsgMV0udHJpbSgpLmxlbmd0aCAtIGl0ZW0udHJpbSgpLmxlbmd0aCkgPiBsZW5ndGhUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiTGlzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaSA+IGNoZWNraW5nQ291bnQgfHwgIWJMaXN0KSBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb21tYVJvd3MgPT0gMCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIHJldHVybiBiTGlzdDtcbiAgICB9XG5cbiAgICBnZXRXaWR0aE9mVGV4dCh0eHQsIGZvbnRuYW1lLCBmb250c2l6ZSkge1xuICAgICAgICBpZiAoIWZvbnRuYW1lKSBmb250bmFtZSA9ICdSb2JvdG8sIFwiSGVsdmV0aWNhIE5ldWUgTGlnaHRcIiwgXCJIZWx2ZXRpY2EgTmV1ZVwiLCBIZWx2ZXRpY2EsIEFyaWFsLCBcIkx1Y2lkYSBHcmFuZGVcIiwgc2Fucy1zZXJpZic7XG4gICAgICAgIGlmICghZm9udHNpemUpIGZvbnRzaXplID0gJzE0cHgnO1xuXG4gICAgICAgIGlmICh0aGlzLmdldFdpZHRoT2ZUZXh0LmMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5nZXRXaWR0aE9mVGV4dC5jID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0V2lkdGhPZlRleHQuY3R4ID0gdGhpcy5nZXRXaWR0aE9mVGV4dC5jLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdldFdpZHRoT2ZUZXh0LmN0eC5mb250ID0gZm9udHNpemUgKyBcIiBcIiArIGZvbnRuYW1lO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRXaWR0aE9mVGV4dC5jdHgubWVhc3VyZVRleHQodHh0KS53aWR0aCArIDIwO1xuICAgIH1cblxuICAgIGdldFdpZHRoT2ZIVE1MKGh0bWwsIGZvbnRuYW1lLCBmb250c2l6ZSkge1xuICAgICAgICAvL2Fzc3VtaW5nIG9ubHkgZmlyc3QgY2hhcmFjdGVyIGlzIHVzZWQgdG8gZGVjaWRlIGh0bWwuXG4gICAgICAgIGxldCBjb250ZW50ID0gaHRtbDtcbiAgICAgICAgaWYgKGh0bWwuaW5kZXhPZihcIjxcIikgPT09IDApIHtcbiAgICAgICAgICAgIGxldCB4ID0gaHRtbC5pbmRleE9mKFwiPlwiKTtcbiAgICAgICAgICAgIGxldCB5ID0gaHRtbC5sYXN0SW5kZXhPZihcIjxcIik7XG4gICAgICAgICAgICBjb250ZW50ID0gaHRtbC5zdWJzdHJpbmcoeCArIDEsIHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldFdpZHRoT2ZUZXh0KGNvbnRlbnQsIGZvbnRuYW1lLCBmb250c2l6ZSk7XG4gICAgfVxuXG4gICAgZ2V0Q29sdW1uQ29uZmlnKGNvbmZpZywgY29sS2V5KSB7XG4gICAgICAgIGxldCBjZmcgPSAnJztcbiAgICAgICAgY29uZmlnLmNvbHVtbnMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtLmtleSA9PT0gY29sS2V5KSBjZmcgPSBpdGVtO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNmZztcbiAgICB9XG5cbiAgICBnZXRSb3dBY3R1YWxIZWlnaHQoY29sV2lkdGhzLCByb3dJbmRleCwgZGF0YUxpc3QsIHJvd0hlaWdodCwgY29uZmlnKSB7XG4gICAgICAgIGxldCByb3dEYXRhID0gZGF0YUxpc3Rbcm93SW5kZXhdO1xuICAgICAgICBsZXQgbGluZXMgPSAxO1xuICAgICAgICBPYmplY3Qua2V5cyhjb2xXaWR0aHMpLmZvckVhY2goY29sS2V5ID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygcm93RGF0YVtjb2xLZXldID09PSBcInN0cmluZ1wiICYmICF0aGlzLmdldENvbHVtbkNvbmZpZyhjb25maWcsIGNvbEtleSkuaGlkZGVuICYmIHRoaXMuZ2V0Q29sdW1uQ29uZmlnKGNvbmZpZywgY29sS2V5KS50eXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgICAgICBsZXQgY29udGVudExlbmd0aCA9IHRoaXMuZ2V0V2lkdGhPZlRleHQocm93RGF0YVtjb2xLZXldKTtcbiAgICAgICAgICAgICAgICBsZXQgY29sV2lkdGggPSBjb2xXaWR0aHNbY29sS2V5XTtcbiAgICAgICAgICAgICAgICBsaW5lcyA9IE1hdGguY2VpbChjb250ZW50TGVuZ3RoIC8gY29sV2lkdGgpID4gbGluZXMgPyBNYXRoLmNlaWwoY29udGVudExlbmd0aCAvIGNvbFdpZHRoKSA6IGxpbmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGxpbmVzICogcm93SGVpZ2h0O1xuICAgIH1cblxuICAgIGdldERlZmF1bHRDb2x1bW5zKGNvbHVtbnMpIHtcbiAgICAgICAgbGV0IGNvbHVtbktleXMgPSBbXTtcbiAgICAgICAgY29sdW1ucy5mb3JFYWNoKGNvbHVtbiA9PiB7XG4gICAgICAgICAgICBpZiAoIWNvbHVtbi5oaWRkZW4pIGNvbHVtbktleXMucHVzaChjb2x1bW4ua2V5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb2x1bW5LZXlzO1xuICAgIH1cblxuICAgIGZpeGluZ0N1c3RvbWVyQ29uZmlnKHBhc3NlZENvbmZpZywgZGF0YUxpc3QpIHtcbiAgICAgICAgaWYgKGRhdGFMaXN0ICYmIGRhdGFMaXN0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIHBhc3NlZENvbmZpZztcbiAgICAgICAgbGV0IGN1cnJlbnRDb2x1bW5zT3JkZXIgPSBwYXNzZWRDb25maWcuY29sdW1uc09yZGVyO1xuICAgICAgICBsZXQgY3VycmVudEhpZGRlbkNvbHVtbnMgPSBwYXNzZWRDb25maWcuaGlkZGVuQ29sdW1ucztcbiAgICAgICAgbGV0IGFjdHVyYWxDb2x1bW5zID0gT2JqZWN0LmtleXMoZGF0YUxpc3RbMF0pO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSBjdXJyZW50Q29sdW1uc09yZGVyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAoIWFjdHVyYWxDb2x1bW5zLmluY2x1ZGVzKGN1cnJlbnRDb2x1bW5zT3JkZXJbaV0pKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudENvbHVtbnNPcmRlci5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy9QSS0yMjE2IC0gZGF0YSBmaWVsZHMgYW5kIGNvbmZpZyBhcmUgZGlmZmVyZW50IGhlcmUsIHNvIGNhbiBub3QgZG8gYmVsb3cgY2hlY2tpbmcgdXNpbmcgZGF0YUxpc3QgLSBmb3IgWmVuZGVza1xuICAgICAgICAvLyBmb3IgKGxldCBpID0gY3VycmVudEhpZGRlbkNvbHVtbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgLy8gICAgIGlmICghYWN0dXJhbENvbHVtbnMuaW5jbHVkZXMoY3VycmVudEhpZGRlbkNvbHVtbnNbaV0pKSB7XG4gICAgICAgIC8vICAgICAgICAgY3VycmVudEhpZGRlbkNvbHVtbnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9XG4gICAgICAgIHBhc3NlZENvbmZpZy5jb2x1bW5zT3JkZXIgPSBjdXJyZW50Q29sdW1uc09yZGVyO1xuICAgICAgICBwYXNzZWRDb25maWcuaGlkZGVuQ29sdW1ucyA9IGN1cnJlbnRIaWRkZW5Db2x1bW5zO1xuICAgICAgICByZXR1cm4gcGFzc2VkQ29uZmlnO1xuICAgIH1cblxuICAgIGdldENvbHVtblBvc2l0aW9uKHN0YXRlLCBjb2xLZXkpIHtcbiAgICAgICAgbGV0IGNvbHVtbnNPcmRlciA9IHRoaXMuZ2V0VmlzaWJsZUNvbHVtbnNPcmRlckZyb21TdGF0ZShzdGF0ZSk7XG4gICAgICAgIGxldCBiRmlyc3QgPSBmYWxzZTtcbiAgICAgICAgbGV0IGJMYXN0ID0gZmFsc2U7XG4gICAgICAgIGxldCBiTWlkZGxlID0gdHJ1ZTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHVtbnNPcmRlci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPT0gMCAmJiBjb2x1bW5zT3JkZXJbaV0gPT0gY29sS2V5KSB7XG4gICAgICAgICAgICAgICAgYkZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PSBjb2x1bW5zT3JkZXIubGVuZ3RoIC0gMSAmJiBjb2x1bW5zT3JkZXJbaV0gPT0gY29sS2V5KSB7XG4gICAgICAgICAgICAgICAgYkxhc3QgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChiRmlyc3QgfHwgYkxhc3QpIGJNaWRkbGUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJGaXJzdDogYkZpcnN0LFxuICAgICAgICAgICAgYkxhc3Q6IGJMYXN0LFxuICAgICAgICAgICAgYk1pZGRsZTogYk1pZGRsZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNEYXRhSFRNTExpc3RUeXBlKGNvbEtleSwgcm93cykge1xuICAgICAgICBsZXQgbGVuZ3RoVGhyZXNob2xkID0gNTtcbiAgICAgICAgbGV0IGNoZWNraW5nQ291bnQgPSAxMDA7XG4gICAgICAgIGxldCBiTGlzdCA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByb3cgPSByb3dzW2ldO1xuICAgICAgICAgICAgbGV0IGh0bWwgPSByb3dbY29sS2V5XTtcbiAgICAgICAgICAgIGxldCBjaGVja2luZ1Jlc3VsdHMgPSB0aGlzLmFuYWx5emVIVE1MTGlzdENvbnRlbnQoaHRtbCk7XG4gICAgICAgICAgICBpZiAoY2hlY2tpbmdSZXN1bHRzLmlubmVyRGl2cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgYkxpc3QgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgPiBjaGVja2luZ0NvdW50KyspIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiTGlzdDtcbiAgICB9XG5cbiAgICAvL2hlcmUgYWxsIHRoZSBodG1sIGNvbnRlbnQgc2hvdWxkIGJlIHByb3ZpZGVkIGFzIDxkaXYuPjxkaXY+PC9kaXY+PGRpdj48L2Rpdj48L2Rpdj47XG4gICAgYW5hbHl6ZUhUTUxMaXN0Q29udGVudChodG1sKSB7XG4gICAgICAgIGxldCBvdXRlckRpdiwgaW5uZXJEaXZzO1xuICAgICAgICBpZiAoaHRtbCkge1xuICAgICAgICAgICAgLy9zdGVwIDEsIGdldCBvdXRlciBkaXZcbiAgICAgICAgICAgIG91dGVyRGl2ID0gaHRtbC5zdWJzdHIoMCwgaHRtbC5pbmRleE9mKCc+JykgKyAxKTtcbiAgICAgICAgICAgIGlubmVyRGl2cyA9IFtdO1xuICAgICAgICAgICAgbGV0IGlubmVyUGFydFN0ciA9IGh0bWwuc3Vic3RyKGh0bWwuaW5kZXhPZignPicpICsgMSwgaHRtbC5sYXN0SW5kZXhPZignPC9kaXY+JykgLSAxKTtcbiAgICAgICAgICAgIC8vc3RlcCAyLiBsZXQncyBzcGxpdCBoZXJlXG4gICAgICAgICAgICBpbm5lclBhcnRTdHIuc3BsaXQoJzwvZGl2PicpLmZvckVhY2gocGFydCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnQgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlubmVyRGl2cy5wdXNoKHBhcnQgKyBcIjwvZGl2PlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dGVyRGl2ID0gJyc7XG4gICAgICAgICAgICBpbm5lckRpdnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3V0ZXJEaXY6IG91dGVyRGl2LFxuICAgICAgICAgICAgaW5uZXJEaXZzOiBpbm5lckRpdnNcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFuYWx5emVUZXh0TGlzdENvbnRlbnQodGV4dCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHRleHQgPT0gJ3N0cmluZycgPyB0ZXh0LnNwbGl0KFwiLFwiKSA6IFtdO1xuICAgIH1cblxuICAgIGNhbENvdW50Rm9ySW5lckRpdnMoaW5uZXJEaXZzLCBjb2xXaWR0aCkge1xuICAgICAgICBsZXQgdGV4dCA9ICcnLCBpO1xuICAgICAgICBpZiAoY29sV2lkdGggPiAyMDApIGNvbFdpZHRoID0gMjAwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5uZXJEaXZzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbmV3VGV4dCA9IHRleHQgKyB0aGlzLnN0cmlwSHRtbChpbm5lckRpdnNbaV0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2V0V2lkdGhPZlRleHQobmV3VGV4dCkgPiBjb2xXaWR0aCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGV4dCA9IG5ld1RleHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChpID4gMSkgPyBpIDogMTsgLy8gdG9kbzogdGhpcyBsb2dpYyBuZWVkcyB0byBiZSBkb3VibGUgY2hlY2tlZFxuICAgIH1cblxuXG4gICAgc3RyaXBIdG1sKGh0bWwpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IGRpdiBlbGVtZW50XG4gICAgICAgIHZhciB0ZW1wb3JhbERpdkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAvLyBTZXQgdGhlIEhUTUwgY29udGVudCB3aXRoIHRoZSBwcm92aWRlblxuICAgICAgICB0ZW1wb3JhbERpdkVsZW1lbnQuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgLy8gUmV0cmlldmUgdGhlIHRleHQgcHJvcGVydHkgb2YgdGhlIGVsZW1lbnQgKGNyb3NzLWJyb3dzZXIgc3VwcG9ydClcbiAgICAgICAgcmV0dXJuIHRlbXBvcmFsRGl2RWxlbWVudC50ZXh0Q29udGVudCB8fCB0ZW1wb3JhbERpdkVsZW1lbnQuaW5uZXJUZXh0IHx8IFwiXCI7XG4gICAgfVxuXG4gICAgZm9ybWF0TnVtYmVyKG51bWJlciwgY29sdW1uQ29uZmlnKXtcbiAgICAgICAgaWYoY29sdW1uQ29uZmlnLmZvcm1hdD09PSdDT01NQVNFUEVSQVRFRCcpe1xuICAgICAgICAgICAgcmV0dXJuICgnJytudW1iZXIpLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csIFwiLFwiKTtcbiAgICAgICAgfWVsc2UgaWYoY29sdW1uQ29uZmlnLmZvcm1hdD09PSdTSE9SVEVORUQnKXtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPiAxMDAwMDAwMDAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyIC8gMTAwMDAwMDAwMCkgKyAnIEdCJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID4gMTAwMDAwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlciAvIDEwMDAwMDApICsgJyBNQic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA+IDEwMDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIgLyAxMDAwKSArICcgS0InO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJycgKyBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==