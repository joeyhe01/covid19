(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("CL", [], factory);
	else if(typeof exports === 'object')
		exports["CL"] = factory();
	else
		root["CL"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"cl-components": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	var jsonpArray = this["webpackJsonpCL"] = this["webpackJsonpCL"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./public/src/index.js","vendors~cl-components"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/components/data_table/datatable.scss":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/components/data_table/datatable.scss ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".noir {\n  color: #d2d8e7;\n  letter-spacing: 0.5px; }\n  .noir .fixedDataTableRowLayout_fixedColumnsDivider {\n    border-left: 1px solid rgba(252, 253, 255, 0.06) !important; }\n  .noir .public_fixedDataTable_topShadow {\n    background-image: linear-gradient(180deg, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0)); }\n  .noir .public_fixedDataTable_bottomShadow {\n    background-image: linear-gradient(0deg, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0)); }\n  .noir .fixedDataTableRowLayout_columnsRightShadow {\n    background-image: linear-gradient(90deg, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0)); }\n  .noir .fixedDataTableRowLayout_columnsShadow {\n    background-image: linear-gradient(90deg, rgba(0, 0, 0, 0.25), rgba(0, 0, 0, 0)); }\n  .noir .headerFilterWrapper {\n    background-color: #151C2B; }\n    .noir .headerFilterWrapper .filterSearchTitle {\n      text-align: left;\n      margin-bottom: 10px; }\n    .noir .headerFilterWrapper .filterSearchWrapper {\n      border-color: #6279ac;\n      margin-bottom: 5px; }\n      .noir .headerFilterWrapper .filterSearchWrapper input {\n        color: white; }\n    .noir .headerFilterWrapper .headerFilterButtons {\n      padding-bottom: 5px; }\n      .noir .headerFilterWrapper .headerFilterButtons .material-icons {\n        margin-left: 5px; }\n  .noir .tableWrapper {\n    background-color: #1e2538; }\n  .noir .public_fixedDataTableRow_main {\n    background-color: #243042; }\n  .noir .public_fixedDataTableRow_highlighted {\n    background-color: #1e2538; }\n  .noir .public_fixedDataTable_bodyRow:hover {\n    background-color: #465366; }\n    .noir .public_fixedDataTable_bodyRow:hover .public_fixedDataTableCell_main {\n      background-color: #465366; }\n  .noir .public_fixedDataTableCell_main {\n    background-color: #243042;\n    border: none; }\n  .noir .selectAllWrapper {\n    background-color: #344363; }\n    .noir .selectAllWrapper .spanAllIndicator {\n      color: #0d91e9; }\n  .noir .public_fixedDataTableRow_highlighted .public_fixedDataTableCell_main {\n    background-color: #1D2537; }\n  .noir .public_fixedDataTable_header {\n    border-top: 1px solid rgba(252, 253, 255, 0.06) !important;\n    border-bottom: 1px solid rgba(252, 253, 255, 0.06) !important; }\n  .noir .public_fixedDataTable_header,\n  .noir .public_fixedDataTable_header .public_fixedDataTableCell_main,\n  .noir .public_fixedDataTable_scrollbarSpacer {\n    background-color: #1e2538 !important;\n    background-image: none; }\n  .noir .mdl-radio__outer-circle {\n    border-color: #fff; }\n  .noir .mdl-radio.is-checked .mdl-radio__outer-circle {\n    border-color: #0d91e9; }\n  .noir .mdl-radio__inner-circle {\n    background: #0d91e9; }\n  .noir .mdl-checkbox__box-outline {\n    border-color: #fff; }\n  .noir .fixedDataTableCellLayout_columnReorderContainer {\n    border-color: #0284ff;\n    background-color: #333c51;\n    width: 12px;\n    cursor: move; }\n    .noir .fixedDataTableCellLayout_columnReorderContainer::after {\n      top: calc(50% - 5px); }\n  .noir .dropdownWrapper {\n    background-color: #283548 !important; }\n    .noir .dropdownWrapper .columsWrapper,\n    .noir .dropdownWrapper .controllerWrapper {\n      border-bottom: 2px solid #39496d; }\n    .noir .dropdownWrapper .closeBtn {\n      color: #d2d8e7; }\n  .noir .navWrapper i {\n    color: #35a8f4; }\n  .noir .navWrapper:hover {\n    background-color: #35a8f4; }\n    .noir .navWrapper:hover i {\n      color: #fff; }\n  .noir .navWrapperSelected {\n    background-color: #0d91e9; }\n    .noir .navWrapperSelected i {\n      color: #fff; }\n  .noir .tableSearchWrapper {\n    border-color: #6279ac !important; }\n    .noir .tableSearchWrapper i {\n      color: white; }\n    .noir .tableSearchWrapper input {\n      color: white; }\n      .noir .tableSearchWrapper input::placeholder {\n        color: #9ea5b5; }\n  .noir .tableHeaderTail .editColumnsButton {\n    background-color: #6279ac !important; }\n  .noir .dropdownSelectUnderline {\n    border-color: #d2d8e7; }\n  .noir .listView .public_fixedDataTableRow_highlighted {\n    background-color: #243042; }\n  .noir .listView .public_fixedDataTableCell_main {\n    background-color: #243042; }\n\n.light .fixedDataTableRowLayout_fixedColumnsDivider {\n  border-left: 1px solid rgba(0, 0, 0, 0.06) !important; }\n\n.light .tableHead {\n  background: #f4f4f4 !important; }\n\n.light .tableWrapper {\n  background-color: #f4f4f4; }\n\n.light .tableSearchWrapper {\n  border-color: #5f5f5f !important; }\n\n.light .headerFilterWrapper {\n  background-color: #ffffff; }\n  .light .headerFilterWrapper .filterSearchWrapper {\n    border-color: #5f5f5f; }\n    .light .headerFilterWrapper .filterSearchWrapper input {\n      color: black; }\n\n.light .ScrollbarLayout_main {\n  background-color: #f4f4f4 !important; }\n\n.light .public_fixedDataTable_header {\n  border-top: 1px solid #e8e9eb !important;\n  border-bottom: 1px solid #e8e9eb !important; }\n\n.light .public_fixedDataTable_header,\n.light .public_fixedDataTable_header .public_fixedDataTableCell_main,\n.light .public_fixedDataTable_scrollbarSpacer {\n  background-color: #f4f4f4 !important;\n  background-image: none; }\n\n.light .public_fixedDataTableCell_main {\n  background-color: #ffffff; }\n\n.light .public_fixedDataTableRow_highlighted {\n  background-color: #f4f4f4; }\n\n.light .public_fixedDataTable_bodyRow:hover {\n  background-color: #e0e0e0; }\n  .light .public_fixedDataTable_bodyRow:hover .public_fixedDataTableCell_main {\n    background-color: #e0e0e0; }\n\n.light .tableHeaderTail .editColumnsButton {\n  background-color: #606060 !important; }\n\n.light .dropdownSelectUnderline {\n  border-color: #202020; }\n\n.light .fixedDataTableCellLayout_columnReorderContainer::after {\n  color: #979eaf !important; }\n\n.light .dv_table_cl .material-icons {\n  color: #606060 !important; }\n\n.light .dropdownWrapper .columsWrapper,\n.light .dropdownWrapper .controllerWrapper {\n  border-bottom: 2px solid #d2d8e7; }\n\n.light .mdl-radio__outer-circle {\n  border-color: rgba(0, 0, 0, 0.54); }\n\n.light .mdl-radio.is-checked .mdl-radio__outer-circle {\n  border-color: #0d91e9; }\n\n.light .mdl-radio__inner-circle {\n  background: #0d91e9 !important; }\n\n.light .listView .public_fixedDataTableRow_highlighted {\n  background-color: #ffffff; }\n\n.light .listView .public_fixedDataTableCell_main {\n  background-color: #ffffff; }\n\n.ScrollbarLayout_mainVertical {\n  z-index: 0 !important; }\n\n.public_fixedDataTable_horizontalScrollbar {\n  bottom: 2px !important; }\n\n.offsetError {\n  color: #fd6c6e;\n  margin-top: -21px;\n  margin-bottom: 10px; }\n\n.dv_table_cl {\n  width: 100%;\n  display: inline-block;\n  touch-action: none !important; }\n  .dv_table_cl .listView .public_fixedDataTable_bodyRow {\n    height: calc(100% - 10px) !important; }\n  .dv_table_cl .listView .moreOptionsWrapper {\n    margin-top: -2px; }\n  .dv_table_cl .listView .collapseToggler {\n    margin-top: -1px; }\n  .dv_table_cl .collapseToggler {\n    cursor: pointer;\n    font-size: 12px; }\n  .dv_table_cl .headerControllerIcon {\n    position: absolute;\n    top: 15px; }\n  .dv_table_cl .tableWrapper {\n    position: relative;\n    min-height: 30px; }\n    .dv_table_cl .tableWrapper .down {\n      transform: rotate(180deg);\n      transition: transform 300ms ease; }\n    .dv_table_cl .tableWrapper .up {\n      transform: rotate(0deg);\n      transition: transform 300ms ease; }\n    .dv_table_cl .tableWrapper .array_right {\n      transform: rotate(0deg);\n      transition: transform 300ms ease; }\n    .dv_table_cl .tableWrapper .array_right_down {\n      transform: rotate(90deg);\n      transition: transform 300ms ease; }\n    .dv_table_cl .tableWrapper .tableHead {\n      position: absolute;\n      display: inline-flex;\n      align-items: center;\n      justify-content: space-between;\n      width: 100%;\n      height: 50px; }\n      .dv_table_cl .tableWrapper .tableHead .mdl-button {\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        line-height: unset; }\n      .dv_table_cl .tableWrapper .tableHead .tableHeaderHead {\n        padding-left: 30px; }\n        .dv_table_cl .tableWrapper .tableHead .tableHeaderHead .totalTitle {\n          font-size: 20px; }\n      .dv_table_cl .tableWrapper .tableHead .tableHeaderTail {\n        display: inline-flex;\n        align-items: center;\n        height: inherit; }\n        .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .clearFilterComp {\n          color: #d28c03;\n          cursor: pointer;\n          float: right;\n          margin-right: 15px; }\n        .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper {\n          float: right;\n          cursor: pointer;\n          position: relative;\n          margin-right: 15px; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .downloadBtn {\n            height: 30px;\n            display: flex;\n            align-items: center;\n            text-transform: uppercase !important;\n            background: #6279ac; }\n            .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .downloadBtn .material-icons {\n              font-size: 20px;\n              margin-left: -6px;\n              margin-right: 6px; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .mdl-button {\n            text-transform: capitalize; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .downlowOptionWrapper {\n            position: absolute;\n            top: 37px;\n            right: -128px;\n            z-index: 1000;\n            width: 200px; }\n            .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .downlowOptionWrapper .downloadContent {\n              padding: 10px;\n              background-color: #333c51;\n              position: relative;\n              padding-bottom: 40px; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .downlowOptionWrapper .downloadContent .closeBtn {\n                position: absolute;\n                right: 10px;\n                top: 7px; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .downlowOptionWrapper .downloadContent ul {\n                padding-left: 0;\n                list-style: none; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .downloadBtnWrapper .downlowOptionWrapper .downloadContent Button {\n                position: absolute;\n                bottom: 10px;\n                right: 10px; }\n        .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper {\n          float: right;\n          margin-right: 15px; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper .totalRecordsWrapper {\n            padding-right: 15px;\n            text-align: center; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper ul {\n            padding-left: 0;\n            list-style: none;\n            width: 250px; }\n            .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper ul li {\n              list-style: none;\n              height: 30px;\n              display: inline-block; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper ul li.inActive {\n                pointer-events: none;\n                color: gray; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper ul li i {\n                cursor: pointer; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper ul li i::selection {\n                  background: none; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper ul li .info {\n                height: 30px;\n                width: 150px;\n                text-align: center;\n                position: relative; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .paginatorWrapper ul li .info .inner {\n                  position: absolute;\n                  top: 6px;\n                  width: 100%; }\n        .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper {\n          float: right;\n          position: relative;\n          margin-right: 15px; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .editColumnsButton {\n            height: 30px;\n            text-transform: none;\n            box-shadow: none; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper {\n            position: absolute;\n            top: 25px;\n            right: -15px;\n            z-index: 1000;\n            height: 430px;\n            border-radius: 4px;\n            background-color: white;\n            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12); }\n            .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent {\n              width: 620px; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .controllerWrapper {\n                height: 70px;\n                position: relative;\n                margin-bottom: 10px;\n                padding: 10px 24px 0; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .controllerWrapper .columnTitle {\n                  color: #6279ac; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .controllerWrapper .mdl-checkbox__label {\n                  font-size: inherit; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .controllerWrapper ul {\n                  padding-left: 0; }\n                  .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .controllerWrapper ul li {\n                    list-style: none;\n                    display: inline;\n                    float: left;\n                    margin-right: 20px; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .controllerWrapper .closeBtn {\n                  position: absolute;\n                  right: 0;\n                  top: 0;\n                  min-width: 36px;\n                  margin: 4px;\n                  padding: 0; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .columsWrapper {\n                height: 280px;\n                overflow: auto;\n                margin-bottom: 10px;\n                padding: 0 24px; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .columsWrapper .columnItem {\n                  position: relative;\n                  width: 200px;\n                  margin-bottom: 10px;\n                  margin-right: 5px;\n                  cursor: pointer;\n                  float: left; }\n                  .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .columsWrapper .columnItem .reorder {\n                    width: 25px;\n                    float: left; }\n                  .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .columsWrapper .columnItem .checkboxWrapper {\n                    position: relative;\n                    width: 85%;\n                    float: left; }\n                    .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .columsWrapper .columnItem .checkboxWrapper label {\n                      cursor: all-scroll; }\n                    .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .columsWrapper .columnItem .checkboxWrapper .checkboxLable {\n                      position: absolute;\n                      left: 25px;\n                      top: 0; }\n                  .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .columsWrapper .columnItem .title {\n                    width: 150px;\n                    float: left;\n                    margin-left: 30px; }\n              .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .buttonsWrapper {\n                height: 50px;\n                text-align: right;\n                padding: 0 24px; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .buttonsWrapper .mdl-button {\n                  color: #6279ac;\n                  margin-left: 5px; }\n                .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .wrapper .dropdownWrapper .dropdownContent .buttonsWrapper .mdl-button--raised.mdl-button--colored {\n                  color: #fff; }\n        .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .tableSearchWrapper {\n          position: relative;\n          display: flex;\n          height: 30px;\n          margin-right: 15px;\n          border-bottom: 1px solid;\n          transition: border-bottom ease-in-out 300ms; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .tableSearchWrapper i {\n            width: 30px;\n            height: 30px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 21px;\n            cursor: pointer; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .tableSearchWrapper input {\n            height: 100%;\n            font-size: 14px;\n            padding: 0;\n            border: none;\n            background-color: inherit; }\n            .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .tableSearchWrapper input:focus {\n              outline: none; }\n          .dv_table_cl .tableWrapper .tableHead .tableHeaderTail .tableSearchWrapper.focused {\n            border-bottom: 2px solid #0d91e9 !important; }\n    .dv_table_cl .tableWrapper .tableBody {\n      position: absolute;\n      top: 50px; }\n    .dv_table_cl .tableWrapper .tableGlobalAll {\n      top: 90px; }\n    .dv_table_cl .tableWrapper .selectAllWrapper {\n      position: absolute;\n      top: 50px;\n      left: 0;\n      right: 0;\n      height: 40px;\n      display: flex;\n      align-items: center;\n      padding-left: 20px; }\n      .dv_table_cl .tableWrapper .selectAllWrapper .spanAllIndicator {\n        color: #0d91e9;\n        margin-left: 20px;\n        cursor: pointer; }\n  .dv_table_cl .headerWrapper {\n    position: absolute;\n    display: inline-flex;\n    font-weight: 500;\n    left: 15px;\n    right: 0; }\n    .dv_table_cl .headerWrapper .sortIconWrapper {\n      cursor: pointer;\n      padding-left: 2px; }\n      .dv_table_cl .headerWrapper .sortIconWrapper .material-icons {\n        font-size: 20px; }\n    .dv_table_cl .headerWrapper .filterIconWrapper {\n      position: absolute;\n      left: -2px;\n      cursor: pointer; }\n      .dv_table_cl .headerWrapper .filterIconWrapper .material-icons {\n        font-size: 20px; }\n    .dv_table_cl .headerWrapper .selectedFilter {\n      color: #d28c03; }\n    .dv_table_cl .headerWrapper .hoverSort {\n      opacity: 0.6; }\n    .dv_table_cl .headerWrapper .sortIconUp {\n      transition: transform 300ms ease;\n      transform: rotateZ(0deg); }\n    .dv_table_cl .headerWrapper .sortIconDown {\n      transform: rotateZ(180deg); }\n    .dv_table_cl .headerWrapper .title {\n      position: absolute;\n      left: 23px;\n      top: 5px; }\n    .dv_table_cl .headerWrapper .filterAttachPoint {\n      position: absolute;\n      left: 0;\n      top: 23px; }\n  .dv_table_cl .fixedDataTableCellLayout_columnReorderContainer::after {\n    top: calc(50% - 5px); }\n  .dv_table_cl .rowSelected .public_fixedDataTableCell_main {\n    background-color: yellow; }\n  .dv_table_cl .lightrowSelected .public_fixedDataTableCell_main {\n    background-color: yellow; }\n  .dv_table_cl .noirrowSelected {\n    background-color: #39496D; }\n    .dv_table_cl .noirrowSelected .public_fixedDataTableCell_main {\n      background-color: #39496D; }\n  .dv_table_cl .moreHook {\n    text-decoration: underline;\n    cursor: pointer;\n    margin-left: 5px;\n    width: 50px;\n    display: inline-block; }\n  .dv_table_cl .dropDownActionWrapper {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    cursor: pointer;\n    display: inline-block; }\n    .dv_table_cl .dropDownActionWrapper .title {\n      position: absolute;\n      left: 20px;\n      top: 10px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      width: calc(100% - 60px); }\n    .dv_table_cl .dropDownActionWrapper .material-icons {\n      position: absolute;\n      right: 0;\n      top: 9px; }\n    .dv_table_cl .dropDownActionWrapper .open {\n      transform: rotate(-180deg);\n      transition: transform 150ms ease; }\n    .dv_table_cl .dropDownActionWrapper .actionDropDownAttachPoint {\n      position: absolute;\n      top: 36px;\n      left: 35px; }\n    .dv_table_cl .dropDownActionWrapper .dropdownSelectUnderline {\n      position: absolute;\n      top: 20px;\n      left: 20px;\n      width: calc(100% - 27px); }\n    .dv_table_cl .dropDownActionWrapper .dropDownContent {\n      color: red;\n      font-size: 40px; }\n    .dv_table_cl .dropDownActionWrapper .hidden {\n      display: none; }\n  .dv_table_cl .dropDownActionWrapperDisabled {\n    cursor: default;\n    opacity: 0.5; }\n  .dv_table_cl .iconCallBackCellWrapper {\n    cursor: pointer; }\n  .dv_table_cl .htmlListCellWrapper {\n    position: relative; }\n\n.mdl-checkbox.is-checked .mdl-checkbox__tick-outline {\n  background-color: #2196f3; }\n\n.public_fixedDataTableCell_cellContent .htmlCell {\n  padding-left: 38px !important; }\n  .public_fixedDataTableCell_cellContent .htmlCell .list_cell {\n    padding-left: 0 !important; }\n\n.public_fixedDataTableCell_cellContent .textTooltipCell .tooltipWrapper,\n.public_fixedDataTableCell_cellContent .htmlTooltipCell .tooltipWrapper {\n  padding-left: 27px !important; }\n\n.normaFilterlWrapper {\n  width: 300px;\n  text-align: right;\n  padding: 10px 10px 0; }\n\n.headerFilerNumber .headerFilerNumberFilters {\n  display: flex;\n  align-items: center; }\n  .headerFilerNumber .headerFilerNumberFilters input {\n    width: 110px; }\n\n.dateTimePickerWrapper {\n  width: 350px;\n  padding: 20px; }\n  .dateTimePickerWrapper .headerFilerDateTime .headerFilterButtons {\n    text-align: right;\n    position: relative; }\n    .dateTimePickerWrapper .headerFilerDateTime .headerFilterButtons i {\n      margin-left: 10px;\n      cursor: pointer; }\n    .dateTimePickerWrapper .headerFilerDateTime .headerFilterButtons .hidden {\n      display: none; }\n    .dateTimePickerWrapper .headerFilerDateTime .headerFilterButtons .error {\n      color: red;\n      font-size: 12px;\n      position: absolute;\n      left: 20px;\n      top: 5px; }\n  .dateTimePickerWrapper .headerFilerDateTime .headerDateTimeFilters {\n    display: flex; }\n    .dateTimePickerWrapper .headerFilerDateTime .headerDateTimeFilters .startDTWrapper {\n      width: 50%;\n      text-align: center; }\n    .dateTimePickerWrapper .headerFilerDateTime .headerDateTimeFilters .endDTWraper {\n      width: 50%;\n      text-align: center; }\n\n.headerFilterWrapper {\n  background-color: white;\n  border-radius: 2px;\n  position: relative;\n  box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.2), 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12) !important; }\n  .headerFilterWrapper .filterSearchWrapper {\n    width: 100%;\n    display: inline-flex;\n    align-items: center;\n    margin: 2px 0;\n    border-bottom: 1px solid;\n    transition: border-bottom ease-in-out 300ms; }\n    .headerFilterWrapper .filterSearchWrapper input {\n      width: calc(100% - 20px);\n      border: none;\n      outline: none;\n      font-size: 12px;\n      padding: 4px 0;\n      background-color: inherit; }\n      .headerFilterWrapper .filterSearchWrapper input::placeholder {\n        color: #9ea5b5; }\n    .headerFilterWrapper .filterSearchWrapper i {\n      font-size: 20px;\n      height: 22px; }\n    .headerFilterWrapper .filterSearchWrapper.focused {\n      border-bottom: 2px solid #0d91e9 !important; }\n  .headerFilterWrapper .headerListWrapper {\n    margin-top: -10px; }\n    .headerFilterWrapper .headerListWrapper .headerListTitle {\n      text-align: left;\n      margin-bottom: 10px; }\n  .headerFilterWrapper .headerFilterButtons {\n    margin-bottom: -30px;\n    position: relative; }\n    .headerFilterWrapper .headerFilterButtons i {\n      cursor: pointer;\n      font-size: 20px;\n      padding-top: 5px;\n      z-index: 2; }\n  .headerFilterWrapper .headerFilterOptions {\n    margin: 20px 0;\n    color: #0d91e9; }\n    .headerFilterWrapper .headerFilterOptions .text-button {\n      cursor: pointer; }\n  .headerFilterWrapper .checkBoxRowWrapper {\n    display: inline-block;\n    width: 100%;\n    cursor: pointer; }\n    .headerFilterWrapper .checkBoxRowWrapper label {\n      width: 33px;\n      float: left; }\n    .headerFilterWrapper .checkBoxRowWrapper .title {\n      float: left; }\n\n.public_fixedDataTable_main {\n  outline: none; }\n\nselect {\n  border-radius: 0;\n  width: 100px;\n  height: 20px; }\n\n.mdl-radio__outer-circle {\n  height: 20px !important;\n  width: 20px !important; }\n\n.mdl-radio__inner-circle {\n  height: 12px !important;\n  width: 12px !important; }\n\n.navWrapper {\n  position: absolute;\n  left: 0;\n  top: 0;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center; }\n  .navWrapper:hover {\n    background-color: #ddd; }\n    .navWrapper:hover i {\n      color: #fff; }\n\n.navWrapperSelected {\n  background-color: #ccc; }\n  .navWrapperSelected i {\n    color: #fff; }\n\n.autoEllipse {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  position: absolute;\n  left: 10px;\n  right: 0; }\n\n.headerTitle {\n  position: relative;\n  cursor: pointer;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding-left: 22px; }\n\n.clickableCell {\n  cursor: pointer;\n  color: #4DA5FE; }\n  .clickableCell:hover {\n    text-decoration: underline; }\n\n.textCell {\n  /* These are technically the same, but use both */\n  overflow-wrap: break-word;\n  word-wrap: break-word;\n  -ms-word-break: break-all;\n  /* This is the dangerous one in WebKit, as it breaks things wherever */\n  word-break: break-all;\n  /* Instead use this non-standard one: */\n  word-break: break-word;\n  /* Adds a hyphen where the word breaks, if supported (No Blink) */\n  -ms-hyphens: auto;\n  -moz-hyphens: auto;\n  -webkit-hyphens: auto;\n  hyphens: auto; }\n\n.htmlCell {\n  /* These are technically the same, but use both */\n  overflow-wrap: break-word;\n  word-wrap: break-word;\n  -ms-word-break: break-all;\n  /* This is the dangerous one in WebKit, as it breaks things wherever */\n  word-break: break-all;\n  /* Instead use this non-standard one: */\n  word-break: break-word;\n  /* Adds a hyphen where the word breaks, if supported (No Blink) */\n  -ms-hyphens: auto;\n  -moz-hyphens: auto;\n  -webkit-hyphens: auto;\n  hyphens: auto; }\n\n.tooltipWrapper {\n  cursor: pointer;\n  position: absolute;\n  height: 100%;\n  display: inline-block; }\n\n.htmlListToggler {\n  top: 5px;\n  right: -60px; }\n\n.toolTipDock {\n  position: relative;\n  top: 0;\n  left: 50%; }\n\n.toolTipDockHTML {\n  float: right; }\n\n.moreOptionDock {\n  position: relative;\n  top: 0;\n  left: 7px; }\n\n.moreOptionAttachPoint {\n  top: -6px;\n  left: 33px; }\n\n.tooltipAttachPoint {\n  position: absolute;\n  /* bottom: 0px; */\n  top: 20px; }\n\n.headerTooltipAttachPoint {\n  position: absolute;\n  left: calc(50% + 22px);\n  top: 25px; }\n\n.dvClPopUpWrapper {\n  background-color: #eee;\n  border: 1px solid #ddd;\n  margin-right: 20px;\n  min-width: 125px;\n  padding: 10px;\n  border-radius: 2px;\n  word-wrap: break-word;\n  display: inline-block;\n  color: black; }\n  .dvClPopUpWrapper .closeIcon {\n    position: absolute;\n    right: 34px;\n    top: 10px;\n    cursor: pointer;\n    font-size: 14px;\n    color: black; }\n  .dvClPopUpWrapper .optionItem {\n    padding: 0 20px 0 5px; }\n  .dvClPopUpWrapper ul {\n    padding: 0;\n    margin: 0;\n    max-height: 200px;\n    overflow: auto; }\n    .dvClPopUpWrapper ul li {\n      list-style: none;\n      color: black; }\n      .dvClPopUpWrapper ul li.selectable {\n        cursor: pointer; }\n        .dvClPopUpWrapper ul li.selectable:hover {\n          background-color: #ddd; }\n        .dvClPopUpWrapper ul li.selectable.selected {\n          background-color: #ccc; }\n\n.htmlList ul li {\n  margin-bottom: 10px; }\n\n.dvTetheredToolTip {\n  pointer-events: none;\n  max-width: 50%; }\n\n.dvTooltipText {\n  word-break: break-word; }\n\n.tether-element {\n  z-index: 10000; }\n\n.cfx {\n  clear: both; }\n\n.dvClPopUpWrapper,\n.dvClPopUpWrapper.htmlList {\n  box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.2), 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12) !important; }\n  .dvClPopUpWrapper ul li,\n  .dvClPopUpWrapper.htmlList ul li {\n    padding-left: 5px; }\n  .dvClPopUpWrapper.noir,\n  .dvClPopUpWrapper.htmlList.noir {\n    background: #151C2B;\n    border: none;\n    color: #F4F6F9; }\n    .dvClPopUpWrapper.noir .closeIcon,\n    .dvClPopUpWrapper.noir ul li,\n    .dvClPopUpWrapper.htmlList.noir .closeIcon,\n    .dvClPopUpWrapper.htmlList.noir ul li {\n      color: #F4F6F9; }\n    .dvClPopUpWrapper.noir ul li:hover,\n    .dvClPopUpWrapper.htmlList.noir ul li:hover {\n      background: rgba(255, 255, 255, 0.05); }\n    .dvClPopUpWrapper.noir ul li.selectable.selected,\n    .dvClPopUpWrapper.htmlList.noir ul li.selectable.selected {\n      background: #39496D; }\n    .dvClPopUpWrapper.noir .userSummaryReviewsPopup table tr:nth-child(even),\n    .dvClPopUpWrapper.htmlList.noir .userSummaryReviewsPopup table tr:nth-child(even) {\n      background: #243042; }\n  .dvClPopUpWrapper.light,\n  .dvClPopUpWrapper.htmlList.light {\n    background: white;\n    border: none;\n    color: #283548; }\n    .dvClPopUpWrapper.light .closeIcon,\n    .dvClPopUpWrapper.light ul li,\n    .dvClPopUpWrapper.htmlList.light .closeIcon,\n    .dvClPopUpWrapper.htmlList.light ul li {\n      color: #283548; }\n    .dvClPopUpWrapper.light ul li:hover,\n    .dvClPopUpWrapper.htmlList.light ul li:hover {\n      background: rgba(0, 0, 0, 0.05); }\n    .dvClPopUpWrapper.light ul li.selectable.selected,\n    .dvClPopUpWrapper.htmlList.light ul li.selectable.selected {\n      background: #d2d8e7; }\n    .dvClPopUpWrapper.light .userSummaryReviewsPopup table tr:nth-child(even),\n    .dvClPopUpWrapper.htmlList.light .userSummaryReviewsPopup table tr:nth-child(even) {\n      background: #f4f4f4; }\n\n.clickable {\n  cursor: pointer; }\n\n.moreOptionsWrapper i {\n  cursor: pointer; }\n\n.moreOptionAttachPoint {\n  position: relative; }\n\n.moreOptionsWrapperInner {\n  position: relative; }\n  .moreOptionsWrapperInner ul li {\n    color: #F4F6F9; }\n  .moreOptionsWrapperInner ul li:hover {\n    cursor: pointer; }\n  .moreOptionsWrapperInner .closeIcon {\n    position: absolute;\n    color: #d2d8e7;\n    top: 7px;\n    font-size: 15px;\n    right: 26px;\n    cursor: pointer; }\n  .moreOptionsWrapperInner .noir {\n    background: #151C2B;\n    border: none;\n    color: #F4F6F9;\n    box-shadow: 5px 5px 5px #000000; }\n    .moreOptionsWrapperInner .noir .closeIcon,\n    .moreOptionsWrapperInner .noir ul li {\n      color: #F4F6F9; }\n    .moreOptionsWrapperInner .noir .userSummaryReviewsPopup table tr:nth-child(even) {\n      background: #243042; }\n  .moreOptionsWrapperInner .light {\n    background: white;\n    border: none;\n    color: #283548;\n    box-shadow: 2px 2px 8px 4px #918b8b; }\n    .moreOptionsWrapperInner .light .closeIcon,\n    .moreOptionsWrapperInner .light ul li {\n      color: #283548; }\n    .moreOptionsWrapperInner .light .userSummaryReviewsPopup table tr:nth-child(even) {\n      background: #f4f4f4; }\n\n/*!\n * https://github.com/YouCanBookMe/react-datetime\n */\n.rdt {\n  position: relative; }\n\n.rdtPicker {\n  display: none;\n  position: absolute;\n  width: 250px;\n  padding: 4px;\n  margin-top: 1px;\n  z-index: 99999 !important;\n  background: #fff;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  border: 1px solid #f9f9f9; }\n\n.rdtOpen .rdtPicker {\n  display: block; }\n\n.rdtStatic .rdtPicker {\n  box-shadow: none;\n  position: static; }\n\n.rdtPicker .rdtTimeToggle {\n  text-align: center; }\n\n.rdtPicker table {\n  width: 100%;\n  margin: 0; }\n\n.rdtPicker td,\n.rdtPicker th {\n  text-align: center;\n  height: 28px; }\n\n.rdtPicker td {\n  cursor: pointer; }\n\n.rdtPicker .rdtTimeToggle:hover,\n.rdtPicker td.rdtDay:hover,\n.rdtPicker td.rdtHour:hover,\n.rdtPicker td.rdtMinute:hover,\n.rdtPicker td.rdtSecond:hover {\n  background: #eeeeee;\n  cursor: pointer; }\n\n.rdtPicker td.rdtNew,\n.rdtPicker td.rdtOld {\n  color: #999999; }\n\n.rdtPicker td.rdtToday {\n  position: relative; }\n\n.rdtPicker td.rdtToday:before {\n  content: '';\n  display: inline-block;\n  border-left: 7px solid transparent;\n  border-bottom: 7px solid #428bca;\n  border-top-color: rgba(0, 0, 0, 0.2);\n  position: absolute;\n  bottom: 4px;\n  right: 4px; }\n\n.rdtPicker td.rdtActive,\n.rdtPicker td.rdtActive:hover {\n  background-color: #428bca;\n  color: #fff;\n  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25); }\n\n.rdtPicker td.rdtActive.rdtToday:before {\n  border-bottom-color: #fff; }\n\n.rdtPicker td.rdtDisabled,\n.rdtPicker td.rdtDisabled:hover {\n  background: none;\n  color: #999999;\n  cursor: not-allowed; }\n\n.rdtPicker td span.rdtOld {\n  color: #999999; }\n\n.rdtPicker td span.rdtDisabled,\n.rdtPicker td span.rdtDisabled:hover {\n  background: none;\n  color: #999999;\n  cursor: not-allowed; }\n\n.rdtPicker th {\n  border-bottom: 1px solid #f9f9f9; }\n\n.rdtPicker .dow {\n  width: 14.2857%;\n  border-bottom: none;\n  cursor: default; }\n\n.rdtPicker th.rdtSwitch {\n  width: 100px; }\n\n.rdtPicker th.rdtNext,\n.rdtPicker th.rdtPrev {\n  font-size: 21px;\n  vertical-align: top; }\n\n.rdtNext span,\n.rdtPrev span {\n  display: block;\n  -webkit-touch-callout: none;\n  /* iOS Safari */\n  -webkit-user-select: none;\n  /* Chrome/Safari/Opera */\n  -khtml-user-select: none;\n  /* Konqueror */\n  -moz-user-select: none;\n  /* Firefox */\n  -ms-user-select: none;\n  /* Internet Explorer/Edge */\n  user-select: none; }\n\n.rdtPicker th.rdtDisabled,\n.rdtPicker th.rdtDisabled:hover {\n  background: none;\n  color: #999999;\n  cursor: not-allowed; }\n\n.rdtPicker thead tr:first-child th {\n  cursor: pointer; }\n\n.rdtPicker thead tr:first-child th:hover {\n  background: #eeeeee; }\n\n.rdtPicker tfoot {\n  border-top: 1px solid #f9f9f9; }\n\n.rdtPicker button {\n  border: none;\n  background: none;\n  cursor: pointer; }\n\n.rdtPicker button:hover {\n  background-color: #eee; }\n\n.rdtPicker thead button {\n  width: 100%;\n  height: 100%; }\n\ntd.rdtMonth,\ntd.rdtYear {\n  height: 50px;\n  width: 25%;\n  cursor: pointer; }\n\ntd.rdtMonth:hover,\ntd.rdtYear:hover {\n  background: #eee; }\n\n.rdtCounters {\n  display: inline-block; }\n\n.rdtCounters > div {\n  float: left; }\n\n.rdtCounter {\n  height: 100px; }\n\n.rdtCounter {\n  width: 40px; }\n\n.rdtCounterSeparator {\n  line-height: 100px; }\n\n.rdtCounter .rdtBtn {\n  height: 40%;\n  line-height: 40px;\n  cursor: pointer;\n  display: block;\n  -webkit-touch-callout: none;\n  /* iOS Safari */\n  -webkit-user-select: none;\n  /* Chrome/Safari/Opera */\n  -khtml-user-select: none;\n  /* Konqueror */\n  -moz-user-select: none;\n  /* Firefox */\n  -ms-user-select: none;\n  /* Internet Explorer/Edge */\n  user-select: none; }\n\n.rdtCounter .rdtBtn:hover {\n  background: #eee; }\n\n.rdtCounter .rdtCount {\n  height: 20%;\n  font-size: 1.2em; }\n\n.rdtMilli {\n  vertical-align: middle;\n  padding-left: 8px;\n  width: 48px; }\n\n.rdtMilli input {\n  width: 100%;\n  font-size: 1.2em;\n  margin-top: 37px; }\n\n.rdtTime td {\n  cursor: default; }\n", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-in": "./node_modules/moment/locale/en-in.js",
	"./en-in.js": "./node_modules/moment/locale/en-in.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./en-sg": "./node_modules/moment/locale/en-sg.js",
	"./en-sg.js": "./node_modules/moment/locale/en-sg.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fil": "./node_modules/moment/locale/fil.js",
	"./fil.js": "./node_modules/moment/locale/fil.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-deva": "./node_modules/moment/locale/gom-deva.js",
	"./gom-deva.js": "./node_modules/moment/locale/gom-deva.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./oc-lnc": "./node_modules/moment/locale/oc-lnc.js",
	"./oc-lnc.js": "./node_modules/moment/locale/oc-lnc.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tk": "./node_modules/moment/locale/tk.js",
	"./tk.js": "./node_modules/moment/locale/tk.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-mo": "./node_modules/moment/locale/zh-mo.js",
	"./zh-mo.js": "./node_modules/moment/locale/zh-mo.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./public/src/index.js":
/*!*****************************!*\
  !*** ./public/src/index.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_components_ant_demo_antDemoComp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/components/ant_demo/antDemoComp */ "./src/components/ant_demo/antDemoComp.js");
/* harmony import */ var _src_components_data_table_DataTableComp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../src/components/data_table/DataTableComp */ "./src/components/data_table/DataTableComp.js");


var comps = {
  AntDemoComponent: _src_components_ant_demo_antDemoComp__WEBPACK_IMPORTED_MODULE_0__["default"],
  DataTableComp: _src_components_data_table_DataTableComp__WEBPACK_IMPORTED_MODULE_1__["default"]
};
/* harmony default export */ __webpack_exports__["default"] = (comps);

/***/ }),

/***/ "./src/components/ant_demo/antDemoComp.js":
/*!************************************************!*\
  !*** ./src/components/ant_demo/antDemoComp.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var muicss_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! muicss/react */ "./node_modules/muicss/react.js");
/* harmony import */ var muicss_react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(muicss_react__WEBPACK_IMPORTED_MODULE_1__);
 // Access all components from `muicss/react` module



var AntDemoComponent = function AntDemoComponent() {
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Appbar"], null), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Container"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Button"], {
    color: "primary"
  }, "button"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("form", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Checkbox"], {
    name: "inputA1",
    label: "Option one",
    defaultChecked: true
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Checkbox"], {
    name: "inputA2",
    label: "Option two"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Checkbox"], {
    name: "inputA3",
    label: "Option three is disabled",
    disabled: true
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Select"], {
    name: "input",
    label: "Select Example",
    defaultValue: "option2"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Option"], {
    value: "option1",
    label: "Option 1"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Option"], {
    value: "option2",
    label: "Option 2"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Option"], {
    value: "option3",
    label: "Option 3"
  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Option"], {
    value: "option4",
    label: "Option 4"
  }))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["Dropdown"], {
    color: "primary",
    label: "Dropdown"
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["DropdownItem"], {
    link: "#/link1"
  }, "Option 1"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["DropdownItem"], null, "Option 2.5"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["DropdownItem"], null, "Option 3"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_react__WEBPACK_IMPORTED_MODULE_1__["DropdownItem"], null, "Option 4"))));
};

/* harmony default export */ __webpack_exports__["default"] = (AntDemoComponent);

/***/ }),

/***/ "./src/components/common/csv_generator.js":
/*!************************************************!*\
  !*** ./src/components/common/csv_generator.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var stripHtml = function stripHtml(html) {
  var temporalDivElement = document.createElement("div");
  temporalDivElement.innerHTML = html;
  var pureText = temporalDivElement.textContent || temporalDivElement.innerText || "";
  var pureText = pureText.replace(/\"/g, "'");
  return pureText;
};

var CsvGenerator = function CsvGenerator(dataArrayObj, fileName, separator, addQuotes, downloadColumns) {
  if (downloadColumns) {
    this.titles = downloadColumns;
  } else {
    this.titles = Object.keys(dataArrayObj[0]);
  }

  this.dataArray = [];
  this.fileName = fileName;
  this.separator = separator || ',';
  this.addQuotes = !!addQuotes;

  if (this.addQuotes) {
    this.separator = '"' + this.separator + '"';
  }

  this.getDownloadLink = function () {
    var _this = this;

    var separator = this.separator;
    var addQuotes = this.addQuotes;
    var rows = [];
    var rowData; //adding title first

    var row = [];
    this.titles.forEach(function (title) {
      row.push(title);
    });
    rowData = row.join(separator);
    rows.push('"' + rowData + '"');
    dataArrayObj.forEach(function (dataItem) {
      row = []; //if passed is list of array, then no key exists

      if (Array.isArray(dataItem)) {
        dataItem.forEach(function (val) {
          row.push(val);
        });
      } else {
        _this.titles.forEach(function (title) {
          row.push(stripHtml(dataItem[title]));
        });
      }

      rowData = row.join(separator);

      if (rowData.length && addQuotes) {
        rows.push('"' + rowData + '"');
      }
    });
    var type = 'data:text/csv;charset=utf-8';
    var data = rows.join('\n');

    if (typeof btoa === 'function') {
      type += ';base64';
      data = btoa(unescape(encodeURIComponent(data)));
    } else {
      data = encodeURIComponent(data);
    }

    return this.downloadLink = this.downloadLink || type + ',' + data;
  };

  this.getLinkElement = function (linkText) {
    var downloadLink = this.getDownloadLink();
    var fileName = this.fileName;

    this.linkElement = this.linkElement || function () {
      var a = document.createElement('a');
      a.innerHTML = linkText || '';
      a.href = downloadLink;
      a.download = fileName;
      return a;
    }();

    return this.linkElement;
  }; // call with removeAfterDownload = true if you want the link to be removed after downloading


  this.download = function (removeAfterDownload) {
    var linkElement = this.getLinkElement();
    linkElement.style.display = 'none';
    document.body.appendChild(linkElement);
    linkElement.click();

    if (removeAfterDownload) {
      document.body.removeChild(linkElement);
    }
  };
};

/* harmony default export */ __webpack_exports__["default"] = (CsvGenerator);

/***/ }),

/***/ "./src/components/common/utils.js":
/*!****************************************!*\
  !*** ./src/components/common/utils.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Utils = /*#__PURE__*/function () {
  function Utils() {
    _classCallCheck(this, Utils);
  }

  _createClass(Utils, [{
    key: "_debounce",
    value: function _debounce(cb, timeout) {
      if (this.timeId) {
        //some event happened within timeout
        clearTimeout(this.timeId);
      }

      this.timeId = setTimeout(function () {
        cb();
      }, timeout);
    }
  }]);

  return Utils;
}();

var util = null;

function getUtil() {
  if (util == null) {
    util = new Utils();
  }

  return util;
}

/* harmony default export */ __webpack_exports__["default"] = (getUtil());

/***/ }),

/***/ "./src/components/data_table/DataTableComp.js":
/*!****************************************************!*\
  !*** ./src/components/data_table/DataTableComp.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _comps_TableComp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./comps/TableComp */ "./src/components/data_table/comps/TableComp.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var _services_table_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/table_service */ "./src/components/data_table/services/table_service.js");
/* harmony import */ var _entities_page__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./entities/page */ "./src/components/data_table/entities/page.js");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/utils */ "./src/components/common/utils.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_7__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }










__webpack_require__(/*! ./datatable.scss */ "./src/components/data_table/datatable.scss");

var DataTableComp = /*#__PURE__*/function (_Component) {
  _inherits(DataTableComp, _Component);

  var _super = _createSuper(DataTableComp);

  function DataTableComp(props) {
    var _this;

    _classCallCheck(this, DataTableComp);

    _this = _super.call(this, props);

    _this.bindingFunctions();

    _this.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]();
    _this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.props.appId);
    _this.jumpToRowIndex = 0;

    if (_this.props.config) {
      _this.store.setOriginalTableConfig(_this.service.genenerateTableConfig(_this.props.config));

      _this.store.setUpdatedTableConfig(_this.service.genenerateTableConfig(_this.props.config)); //create page obj in store


      _this.store.updatePage(new _entities_page__WEBPACK_IMPORTED_MODULE_5__["default"](_this.props.config));
    }

    if (_this.props.selectedRowKeys) {
      _this.store.setRowAllSelected(false);

      _this.props.selectedRowKeys.forEach(function (rowKey) {
        _this.store.toggleRowSelectedWithKey(rowKey);
      });
    }

    if (_this.props.unClickableCells) {
      _this.store.setUnClickableCells(_this.props.unClickableCells);
    }

    if (_this.props.data) {
      //set as original dataList
      _this.store.setUpdatedData(_this.props.data, true, false);
    } //next, we need to upgrade the columnType from text to list - this step is automatically done, and on column level
    //to gain performance


    _this.service.upgradeConfig(_this.store.getState().config, _this.store.getState().dataList);

    var cfg = _this.props.customConfig || null; //use previous saved totalDataFields to check if we need to reset customerConfig, if fields are not same, then ignore customer config here

    if (cfg && 'totalDataFields' in cfg && cfg['totalDataFields'] !== _this.store.getState().config.columns.length) {
      cfg['columnsOrder'] = [];

      var customerConfig = _this.service.genenerateCustomConfig(cfg);

      _this.store.setCustomConfig(customerConfig);
    } else {
      var _customerConfig = _this.service.genenerateCustomConfig(cfg);

      _this.store.setCustomConfig(_customerConfig); //next we need to update table config based on customerConfig


      _this.store.setUpdatedTableConfig(_this.service.mergeCustomerConfig(_this.store.getState().config, _customerConfig));
    } //if there are sorter/filter, we need to do here


    _this._sortFilterDatatNoDispatch(false); //we now need to get rowIndex based on selectedRow


    if (_this.props.selectedRowKeys) {
      _this.jumpToRowIndex = _this.service.findRowIndexFromRowKeyValue(_this.props.selectedRowKeys[0], _this.store.getState());
    }

    return _this;
  }

  _createClass(DataTableComp, [{
    key: "selectedRowKeysUpdated",
    value: function selectedRowKeysUpdated(selectedRowKeys) {
      var _this2 = this;

      this.store.setRowAllSelected(false);
      selectedRowKeys.forEach(function (rowKey) {
        _this2.store.toggleRowSelectedWithKey(rowKey);
      }); //enforce window resize event to make UI updates

      window.dispatchEvent(new Event('resize'));
    }
  }, {
    key: "setUnClickableCells",
    value: function setUnClickableCells(unClickableCells) {
      this.store.setUnClickableCells(unClickableCells);
    }
  }, {
    key: "setDownloadData",
    value: function setDownloadData(dataList) {
      this.store.setDownloadData(dataList);
    }
  }, {
    key: "totalTitleUpdated",
    value: function totalTitleUpdated(totalTitle) {
      var cfg = this.store.getState().config;
      cfg['totalTitle'] = totalTitle;
      this.store.setUpdatedTableConfig(cfg);
    } //below methods are externally callable, used to udpate data directly

  }, {
    key: "dataUpdated",
    value: function dataUpdated(updatedDataObj) {
      //we need to update with empty data first, so that all the dropdown/checkbox will be resetted
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedData({
        dataList: []
      }, true);
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedData(updatedDataObj, true); //if there are sorter/filter, we need to do here

      this._sortFilterDatatNoDispatch(true);

      this._scrollTo();
    }
  }, {
    key: "dataUpdatedSelectNoChange",
    value: function dataUpdatedSelectNoChange(updatedDataObj) {
      //we do not want to overwrite preivously selected row keys, just append data here
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedData({
        dataList: []
      }, true, false);
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedData(updatedDataObj, true, false); //if there are sorter/filter, we need to do here

      this._sortFilterDatatNoDispatch(false);

      this._scrollTo();
    }
  }, {
    key: "_scrollTo",
    value: function _scrollTo() {
      this.store.gotoScrollPosition(this.store.getState().scrollPosition[0], this.store.getState().scrollPosition[1]);
    }
  }, {
    key: "setTotalRecords",
    value: function setTotalRecords(total) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setTotalRecords(total);
    }
  }, {
    key: "_sortFilterDatatNoDispatch",
    value: function _sortFilterDatatNoDispatch() {
      var overWriteSelectedKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (!this.store.getState().config.global && (this.store.getState().customConfig.sorter || this.store.getState().customConfig.filters)) {
        var dataList = this.service.sortFilterData(this.store.getState());
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedData({
          dataList: dataList
        }, false, overWriteSelectedKeys);
      }
    }
  }, {
    key: "cellDataUpdate",
    value: function cellDataUpdate(rowKeyVal, columnKey, value) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedCellValue(rowKeyVal, columnKey, value);
    }
  }, {
    key: "dataAppended",
    value: function dataAppended(updatedDataObj) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setAppendedData(updatedDataObj);
    }
  }, {
    key: "updateIconDropDown",
    value: function updateIconDropDown(htmlContent) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).updateIconDropDownContent(htmlContent);
    }
  }, {
    key: "themeUpdate",
    value: function themeUpdate(theme) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setTheme(theme);
    }
  }, {
    key: "toggleAllRows",
    value: function toggleAllRows() {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).toggleAllRows();
    }
  }, {
    key: "resetPage",
    value: function resetPage() {
      this.store.getState().page.reset();
      var page = this.store.getState().page;
      page.reset();
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).updatePage(page);
    }
  }, {
    key: "bindingFunctions",
    value: function bindingFunctions() {
      this._updateWidth = this._updateWidth.bind(this);
      this._onCustomConfigUpdate = this._onCustomConfigUpdate.bind(this);
      this._onSelectedRowChanged = this._onSelectedRowChanged.bind(this);
      this._onRowActionSelected = this._onRowActionSelected.bind(this);
      this._onSortFilterData = this._onSortFilterData.bind(this);
      this._onSingleActionUpdated = this._onSingleActionUpdated.bind(this);
      this.componentWillUnmount = this.componentWillUnmount.bind(this);
      this._onSelectAllLevel = this._onSelectAllLevel.bind(this);
      this._onTableSearch = this._onTableSearch.bind(this);
      this._onCheckBoxChanged = this._onCheckBoxChanged.bind(this);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this3 = this;

      var win = window;

      if (win.addEventListener) {
        win.addEventListener("resize", this._updateWidth, false);
      } else if (win.attachEvent) {
        win.attachEvent("onresize", this._updateWidth);
      } else {
        win.onresize = this._updateWidth;
      }

      win.addEventListener('click', this._toggleClickOutside.bind(this), false); //emulate to have full width

      win.dispatchEvent(new Event("resize")); //now, let's set up listener to customConfigUpdate

      this.store.subscribeTo(this.store.CUSTOM_CONFIG_UPDATE, function (state) {
        _this3._onCustomConfigUpdate();
      });
      this.store.subscribeTo(this.store.ROW_ALL_SELECTED, function (state) {
        _this3._onSelectedRowChanged();
      });
      this.store.subscribeTo(this.store.ROW_SELECTED, function (state) {
        _this3._onSelectedRowChanged();
      });
      this.store.subscribeTo(this.store.SINGLE_ROW_SELECTED, function (state) {
        _this3._onSelectedRowChanged();
      });
      this.store.subscribeTo(this.store.CHECKBOX_CHECKED, function (state) {
        _this3._onCheckBoxChanged();
      });
      this.store.subscribeTo(this.store.RAW_ACTION_SELECTED, function (state) {
        _this3._onRowActionSelected();
      });
      this.store.subscribeTo(this.store.SORT_COLUMN, function (state) {
        _this3._onSortFilterData();
      });
      this.store.subscribeTo(this.store.FILTER_UPDATE, function (state) {
        _this3._onSortFilterData();
      });
      this.store.subscribeTo(this.store.UPDATE_THEME, function () {
        _this3.setState({
          config: _this3.store.getState().config
        });
      });
      this.store.subscribeTo(this.store.UPDATE_SINGLE_SELECTED_ACTION, function () {
        _this3._onSingleActionUpdated();
      });
      this.store.subscribeTo(this.store.SELECT_ALL_LEVEL, function () {
        _this3._onSelectAllLevel();
      });
      this.store.subscribeTo(this.store.TABLE_SEARCH, function (state) {
        _this3._onTableSearch(state.tableSearchedTerm);
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var win = window;

      if (win.removeEventListener) {
        win.removeEventListener("resize", this._updateWidth, false);
      } else if (win.detachEvent) {
        win.detachEvent("onresize", this._updateWidth);
      }

      this.store.resetAll();
    } //this is to close all the tether component automatically

  }, {
    key: "_toggleClickOutside",
    value: function _toggleClickOutside(event) {
      var excludedElement = document.querySelector(".dvClPopUpWrapper");
      var selectedElement = excludedElement ? excludedElement.contains(event.target) : false;

      if (!selectedElement) {
        this.closeAllPopUp();
        this.closeAllFilterPopUp();
      }
    }
  }, {
    key: "closeAllPopUp",
    value: function closeAllPopUp() {
      this.store.closeAllPopUp();
    }
  }, {
    key: "closeAllFilterPopUp",
    value: function closeAllFilterPopUp() {
      this.store.closeAllFilterPopUp();
    } //belows are callback methods

  }, {
    key: "_onCheckBoxChanged",
    value: function _onCheckBoxChanged() {
      if (this.props.onCheckBoxChanged) {
        this.props.onCheckBoxChanged(this.store.getState().checkedRowKeys);
      }
    }
  }, {
    key: "_onSelectAllLevel",
    value: function _onSelectAllLevel() {
      var _this4 = this;

      //needs debounce here as multiple events are triggered together.
      _common_utils__WEBPACK_IMPORTED_MODULE_6__["default"]._debounce(function () {
        if (_this4.props.onSelectAllLevel) {
          _this4.props.onSelectAllLevel(_this4.store.getState().selectAllLevel);
        }
      }, 100);
    }
  }, {
    key: "_onSingleActionUpdated",
    value: function _onSingleActionUpdated() {
      if (this.props.onSingleActionUpdated) {
        var params = this.store.passedBackParams;
        params["rowKeyVal"] = this.store.getState().rowkeyVal;
        params["oldValue"] = this.store.getState().oldValue;
        params["oldColumnKey"] = this.store.getState().oldColumnKey;
        this.props.onSingleActionUpdated(params);
      }
    }
  }, {
    key: "_onCustomConfigUpdate",
    value: function _onCustomConfigUpdate() {
      var _this5 = this;

      _common_utils__WEBPACK_IMPORTED_MODULE_6__["default"]._debounce(function () {
        if (_this5.props.onCustomConfigUpdate) {
          var cfg = _this5.store.getState().customConfig;

          cfg['totalDataFields'] = _this5.store.getState().config.columns.length;

          _this5.props.onCustomConfigUpdate(_this5.store.getState().customConfig);
        }
      }, 200);
    }
  }, {
    key: "_onSelectedRowChanged",
    value: function _onSelectedRowChanged() {
      if (this.props.onSelectedRowChanged) {
        this.props.onSelectedRowChanged(this.store.getState().selectedRowKeys);
      }
    }
  }, {
    key: "_onRowActionSelected",
    value: function _onRowActionSelected() {
      if (this.props.onRowActionSelected) {
        this.props.onRowActionSelected(this.store.getState().rowActionSelected);
      }
    }
  }, {
    key: "_onSortFilterData",
    value: function _onSortFilterData() {
      var _this6 = this;

      if (this.store.getState().config.global) {
        //first we need to reset page
        this.resetPage();

        if (this.props.onSortingFiltering) {
          this.props.onSortingFiltering(this.store.getState().customConfig.sorter, this.store.getState().customConfig.filters);
        }
      } else {
        var dataList = this.service.sortFilterData(this.store.getState());
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedData({
          dataList: []
        });
        setTimeout(function () {
          Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(_this6.props.appId).setUpdatedData({
            dataList: dataList
          });
        });
      } //finally, we need to call back customConfig update


      this._onCustomConfigUpdate();
    }
  }, {
    key: "_onTableSearch",
    value: function _onTableSearch(term) {
      var _this7 = this;

      if (this.store.getState().config.global) {//this is global level table search, not supportd now
      } else {
        var dataList = this.service.searchWholeData(this.store.getState(), term);
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setUpdatedData({
          dataList: []
        });
        setTimeout(function () {
          Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(_this7.props.appId).setUpdatedData({
            dataList: dataList
          });
        });
      }
    }
  }, {
    key: "_updateWidth",
    value: function _updateWidth() {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(this.props.appId).setNewTableWidth(document.querySelector('.dv_table_cl').offsetWidth);
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          dv_table_cl: true,
          noir: this.store.getState().config.theme == "noir",
          light: this.store.getState().config.theme == "light"
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_comps_TableComp__WEBPACK_IMPORTED_MODULE_1__["default"], _extends({}, this.props, {
        scrollToRow: this.jumpToRowIndex
      })));
    }
  }]);

  return DataTableComp;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);

DataTableComp.propTypes = {
  appId: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.string,
  config: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  data: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  customConfig: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object,
  onCustomConfigUpdate: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onSelectedRowChanged: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onRowExpandedContent: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onNextPageHandler: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onGotoPage: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onRowActionSelected: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onSortingFiltering: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onNavigate: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onSingleActionUpdated: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onSelectAllLevel: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onCellClicked: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  selectedRowKeys: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.array,
  onListItemClick: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func,
  onGlobalDownload: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.func
};
DataTableComp.defaultProps = {
  appId: "",
  config: null,
  data: null,
  customConfig: null,
  onCustomConfigUpdate: null,
  onSelectedRowChanged: null,
  onRowExpandedContent: null,
  onNextPageHandler: null,
  onGotoPage: null,
  onRowActionSelected: null,
  onSortingFiltering: null,
  onNavigate: null,
  onSingleActionUpdated: null,
  onSelectAllLevel: null,
  onCellClicked: null,
  selectedRowKeys: [],
  onListItemClick: null,
  onGlobalDownload: null
};
/* harmony default export */ __webpack_exports__["default"] = (DataTableComp);

/***/ }),

/***/ "./src/components/data_table/comps/BoundedTetherComp.js":
/*!**************************************************************!*\
  !*** ./src/components/data_table/comps/BoundedTetherComp.js ***!
  \**************************************************************/
/*! exports provided: BoundedTetherComp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoundedTetherComp", function() { return BoundedTetherComp; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_tether__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-tether */ "./node_modules/react-tether/lib/react-tether.js");
/* harmony import */ var react_tether__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_tether__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var BoundedTetherComp = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(BoundedTetherComp, _React$PureComponent);

  var _super = _createSuper(BoundedTetherComp);

  function BoundedTetherComp() {
    _classCallCheck(this, BoundedTetherComp);

    return _super.call(this);
  }

  _createClass(BoundedTetherComp, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.tableElement = document.querySelector(".".concat(this.props.appId));
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_tether__WEBPACK_IMPORTED_MODULE_1___default.a, _extends({}, this.props, {
        constraints: [{
          to: this.tableElement,
          attachment: 'target',
          pin: true
        }]
      }), this.props.children);
    }
  }]);

  return BoundedTetherComp;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent);

/***/ }),

/***/ "./src/components/data_table/comps/ClearFilterComp.js":
/*!************************************************************!*\
  !*** ./src/components/data_table/comps/ClearFilterComp.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../redux/store */ "./src/components/data_table/redux/store.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


 // import { Button } from "react-mdl";

var ClearFilterComp = /*#__PURE__*/function (_Component) {
  _inherits(ClearFilterComp, _Component);

  var _super = _createSuper(ClearFilterComp);

  function ClearFilterComp(props) {
    var _this;

    _classCallCheck(this, ClearFilterComp);

    _this = _super.call(this, props);
    _this.state = {
      showing: false
    };
    _this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_1__["default"])(_this.props.appId);
    _this.unsubsriberFilterColumn = _this.store.subscribeTo(_this.store.FILTER_UPDATE, function () {
      _this._setFilterCfg();
    });
    _this._setFilterCfg = _this._setFilterCfg.bind(_assertThisInitialized(_this));
    _this.reset = _this.reset.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ClearFilterComp, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubsriberFilterColumn();
    }
  }, {
    key: "_setFilterCfg",
    value: function _setFilterCfg() {
      var customConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_1__["default"])(this.props.appId).getState().customConfig;

      if (customConfig && customConfig.filters.length > 0) {
        this.setState({
          showing: true
        });
      } else {
        this.setState({
          showing: false
        });
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      this.store.resetFilter();
    }
  }, {
    key: "render",
    value: function render() {
      return this.state.showing && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, "Button");
    }
  }]);

  return ClearFilterComp;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]); // <Button className="clearFilterComp" onClick={this.reset}>
//     Reset Filters
// </Button>


/* harmony default export */ __webpack_exports__["default"] = (ClearFilterComp);

/***/ }),

/***/ "./src/components/data_table/comps/DownloadComp.js":
/*!*********************************************************!*\
  !*** ./src/components/data_table/comps/DownloadComp.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var muicss_lib_react_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! muicss/lib/react/button */ "./node_modules/muicss/lib/react/button.js");
/* harmony import */ var muicss_lib_react_button__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(muicss_lib_react_button__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _common_csv_generator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/csv_generator */ "./src/components/common/csv_generator.js");
/* harmony import */ var react_portal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-portal */ "./node_modules/react-portal/es/index.js");
/* harmony import */ var muicss_lib_react_radio__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! muicss/lib/react/radio */ "./node_modules/muicss/lib/react/radio.js");
/* harmony import */ var muicss_lib_react_radio__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(muicss_lib_react_radio__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var muicss_lib_react_input__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! muicss/lib/react/input */ "./node_modules/muicss/lib/react/input.js");
/* harmony import */ var muicss_lib_react_input__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(muicss_lib_react_input__WEBPACK_IMPORTED_MODULE_6__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }







 // import { RadioGroup, Radio, Textfield } from "react-mdl";

var DownloadOptionComp = /*#__PURE__*/function (_Component) {
  _inherits(DownloadOptionComp, _Component);

  var _super = _createSuper(DownloadOptionComp);

  function DownloadOptionComp() {
    var _this2;

    _classCallCheck(this, DownloadOptionComp);

    _this2 = _super.call(this);
    _this2.setOffset = _this2.setOffset.bind(_assertThisInitialized(_this2));
    _this2.close = _this2.close.bind(_assertThisInitialized(_this2));
    _this2.download = _this2.download.bind(_assertThisInitialized(_this2));
    _this2.selectRecords = _this2.selectRecords.bind(_assertThisInitialized(_this2));
    _this2.state = {
      pageSize: 0,
      selectedCounts: "current",
      offset: 0,
      offsetError: false
    };
    return _this2;
  }

  _createClass(DownloadOptionComp, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_1__["default"])(this.props.appId);
      var globalDownloadConfig = this.store.getState().globalDownloadConfig;

      if (globalDownloadConfig) {
        this.setState({
          offset: globalDownloadConfig.offset,
          selectedCounts: globalDownloadConfig.selectedCounts
        });
      }

      this.setState({
        pageSize: this.store.getState().page.pageSize
      });
    }
  }, {
    key: "close",
    value: function close() {
      this.props.onClosePopup();
    }
  }, {
    key: "download",
    value: function download() {
      if (!isNaN(this.state.selectedCounts) && this.state.offsetError) {} else {
        this.props.onConfirmDownload(this.state.selectedCounts, this.state.offset);
      }
    }
  }, {
    key: "selectRecords",
    value: function selectRecords(e) {
      if (isNaN(e.target.value)) {
        this.setState({
          offsetError: false,
          offset: 0
        });
      }

      this.setState({
        selectedCounts: e.target.value
      });
    }
  }, {
    key: "setOffset",
    value: function setOffset(e) {
      var reg = /^\d+$/;

      if (!reg.test(e.target.value) && e.target.value.trim() !== '') {
        this.setState({
          offsetError: true,
          offset: e.target.value
        });
      } else {
        this.setState({
          offsetError: false,
          offset: e.target.value
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "downloadContent"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "closeBtn",
        onClick: this.close
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "material-icons"
      }, "clear")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, "Download Options"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_lib_react_radio__WEBPACK_IMPORTED_MODULE_5___default.a, {
        name: "numRecords",
        value: "current",
        label: "Current"
      }, "Current"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_lib_react_radio__WEBPACK_IMPORTED_MODULE_5___default.a, {
        name: "numRecords",
        value: "100",
        label: "100"
      }, "100 Records"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_lib_react_radio__WEBPACK_IMPORTED_MODULE_5___default.a, {
        name: "numRecords",
        value: "200",
        label: "200"
      }, "200 Records"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_lib_react_radio__WEBPACK_IMPORTED_MODULE_5___default.a, {
        name: "numRecords",
        value: "300",
        label: "300"
      }, "300 Records"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_lib_react_radio__WEBPACK_IMPORTED_MODULE_5___default.a, {
        name: "numRecords",
        value: "400",
        label: "400"
      }, "400 Records"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_lib_react_radio__WEBPACK_IMPORTED_MODULE_5___default.a, {
        name: "numRecords",
        value: "500",
        label: "500"
      }, "500 Records"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_lib_react_radio__WEBPACK_IMPORTED_MODULE_5___default.a, {
        name: "numRecords",
        value: "1000",
        label: "1000"
      }, "1000 Records"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_lib_react_radio__WEBPACK_IMPORTED_MODULE_5___default.a, {
        name: "numRecords",
        value: "3000",
        label: "3000"
      }, "3000 Records"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_lib_react_radio__WEBPACK_IMPORTED_MODULE_5___default.a, {
        name: "numRecords",
        value: "5000",
        label: "5000"
      }, "5000 Records"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_lib_react_radio__WEBPACK_IMPORTED_MODULE_5___default.a, {
        name: "numRecords",
        value: "10000",
        label: "10000"
      }, "10000 Records"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_lib_react_radio__WEBPACK_IMPORTED_MODULE_5___default.a, {
        name: "numRecords",
        value: "20000",
        label: "20000"
      }, "20000 Records"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_lib_react_input__WEBPACK_IMPORTED_MODULE_6___default.a, {
        defaultValue: this.state.offset,
        onChange: this.setOffset,
        label: "Offset Records",
        floatingLabel: true
      }), this.state.offsetError && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "offsetError"
      }, "Invalid Offset Number"), !this.state.offsetError && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_lib_react_button__WEBPACK_IMPORTED_MODULE_2___default.a, {
        variant: "raised",
        color: "primary",
        onClick: this.download
      }, "Confirm")));
    }
  }]);

  return DownloadOptionComp;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]); // <RadioGroup container="ul" childContainer="li" name="otptionDownload" value={this.state.selectedCounts} onChange={this.selectRecords}>
//     <Radio value="current">Current</Radio>
//     <Radio value="100">100 Records</Radio>
//     <Radio value="200">200 Records</Radio>
//     <Radio value="300">300 Records</Radio>
//     <Radio value="400">400 Records</Radio>
//     <Radio value="500">500 Records</Radio>
//     <Radio value="1000">1000 Records</Radio>
//     <Radio value="3000">3000 Records</Radio>
//     <Radio value="5000">5000 Records</Radio>
//     <Radio value="10000">10000 Records</Radio>
//     <Radio value="20000">20000 Records</Radio>
// </RadioGroup>
// {!isNaN(this.state.selectedCounts) &&
//     <Textfield
//         value={this.state.offset}
//         onChange={this.setOffset}
//         label="Offset Records"
//         floatingLabel
//     />}
// <Button raised colored onClick={this.download}>
//     Confirm
//     </Button>


var DownloadComp = /*#__PURE__*/function (_Component2) {
  _inherits(DownloadComp, _Component2);

  var _super2 = _createSuper(DownloadComp);

  function DownloadComp() {
    var _this3;

    _classCallCheck(this, DownloadComp);

    _this3 = _super2.call(this);
    _this3.download = _this3.download.bind(_assertThisInitialized(_this3));
    _this3.getDownloadColumns = _this3.getDownloadColumns.bind(_assertThisInitialized(_this3));
    _this3.closePopup = _this3.closePopup.bind(_assertThisInitialized(_this3));
    _this3.confirmDownload = _this3.confirmDownload.bind(_assertThisInitialized(_this3));
    _this3._download = _this3._download.bind(_assertThisInitialized(_this3));
    _this3.state = {
      isOpen: false,
      downloading: false,
      btnTitle: 'Export'
    };
    return _this3;
  }

  _createClass(DownloadComp, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this4 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_1__["default"])(this.props.appId);

      if (this.store.getState().config.global) {
        var _this = this;

        this.unSubscribeDownload = this.store.subscribeTo(this.store.SET_DOWNLOAD_DATA, function () {
          _this4.setState({
            btnTitle: 'Export'
          });

          if (_this4.store.getState().downloadDataList.length > 0) {
            _this4._download(_this4.store.getState().downloadDataList);
          }
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.unSubscribeDownload) {
        this.unSubscribeDownload();
      }
    }
  }, {
    key: "getDownloadColumns",
    value: function getDownloadColumns() {
      var state = this.store.getState();
      var columns = state.customConfig.columnsOrder;

      if (!columns || columns.length == 0) {
        columns = Object.keys(state.dataList[0]);
      }

      var outputColumns = [];
      columns.map(function (columnKey, i) {
        if (state.config.columnToBeDownloaded(columnKey)) {
          outputColumns.push(columnKey);
        }
      });
      return outputColumns;
    }
  }, {
    key: "download",
    value: function download() {
      //if it is global retrieval, we need to let user select rows
      if (this.store.getState().config.global) {
        this.setState({
          isOpen: true
        });
      } else {
        this._download();
      }
    }
  }, {
    key: "_download",
    value: function _download(dataList) {
      if (!dataList) {
        dataList = this.store.getState().dataList;
      }

      var csvGenerator = new _common_csv_generator__WEBPACK_IMPORTED_MODULE_3__["default"](dataList, 'export.csv', ",", true, this.getDownloadColumns());
      csvGenerator.download(true);
    }
  }, {
    key: "closePopup",
    value: function closePopup() {
      this.setState({
        isOpen: false
      });
    }
  }, {
    key: "confirmDownload",
    value: function confirmDownload(records, offset) {
      //saving to store
      this.store.setGlobalDownloadConfig({
        offset: offset,
        selectedCounts: records
      });

      if (records === 'current') {
        //this is current data view records, download directly
        this._download();
      } else {
        if (this.props.onGlobalDownload) {
          this.setState({
            btnTitle: 'Exporting'
          });
          this.props.onGlobalDownload(records, offset);
        }
      }

      this.setState({
        isOpen: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "downloadBtnWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(muicss_lib_react_button__WEBPACK_IMPORTED_MODULE_2___default.a, {
        variant: "raised",
        color: "primary",
        onClick: this.download
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "material-icons"
      }, "arrow_downward"), this.state.btnTitle), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
        id: "hook_download_" + this.props.appId,
        className: "downlowOptionWrapper"
      }), this.state.isOpen && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_portal__WEBPACK_IMPORTED_MODULE_4__["Portal"], {
        node: document && document.getElementById("hook_download_" + this.props.appId)
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(DownloadOptionComp, _extends({}, this.props, {
        onClosePopup: this.closePopup,
        onConfirmDownload: this.confirmDownload
      }))));
    }
  }]);

  return DownloadComp;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]); // <Button className='downloadBtn' ripple raised colored onClick={this.download}>
//     <i className='material-icons'>arrow_downward</i>
//     {this.state.btnTitle}
// </Button>


/* harmony default export */ __webpack_exports__["default"] = (DownloadComp);

/***/ }),

/***/ "./src/components/data_table/comps/PaginatorComp.js":
/*!**********************************************************!*\
  !*** ./src/components/data_table/comps/PaginatorComp.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PaginatorComponent; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_2__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }





var PaginatorComponent = /*#__PURE__*/function (_Component) {
  _inherits(PaginatorComponent, _Component);

  var _super = _createSuper(PaginatorComponent);

  function PaginatorComponent() {
    var _this;

    _classCallCheck(this, PaginatorComponent);

    _this = _super.call(this);
    _this.state = {
      page: null,
      config: null
    };
    _this.first = _this.first.bind(_assertThisInitialized(_this));
    _this.pre = _this.pre.bind(_assertThisInitialized(_this));
    _this.next = _this.next.bind(_assertThisInitialized(_this));
    _this.last = _this.last.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(PaginatorComponent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_1__["default"])(this.props.appId);
      this.page = this.store.getState().page;
      this.setState({
        page: this.page,
        config: this.store.getState().config,
        totalRecords: this.store.getState().dataList.length
      });
      if (this.store.getState().config.enablePaginator) this.unSubscribePage = this.store.subscribeTo(this.store.PAGE_UPDATE, function () {
        _this2.page = _this2.store.getState().page;

        _this2.setState({
          page: _this2.page
        });
      });
      if (!this.store.getState().config.enablePaginator) this.unSubscribeFilter = this.store.subscribeTo(this.store.DATA_UPDATED, function (state) {
        _this2.setState({
          totalRecords: _this2.store.getState().dataList.length
        });
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.store.getState().config.enablePaginator) this.unSubscribePage();
      if (!this.store.getState().config.enablePaginator) this.unSubscribeFilter();
    }
  }, {
    key: "first",
    value: function first() {
      this.page.first();
      this.resetState();
    }
  }, {
    key: "pre",
    value: function pre() {
      this.page.pre();
      this.resetState();
    }
  }, {
    key: "next",
    value: function next() {
      this.page.next();
      this.resetState();
    }
  }, {
    key: "last",
    value: function last() {
      this.page.last();
      this.resetState();
    }
  }, {
    key: "resetState",
    value: function resetState() {
      this.setState({
        page: this.page
      });

      if ("onGotoPage" in this.props) {
        this.props.onGotoPage(this.page.currentPage);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var pageStr = '';

      if (this.state.page) {
        if (this.state.page.total > 0) {
          pageStr = this.state.page.total;
        } else {
          if (this.store.getState().dataList && this.store.getState().dataList.length > 0) {
            pageStr = 'many';
          } else {
            pageStr = '';
          }
        }
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "paginatorWrapper"
      }, this.state.page && this.state.config.enablePaginator && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ul", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", {
        onClick: this.first,
        className: classnames__WEBPACK_IMPORTED_MODULE_2___default()({
          inActive: !this.state.page.isFirstEnabled()
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "material-icons"
      }, "first_page")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", {
        onClick: this.pre,
        className: classnames__WEBPACK_IMPORTED_MODULE_2___default()({
          inActive: !this.state.page.isPreEnabled()
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "material-icons"
      }, "skip_previous")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "info"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "inner"
      }, this.state.page.getPageRange()[0], " - ", this.state.page.getPageRange()[1], pageStr === '' ? '' : ' of ', pageStr))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", {
        onClick: this.next,
        className: classnames__WEBPACK_IMPORTED_MODULE_2___default()({
          inActive: !this.state.page.isNextEnabled()
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "material-icons"
      }, "skip_next")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("li", {
        onClick: this.last,
        className: classnames__WEBPACK_IMPORTED_MODULE_2___default()({
          inActive: !this.state.page.isLastEnabled()
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "material-icons"
      }, "last_page"))), this.state.page && !this.state.config.totalTitle && !this.state.config.enablePaginator && !this.state.config.hideTotal && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "totalRecordsWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "innterPart"
      }, "Total Records: ", this.state.totalRecords)));
    }
  }]);

  return PaginatorComponent;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./src/components/data_table/comps/SelectAllIndicatorComp.js":
/*!*******************************************************************!*\
  !*** ./src/components/data_table/comps/SelectAllIndicatorComp.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SelectAllIndicatorComponent; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _services_table_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/table_service */ "./src/components/data_table/services/table_service.js");
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../redux/store */ "./src/components/data_table/redux/store.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }





var SelectAllIndicatorComponent = /*#__PURE__*/function (_Component) {
  _inherits(SelectAllIndicatorComponent, _Component);

  var _super = _createSuper(SelectAllIndicatorComponent);

  function SelectAllIndicatorComponent() {
    var _this;

    _classCallCheck(this, SelectAllIndicatorComponent);

    _this = _super.call(this);
    _this.state = {
      selectedRowsCount: 0,
      selectLevel: 0 //0,1,2,3 - 0:noSelection, 1:notAll, 2:pageLevelAll, 3:globalLevelAll

    };
    _this.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_1__["default"]();
    _this._setSelected = _this._setSelected.bind(_assertThisInitialized(_this));
    _this.toggleSelectAll = _this.toggleSelectAll.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(SelectAllIndicatorComponent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unsubsriberAllSelected = this.store.subscribeTo(this.store.ROW_ALL_SELECTED, function () {
        _this2._setSelected();
      });
      this.unsubsriberSingleSelected = this.store.subscribeTo(this.store.ROW_SELECTED, function () {
        _this2._setSelected();
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubsriberAllSelected();
      this.unsubsriberSingleSelected();
    }
  }, {
    key: "_setSelected",
    value: function _setSelected() {
      var state = this.store.getState();
      var isAllRowSelected = this.service.isAllRowSelected(state.dataList, state.config, state.selectedRowKeys);
      var level = 0;

      if (isAllRowSelected) {
        level = state.selectedRowKeys.length === state.page.total ? 3 : 2;
      } else if (state.selectedRowKeys.length > 0) {
        level = 1;
      }

      this.setState({
        selectLevel: level,
        selectedRowsCount: state.selectedRowKeys.length
      });
      this.store.setSelectAllLevel(level);
    }
  }, {
    key: "toggleSelectAll",
    value: function toggleSelectAll() {
      var _this3 = this;

      this.setState({
        selectLevel: this.state.selectLevel === 3 ? 0 : 3
      });
      setTimeout(function () {
        if (_this3.state.selectLevel === 0) {
          _this3.store.setRowAllSelected(false);

          _this3.store.toggleRowSelected(-1);

          window.dispatchEvent(new Event("resize"));
        }

        _this3.store.setSelectAllLevel(_this3.state.selectLevel);
      }, 0);
    }
  }, {
    key: "render",
    value: function render() {
      var comp = null;

      if (this.state.selectLevel === 1) {
        comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, this.state.selectedRowsCount, " records selected.");
      } else if (this.state.selectLevel === 2) {
        comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, "All ", this.state.selectedRowsCount, " records on this page are selected.", /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
          className: "spanAllIndicator",
          onClick: this.toggleSelectAll
        }, "Select all ", this.store.getState().page.total, " records"));
      } else if (this.state.selectLevel === 3) {
        comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, "All ", this.store.getState().page.total, " records are selected.", /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
          className: "spanAllIndicator",
          onClick: this.toggleSelectAll
        }, "Clear selection"));
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "selectAllWrapper"
      }, comp);
    }
  }]);

  return SelectAllIndicatorComponent;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);



/***/ }),

/***/ "./src/components/data_table/comps/SettingComp.js":
/*!********************************************************!*\
  !*** ./src/components/data_table/comps/SettingComp.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_portal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-portal */ "./node_modules/react-portal/es/index.js");
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var _services_table_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/table_service */ "./src/components/data_table/services/table_service.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var jquery_ui_ui_widgets_sortable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jquery-ui/ui/widgets/sortable */ "./node_modules/jquery-ui/ui/widgets/sortable.js");
/* harmony import */ var jquery_ui_ui_widgets_sortable__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(jquery_ui_ui_widgets_sortable__WEBPACK_IMPORTED_MODULE_6__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }







 // import { Checkbox } from "react-mdl";
// import { Button } from "react-mdl";

var SettingComponentColumnItem = /*#__PURE__*/function (_Component) {
  _inherits(SettingComponentColumnItem, _Component);

  var _super = _createSuper(SettingComponentColumnItem);

  function SettingComponentColumnItem() {
    var _this2;

    _classCallCheck(this, SettingComponentColumnItem);

    _this2 = _super.call(this);
    _this2.onChange = _this2.onChange.bind(_assertThisInitialized(_this2));
    _this2.state = {
      checked: true,
      title: ''
    };
    _this2.allSelected = _this2.allSelected.bind(_assertThisInitialized(_this2));
    _this2.defaultSelected = _this2.defaultSelected.bind(_assertThisInitialized(_this2));
    return _this2;
  }

  _createClass(SettingComponentColumnItem, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this3 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);

      if (Object.keys(this.store.getState().columnHiddenTmp).length > 0) {
        this.setState({
          checked: !this.store.getState().columnHiddenTmp[this.props.column],
          title: this.store.getState().config.getColumnConfig(this.props.column).title
        });
      } else {
        this.setState({
          checked: !this.store.getState().config.columnHidden(this.props.column),
          title: this.store.getState().config.getColumnConfig(this.props.column).title
        });
      }

      this.subscriber_all = this.store.subscribeTo(this.store.SELECT_ALL_COLUMNS, function (open) {
        _this3.allSelected(open);
      });
      this.subscriber_default = this.store.subscribeTo(this.store.SELECT_DEFAULT_COLUMNS, function (open) {
        _this3.defaultSelected(open);
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.subscriber_all();
      this.subscriber_default();
    }
  }, {
    key: "allSelected",
    value: function allSelected(open) {
      if (open) {
        this.setState({
          checked: true
        });
      } else {
        this.setState({
          checked: false
        });
      }

      this.props.onItemChecked(this.props.column, !open);
    }
  }, {
    key: "defaultSelected",
    value: function defaultSelected(open) {
      var _this4 = this;

      var defaultColumns = this.store.getState().defaultColumns;

      if (defaultColumns.includes(this.props.column) && open) {
        this.setState({
          checked: true
        });
      } else {
        this.setState({
          checked: false
        });
      }

      setTimeout(function () {
        _this4.props.onItemChecked(_this4.props.column, !_this4.state.checked);
      }, 0);
    }
  }, {
    key: "onChange",
    value: function onChange(e) {
      this.setState({
        checked: e.target.checked
      });
      this.props.onItemChecked(this.props.column, !e.target.checked);
    }
  }, {
    key: "render",
    value: function render() {
      // <span className='title autoEllipse'>{this.props.column}</span>
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "columnItem"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
        className: "checkboxWrapper reorder"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, "checkbox"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
        className: "checkboxLable autoEllipse",
        title: this.state.title
      }, this.state.title)));
    }
  }]);

  return SettingComponentColumnItem;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]); // <Checkbox
//     key={this.props.rowIndex}
//     checked={this.state.checked}
//     onChange={this.onChange}
// />


var SettingComponentColumns = /*#__PURE__*/function (_Component2) {
  _inherits(SettingComponentColumns, _Component2);

  var _super2 = _createSuper(SettingComponentColumns);

  function SettingComponentColumns() {
    var _this5;

    _classCallCheck(this, SettingComponentColumns);

    _this5 = _super2.call(this);
    _this5.state = {
      columnsOrder: []
    };
    _this5.onItemChecked = _this5.onItemChecked.bind(_assertThisInitialized(_this5));
    _this5.saveColumns = _this5.saveColumns.bind(_assertThisInitialized(_this5));
    _this5.onChangeAll = _this5.onChangeAll.bind(_assertThisInitialized(_this5));
    _this5.onChangeDefault = _this5.onChangeDefault.bind(_assertThisInitialized(_this5));
    _this5.updatedColumnStatus = {};
    _this5.columnOrderChanged = false;
    return _this5;
  }

  _createClass(SettingComponentColumns, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this6 = this;

      this.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId); // if there are other popups open, close them

      this.store.closeAllPopUp();
      this.store.closeAllFilterPopUp(); //we do not want to dynamically chagne it, so having to use clone here

      this.setState({
        columnsOrder: JSON.parse(JSON.stringify(this.service.getNoneStickyColumnsOrderFromState(this.store.getState())))
      });
      this.unsubscriberCloseAllPopUp = this.store.subscribeTo(this.store.CLOSE_ALL_POPUP, function () {
        _this6.props.onClose();
      });

      var _this = this;

      jquery__WEBPACK_IMPORTED_MODULE_5___default()(this.refs.columsWrapper).sortable({
        startPos: null,
        endPos: null,
        handle: ".reorder",
        start: function start(event, ui) {
          this.startPos = ui.item.index();
        },
        stop: function stop(event, ui) {
          this.endPos = ui.item.index();
          var comps = _this.state.columnsOrder;
          comps.splice(this.endPos, 0, comps.splice(this.startPos, 1)[0]);
          _this.columnOrderChanged = true; //now let's updaste parent for updating
          //_this.props.onOrderChanged(comps);

          _this.setState({
            columnsOrder: comps
          });
        }
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriberCloseAllPopUp();
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setColumnTempHiddenStatus({});
    }
  }, {
    key: "onItemChecked",
    value: function onItemChecked(key, checked) {
      this.updatedColumnStatus[key] = checked;
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setColumnTempHiddenStatus(this.updatedColumnStatus);
    }
  }, {
    key: "saveColumns",
    value: function saveColumns() {
      if (this.columnOrderChanged) {
        this.props.onOrderChanged(this.service.restoreStickyColumnsFromState(this.store.getState(), this.state.columnsOrder));
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setColumnsHidden(this.updatedColumnStatus);
      } else {
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setColumnsHidden(this.updatedColumnStatus);
      }

      this.props.onClose();
    }
  }, {
    key: "onChangeAll",
    value: function onChangeAll(e) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).triggerSelectAllColumns(e.target.checked);
    }
  }, {
    key: "onChangeDefault",
    value: function onChangeDefault(e) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).triggerDefaultColumns(e.target.checked);
    }
  }, {
    key: "render",
    value: function render() {
      var _this7 = this;

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "dropdownContent",
        onClick: function onClick(e) {
          return e.stopPropagation();
        }
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "controllerWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "columnTitle"
      }, "Select Columns"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, "Part 1")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "columsWrapper",
        ref: "columsWrapper"
      }, this.state.columnsOrder.map(function (column, key) {
        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(SettingComponentColumnItem, _extends({
          onItemChecked: _this7.onItemChecked,
          key: key + Math.random(),
          column: column
        }, _this7.props));
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "buttonsWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, "part 2")));
    }
  }]);

  return SettingComponentColumns;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]); // <ul>
//     <li>
//         <Checkbox label={"Default"} onChange={this.onChangeDefault} />
//     </li>
//     <li>
//         <Checkbox label={"All"} onChange={this.onChangeAll} />
//     </li>
// </ul>
//
// <Button
//     className="closeBtn"
//     onClick={e => {
//         this.props.onClose();
//     }}>
//     <i className="material-icons">clear</i>
// </Button>
// <Button
//     ripple
//     onClick={e => {
//         this.props.onClose();
//     }}>
//     Cancel
// </Button>
// <Button raised colored onClick={this.saveColumns}>
//     Save
// </Button>


var SettingComponent = /*#__PURE__*/function (_Component3) {
  _inherits(SettingComponent, _Component3);

  var _super3 = _createSuper(SettingComponent);

  function SettingComponent() {
    var _this8;

    _classCallCheck(this, SettingComponent);

    _this8 = _super3.call(this);
    _this8.state = {
      isOpen: false
    };
    _this8.toggleDropDown = _this8.toggleDropDown.bind(_assertThisInitialized(_this8));
    return _this8;
  }

  _createClass(SettingComponent, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this = this;
    }
  }, {
    key: "toggleDropDown",
    value: function toggleDropDown(event) {
      if (event) {
        event.stopPropagation();
      }

      this.setState({
        isOpen: !this.state.isOpen
      });
    }
  }, {
    key: "_toggleClickOutside",
    value: function _toggleClickOutside(event) {
      var excludedElement = document.querySelector(".dropdownWrapper");
      var excludedElement1 = document.querySelector(".wrapper");
      var selectedElement1 = excludedElement1 ? excludedElement1.contains(event.target) : false;
      var selectedElement = excludedElement ? excludedElement.contains(event.target) : false;

      if (!selectedElement1 && !selectedElement) {
        if (this.state.isOpen) this.toggleDropDown();
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "wrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", null, "buttons"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("span", {
        id: "hook_" + this.props.appId,
        className: "dropdownWrapper"
      }), this.state.isOpen && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_portal__WEBPACK_IMPORTED_MODULE_1__["Portal"], {
        node: document && document.getElementById("hook_" + this.props.appId)
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(SettingComponentColumns, _extends({}, this.props, {
        onClose: this.toggleDropDown
      }))));
    }
  }]);

  return SettingComponent;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]); // <Button className='editColumnsButton' ripple raised primary onClick={this.toggleDropDown}>
//     Edit Columns
// </Button>


/* harmony default export */ __webpack_exports__["default"] = (SettingComponent);

/***/ }),

/***/ "./src/components/data_table/comps/TableComp.js":
/*!******************************************************!*\
  !*** ./src/components/data_table/comps/TableComp.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fixed-data-table-2 */ "./node_modules/fixed-data-table-2/main.js");
/* harmony import */ var fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var _cells_cells__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cells/cells */ "./src/components/data_table/comps/cells/cells.js");
/* harmony import */ var _cells_headercell__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cells/headercell */ "./src/components/data_table/comps/cells/headercell.js");
/* harmony import */ var _SettingComp__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SettingComp */ "./src/components/data_table/comps/SettingComp.js");
/* harmony import */ var _PaginatorComp__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./PaginatorComp */ "./src/components/data_table/comps/PaginatorComp.js");
/* harmony import */ var _services_table_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../services/table_service */ "./src/components/data_table/services/table_service.js");
/* harmony import */ var _entities_column__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../entities/column */ "./src/components/data_table/entities/column.js");
/* harmony import */ var _SelectAllIndicatorComp__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./SelectAllIndicatorComp */ "./src/components/data_table/comps/SelectAllIndicatorComp.js");
/* harmony import */ var _ClearFilterComp__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ClearFilterComp */ "./src/components/data_table/comps/ClearFilterComp.js");
/* harmony import */ var _TableSearchComp__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./TableSearchComp */ "./src/components/data_table/comps/TableSearchComp.js");
/* harmony import */ var _DownloadComp__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./DownloadComp */ "./src/components/data_table/comps/DownloadComp.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
















__webpack_require__(/*! fixed-data-table-2/dist/fixed-data-table.css */ "./node_modules/fixed-data-table-2/dist/fixed-data-table.css");

__webpack_require__(/*! ../datatable.scss */ "./src/components/data_table/datatable.scss");

var TableComp = /*#__PURE__*/function (_Component) {
  _inherits(TableComp, _Component);

  var _super = _createSuper(TableComp);

  function TableComp(props) {
    var _this;

    _classCallCheck(this, TableComp);

    _this = _super.call(this, props);

    _this.bindingFunctions();

    _this.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_8__["default"]();
    _this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_3__["default"])(_this.props.appId);
    _this.tableConfig = _this.store.getState().config;
    _this.page = _this.store.getState().page;
    _this.autoScrolling = false;
    var columnWidths = {};

    _this.tableConfig.columns.forEach(function (column) {
      columnWidths[column.key] = column.width;
    });

    _this.state = {
      dataList: _this.store.getState().dataList,
      columns: _this.tableConfig.columns,
      width: _this.tableConfig.width,
      height: _this.tableConfig.height,
      columnWidths: columnWidths,
      config: _this.tableConfig,
      //the default order should be based on presaved vs default
      columnsOrder: _this.service.getColumnsOrderFromState(_this.store.getState()),
      collapsedRows: new Set(),
      expandedRows: new Set(),
      selectAllLevel: 0,
      scrollToRow: _this.props.scrollToRow,
      scrollTop: _this._getScrollTopValue(_this.props.scrollToRow)
    };
    _this.unSubscribeConfig = _this.store.subscribeTo(_this.store.CONFIG_UPDATE, function () {
      var stateObj = {};
      stateObj["config"] = _this.store.getState().config;

      _this.setState(stateObj);
    });
    _this.unSubscribeData = _this.store.subscribeTo(_this.store.DATA_UPDATED, function () {
      var stateObj = {};
      stateObj["dataList"] = _this.store.getState().dataList;

      _this.setState(stateObj);
    });
    _this.unSubscribeCellData = _this.store.subscribeTo(_this.store.CELL_DATA_UPDATED, function () {
      var stateObj = {};
      stateObj["dataList"] = _this.store.getState().dataList;

      _this.setState(stateObj);
    });
    _this.unSubscribeResizing = _this.store.subscribeTo(_this.store.RESIZING, function () {
      var stateObj = {};
      stateObj["width"] = _this.store.getState().width;

      _this.setState(stateObj);
    });
    _this.unSubscribeColumnHidden = _this.store.subscribeTo(_this.store.SET_COLUMNS_HIDDEN, function () {
      var stateObj = {};
      stateObj["config"] = _this.store.getState().config;

      _this.setState(stateObj);

      _this._customerConfigUpdate(null);
    });
    _this.unSubscriberSelectAllLevel = _this.store.subscribeTo(_this.store.SELECT_ALL_LEVEL, function () {
      _this._onSelectAllLevel();
    });
    _this.unSubscribeScrollTo = _this.store.subscribeTo(_this.store.GOTO_SCROLL_POSITION, function () {
      _this.autoScrolling = true;
      setTimeout(function () {
        _this.autoScrolling = false;
      }, 2000);

      _this._scrollTo();
    });
    return _this;
  }

  _createClass(TableComp, [{
    key: "_getScrollTopValue",
    value: function _getScrollTopValue(rowIndex) {
      var value = rowIndex * this.store.getState().config.rowHeight;
      return value;
    } //we must unsubscribe to avoid memory leak here

  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unSubscribeData();
      this.unSubscribeResizing();
      this.unSubscribeColumnHidden();
      this.unSubscribeThemeUpdate();
      this.unSubscribeCellData();
      this.unSubscriberSelectAllLevel();
      this.unSubscribeConfig();
      this.unSubscribeScrollTo();
    }
  }, {
    key: "bindingFunctions",
    value: function bindingFunctions() {
      this._onColumnResizeEndCallback = this._onColumnResizeEndCallback.bind(this);
      this._onColumnReorderEndCallback = this._onColumnReorderEndCallback.bind(this);
      this._handleCollapseClick = this._handleCollapseClick.bind(this);
      this._subRowHeightGetter = this._subRowHeightGetter.bind(this);
      this._rowExpandedGetter = this._rowExpandedGetter.bind(this);
      this._onScrollEndCallBack = this._onScrollEndCallBack.bind(this);
      this.onOrderChanged = this.onOrderChanged.bind(this);
      this._onRowClick = this._onRowClick.bind(this);
      this._rowClassNameGetter = this._rowClassNameGetter.bind(this);
      this.rowHeightGetter = this.rowHeightGetter.bind(this);
      this._handleCollapseAllClick = this._handleCollapseAllClick.bind(this);
      this._onSelectAllLevel = this._onSelectAllLevel.bind(this);
      this._scrollTo = this._scrollTo.bind(this);
    }
  }, {
    key: "_scrollTo",
    value: function _scrollTo() {
      this.setState({
        scrollTop: this._getScrollTopValue(this.store.getState().scrollPosition[1])
      });
    }
  }, {
    key: "_onSelectAllLevel",
    value: function _onSelectAllLevel() {
      this.setState({
        selectAllLevel: this.store.getState().selectAllLevel
      });
    }
  }, {
    key: "_customerConfigUpdate",
    value: function _customerConfigUpdate(newColumnOrder) {
      //now, we need to dispatch this so that it can be saved in backend db
      var customConfig = this.store.getState().customConfig; //set new columnsOrder

      if (newColumnOrder) customConfig.setColumnsOrder(newColumnOrder); //set hiddenColumns

      customConfig.setHiddenColumns(this.store.getState().config.getHiddenColumnKeys()); //now dispatchEvent

      this.store.setCustomConfig(customConfig);
    }
  }, {
    key: "_onColumnResizeEndCallback",
    value: function _onColumnResizeEndCallback(newColumnWidth, columnKey) {
      var columnWidths = this.state.columnWidths;
      columnWidths[columnKey] = newColumnWidth;
      this.setState({
        columnWidths: columnWidths
      });
      var customConfig = this.store.getState().customConfig;
      customConfig.setColumnWidths(columnWidths); //now dispatchEvent

      this.store.setCustomConfig(customConfig);
    }
  }, {
    key: "onOrderChanged",
    value: function onOrderChanged(newOrder) {
      this.setState({
        columnsOrder: newOrder
      }); //we need to new update customer Config and dispatch event!

      this._customerConfigUpdate(newOrder);
    }
  }, {
    key: "_onColumnReorderEndCallback",
    value: function _onColumnReorderEndCallback(event) {
      var newColsOrder = this.service.getNewColumnOrder(this.state.columnsOrder, event.reorderColumn, event.columnAfter);
      this.onOrderChanged(newColsOrder);
    }
  }, {
    key: "_handleCollapseClick",
    value: function _handleCollapseClick(rowIndex) {
      var collapsedRows = this.state.collapsedRows;
      var shallowCopyOfCollapsedRows = new Set(_toConsumableArray(collapsedRows));
      var scrollToRow = rowIndex;

      if (shallowCopyOfCollapsedRows.has(rowIndex)) {
        shallowCopyOfCollapsedRows["delete"](rowIndex);
      } else {
        shallowCopyOfCollapsedRows.add(rowIndex);
      }

      this.setState({
        collapsedRows: shallowCopyOfCollapsedRows
      });
    }
  }, {
    key: "_subRowHeightGetter",
    value: function _subRowHeightGetter(index) {
      //this is for subRow only - collapsedRow
      if (this.state.config.rowCollapseable) return this.state.collapsedRows.has(index) ? this.state.config.collapseRowHeight : 0;else return 0;
    }
  }, {
    key: "_rowExpandedGetter",
    value: function _rowExpandedGetter(_ref) {
      var rowIndex = _ref.rowIndex,
          width = _ref.width,
          height = _ref.height;

      if (this.state.config.rowCollapseable) {
        //only for collapsed row, not for expanded rows
        if (!this.state.collapsedRows.has(rowIndex)) {
          return null;
        }

        if (this.props.onRowExpandedContent) {
          return this.props.onRowExpandedContent(rowIndex, this.service.getRowKeyValFromIndex(rowIndex, this.store.getState()), width, height);
        } else {
          return null;
        }
      } else {
        return null;
      }
    }
  }, {
    key: "rowHeightGetter",
    value: function rowHeightGetter(rowIndex) {
      if (this.state.config.rowExpandable && this.state.collapsedRows.has(rowIndex)) {
        //here we need to calculate the highest cells
        return this.service.getRowActualHeight(this.state.columnWidths, rowIndex, this.state.dataList, this.state.config.rowHeight, this.state.config);
      } else {
        return this.state.config.rowHeight;
      }
    }
  }, {
    key: "_onScrollEndCallBack",
    value: function _onScrollEndCallBack(scrollX, scrollY) {
      if (this.autoScrolling) return;

      if (!this.state.config.enablePaginator) {
        var totalHeight = this.state.config.rowHeight * (this.state.dataList.length - 1);

        if (scrollY + this.state.config.height >= totalHeight && this.props.onNextPageHandler) {
          //now update page config
          this.page.next(); //if we have all the data in dataList, no need to trigger anymore

          if ("onNextPageHandler" in this.props && this.state.dataList.length < this.page.total) {
            this.props.onNextPageHandler(this.page.currentPage);
          }
        }
      } //here, we are converting scrollY to selectedRowIndex, so as to re-use the scrollToRow controller


      this.store.scrollPositionUpdated(scrollX, scrollY / this.state.config.rowHeight);
    }
  }, {
    key: "_onRowClick",
    value: function _onRowClick(e, rowIndex) {
      //when decoupling checkbox and row, we always enforce single row select
      if (this.state.config.deCoupleRowSelectAndCheckbox) {
        this.store.toggleSingleRowSelected(rowIndex);
      } else {
        //here, we must prevent double trigger, as checkBox click also dispatch events
        var targetCheckbox = e.target.className.includes("mdl-checkbox");
        var targetRadio = e.target.className.includes("mdl-radio");

        if (this.state.config.enableCheckBox && !targetCheckbox || this.state.config.enableRadioButton && !targetRadio) {
          this.store.toggleRowSelected(rowIndex);
        } else if (this.state.config.singleRowToggleable && !targetCheckbox && !targetRadio) {
          this.store.toggleSingleRowSelected(rowIndex);
        }
      }

      setTimeout(function () {
        window.dispatchEvent(new Event("resize"));
      }, 0);
    }
  }, {
    key: "_rowClassNameGetter",
    value: function _rowClassNameGetter(rowIndex) {
      var rowClassNames = [];

      if ('onRowClassNameGetter' in this.props) {
        //here,we need to pass back key column value, not rowIndex, as it is always changing
        rowClassNames.push(this.props.onRowClassNameGetter(this.service.getRowKeyValFromIndex(rowIndex, this.store.getState())));
      }

      if (this.state.config.singleRowToggleable || this.state.config.enableCheckBox || this.state.config.enableRadioButton) {
        if (this.service.isRowSelected(rowIndex, this.store.getState())) {
          rowClassNames.push((this.state.config.theme ? this.state.config.theme : "") + "rowSelected");
        }
      }

      return rowClassNames.join(' ');
    }
  }, {
    key: "_handleCollapseAllClick",
    value: function _handleCollapseAllClick(open) {
      var rowIndexes = new Set();
      if (open) for (var i = 0; i < this.state.dataList.length; i++) {
        rowIndexes.add(i);
      }
      this.setState({
        collapsedRows: rowIndexes
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var checkColumn = null;
      var collapseColumn = null;
      var expandableColumn = null;
      var controllerColumn = null;
      var navigateColumn = null;

      if (this.state.config.navigateable) {
        navigateColumn = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Column"], {
          width: 50,
          fixedRight: true,
          cell: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["NavigateCell"], _extends({}, this.props, {
            dataList: this.state.dataList
          }))
        });
      }

      if (this.state.config.enableCheckBox) {
        checkColumn = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Column"], {
          width: 35,
          fixed: true,
          header: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["ColumnHeaderCheckBoxCell"], {
            appId: this.props.appId
          }),
          cell: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["ColumnCheckBoxCell"], _extends({}, this.props, {
            dataList: this.state.dataList
          }))
        });
      }

      if (this.state.config.enableRadioButton) {
        checkColumn = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Column"], {
          width: 35,
          fixed: true,
          cell: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["ColumnRadioButtonCell"], _extends({}, this.props, {
            dataList: this.state.dataList
          }))
        });
      } //expandable is having high priority than collapseable


      if (this.state.config.rowCollapseable || this.state.config.rowExpandable) {
        collapseColumn = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Column"], {
          cell: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["CollapseCell"], _extends({}, this.props, {
            callback: this._handleCollapseClick,
            collapsedRows: this.state.collapsedRows,
            dataList: this.state.dataList
          })),
          header: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["CollapseHeaderCell"], _extends({}, this.props, {
            callback: this._handleCollapseAllClick
          })),
          fixed: true,
          width: 35
        });
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "tableWrapper",
        style: {
          height: 60 + this.state.height
        }
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "tableHead"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "tableHeaderHead"
      }, this.state.config.totalTitle && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "totalTitle"
      }, this.state.config.totalTitle)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "tableHeaderTail"
      }, this.state.config.downloadable && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_DownloadComp__WEBPACK_IMPORTED_MODULE_13__["default"], this.props), (!this.state.config.global || this.state.config.enforceResetFilterBtn) && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_ClearFilterComp__WEBPACK_IMPORTED_MODULE_11__["default"], this.props), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_PaginatorComp__WEBPACK_IMPORTED_MODULE_7__["default"], this.props), this.state.config.tableSearch && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_TableSearchComp__WEBPACK_IMPORTED_MODULE_12__["default"], this.props), !this.state.config.hideSetting && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_SettingComp__WEBPACK_IMPORTED_MODULE_6__["default"], _extends({}, this.props, {
        onOrderChanged: this.onOrderChanged
      })))), this.state.config.enableAllGlobalSelector && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_SelectAllIndicatorComp__WEBPACK_IMPORTED_MODULE_10__["default"], this.props), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_2___default()({
          tableBody: true,
          listView: this.state.config.listView,
          tableGlobalAll: this.state.selectAllLevel > 0
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Table"], {
        rowHeight: this.state.config.rowHeight,
        headerHeight: this.state.config.headerHeight,
        rowsCount: this.state.dataList.length,
        width: this.state.width,
        height: this.state.height,
        isColumnResizing: false,
        onColumnResizeEndCallback: this._onColumnResizeEndCallback,
        isColumnReordering: false,
        onColumnReorderEndCallback: this._onColumnReorderEndCallback,
        subRowHeightGetter: this._subRowHeightGetter,
        rowExpanded: this._rowExpandedGetter,
        onRowClick: this._onRowClick,
        rowClassNameGetter: this._rowClassNameGetter,
        onScrollEnd: this._onScrollEndCallBack,
        rowHeightGetter: this.rowHeightGetter,
        scrollTop: this.state.scrollTop
      }, collapseColumn, checkColumn, this.state.columnsOrder.map(function (columnKey, i) {
        //if column is hidden
        var columnConfig = _this2.state.config.getColumnConfig(columnKey);

        if (_this2.state.config.columnHidden(columnKey)) {
          return null;
        } else if (columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_9__["TYPE_SINGLE_SELECT_ACTIONS"]) {
          //put here to guarantee the rowIndex into the cell so as to avoid the recycling cells
          return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Column"], {
            isReorderable: columnConfig.reordable,
            columnKey: columnKey,
            key: i + Math.random(),
            header: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_headercell__WEBPACK_IMPORTED_MODULE_5__["HeaderCell"], _extends({}, _this2.props, {
              columnKey: columnKey
            })),
            cell: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["SingleSelectActionCell"], _extends({}, _this2.props, {
              columnKey: columnKey
            })),
            fixedRight: columnConfig.fixedRight,
            width: _this2.state.columnWidths[columnKey],
            isResizable: columnConfig.resizable,
            flexGrow: columnConfig.flexGrow,
            fixed: columnConfig.fixed,
            minWidth: columnConfig.minWidth
          });
        } else return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Column"], {
          isReorderable: columnConfig.reordable,
          columnKey: columnKey,
          key: i + Math.random(),
          header: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_headercell__WEBPACK_IMPORTED_MODULE_5__["HeaderCell"], _extends({}, _this2.props, {
            columnKey: columnKey
          })),
          cell: /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells_cells__WEBPACK_IMPORTED_MODULE_4__["CellWrapper"], _extends({}, _this2.props, {
            columnKey: columnKey,
            dataList: _this2.state.dataList,
            collapsedRows: _this2.state.collapsedRows
          })),
          fixedRight: _this2.state.config.getColumnConfig(columnKey).fixedRight,
          width: _this2.state.columnWidths[columnKey],
          isResizable: _this2.state.config.getColumnConfig(columnKey).resizable,
          flexGrow: _this2.state.config.getColumnConfig(columnKey).flexGrow,
          fixed: _this2.state.config.getColumnConfig(columnKey).fixed
        });
      }), controllerColumn, navigateColumn)));
    }
  }]);

  return TableComp;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]);

/* harmony default export */ __webpack_exports__["default"] = (TableComp);

/***/ }),

/***/ "./src/components/data_table/comps/TableSearchComp.js":
/*!************************************************************!*\
  !*** ./src/components/data_table/comps/TableSearchComp.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/utils */ "./src/components/common/utils.js");
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_3__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }






var TableSearchComp = /*#__PURE__*/function (_Component) {
  _inherits(TableSearchComp, _Component);

  var _super = _createSuper(TableSearchComp);

  function TableSearchComp() {
    var _this;

    _classCallCheck(this, TableSearchComp);

    _this = _super.call(this);
    _this.update = _this.update.bind(_assertThisInitialized(_this));
    _this.onFocus = _this.onFocus.bind(_assertThisInitialized(_this));
    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_this));
    _this.state = {
      focused: false
    };
    return _this;
  }

  _createClass(TableSearchComp, [{
    key: "update",
    value: function update(e) {
      var _this2 = this;

      this.text = e.target.value;

      _common_utils__WEBPACK_IMPORTED_MODULE_1__["default"]._debounce(function () {
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this2.props.appId).setGlobalSearchTerm(_this2.text);
      }, 400);
    }
  }, {
    key: "onFocus",
    value: function onFocus() {
      this.setState({
        focused: true
      });
    }
  }, {
    key: "onBlur",
    value: function onBlur() {
      this.setState({
        focused: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_3___default()({
          tableSearchWrapper: true,
          focused: this.state.focused
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
        type: "text",
        placeholder: "Search",
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onKeyUp: this.update,
        onPaste: this.update
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "material-icons"
      }, "search"));
    }
  }]);

  return TableSearchComp;
}(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);

/* harmony default export */ __webpack_exports__["default"] = (TableSearchComp);

/***/ }),

/***/ "./src/components/data_table/comps/cells/cells.js":
/*!********************************************************!*\
  !*** ./src/components/data_table/comps/cells/cells.js ***!
  \********************************************************/
/*! exports provided: CellWrapper, MoreOptionCell, IconCallBackCell, SingleSelectActionCell, HtmlListExpandedCell, HtmlListCell, ListCell, ToolTipTextCell, ToolTipComp, TextCell, NumberCell, ToolTipHtmlCell, HtmlCell, PureClickableCell, ClickableCell, CollapseHeaderCell, CollapseCell, ColumnCheckBoxCell, ColumnRadioButtonCell, ColumnHeaderCheckBoxCell, NavigateCell */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CellWrapper", function() { return CellWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MoreOptionCell", function() { return MoreOptionCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IconCallBackCell", function() { return IconCallBackCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SingleSelectActionCell", function() { return SingleSelectActionCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HtmlListExpandedCell", function() { return HtmlListExpandedCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HtmlListCell", function() { return HtmlListCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListCell", function() { return ListCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToolTipTextCell", function() { return ToolTipTextCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToolTipComp", function() { return ToolTipComp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextCell", function() { return TextCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberCell", function() { return NumberCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToolTipHtmlCell", function() { return ToolTipHtmlCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HtmlCell", function() { return HtmlCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PureClickableCell", function() { return PureClickableCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClickableCell", function() { return ClickableCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CollapseHeaderCell", function() { return CollapseHeaderCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CollapseCell", function() { return CollapseCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnCheckBoxCell", function() { return ColumnCheckBoxCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnRadioButtonCell", function() { return ColumnRadioButtonCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnHeaderCheckBoxCell", function() { return ColumnHeaderCheckBoxCell; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NavigateCell", function() { return NavigateCell; });
/* harmony import */ var fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fixed-data-table-2 */ "./node_modules/fixed-data-table-2/main.js");
/* harmony import */ var fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var muicss_lib_react_checkbox__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! muicss/lib/react/checkbox */ "./node_modules/muicss/lib/react/checkbox.js");
/* harmony import */ var muicss_lib_react_checkbox__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(muicss_lib_react_checkbox__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _services_table_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/table_service */ "./src/components/data_table/services/table_service.js");
/* harmony import */ var _entities_more_option__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../entities/more_option */ "./src/components/data_table/entities/more_option.js");
/* harmony import */ var _entities_column__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../entities/column */ "./src/components/data_table/entities/column.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _BoundedTetherComp__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../BoundedTetherComp */ "./src/components/data_table/comps/BoundedTetherComp.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



 // import { Checkbox, Radio } from "react-mdl";








__webpack_require__(/*! ../../datatable.scss */ "./src/components/data_table/datatable.scss");

var CellWrapper = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(CellWrapper, _React$PureComponent);

  var _super = _createSuper(CellWrapper);

  function CellWrapper() {
    _classCallCheck(this, CellWrapper);

    return _super.apply(this, arguments);
  }

  _createClass(CellWrapper, [{
    key: "render",
    value: function render() {
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);
      var comp = null;
      var _this$props = this.props,
          rowIndex = _this$props.rowIndex,
          columnKey = _this$props.columnKey,
          collapsedRows = _this$props.collapsedRows;
      var service = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]();

      switch (columnConfig.type) {
        case _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_MORE_OPTIONS"]:
          comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(MoreOptionCell, _extends({}, this.props, {
            dataList: this.props.dataList
          }));
          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_NUMBER"]:
          comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(NumberCell, _extends({}, this.props, {
            dataList: this.props.dataList
          }));
          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_TEXT"]:
        case _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_PURE_TEXT"]:
        case _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_DATE"]:
        case _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_DATETIME"]:
          //first, check content length vs. column width, then give different Cell
          if (!columnConfig.disableTooltip && this.props.dataList[rowIndex][columnKey] && service.getWidthOfText(this.props.dataList[rowIndex][columnKey]) > columnConfig.width && !collapsedRows.has(rowIndex) //we use different cell comp based on expanded status
          ) {
              comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ToolTipTextCell, _extends({}, this.props, {
                dataList: this.props.dataList,
                collapsedRows: collapsedRows
              }));
            } else {
            comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(TextCell, _extends({}, this.props, {
              dataList: this.props.dataList
            }));
          }

          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_HTML"]:
          //first, check content length vs. column width, then give different Cell
          if (!columnConfig.disableTooltip && this.props.dataList[rowIndex][columnKey] && service.getWidthOfHTML(this.props.dataList[rowIndex][columnKey]) > columnConfig.width && !collapsedRows.has(rowIndex) //we use different cell comp based on expanded status
          ) {
              comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ToolTipHtmlCell, _extends({}, this.props, {
                dataList: this.props.dataList,
                collapsedRows: collapsedRows
              }));
            } else {
            comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HtmlCell, _extends({}, this.props, {
              dataList: this.props.dataList
            }));
          }

          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_LIST"]:
          //only using listView if not expanded
          if (!collapsedRows.has(rowIndex)) {
            comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ListCell, _extends({}, this.props, {
              dataList: this.props.dataList,
              columnWidth: columnConfig.width
            }));
          } else {
            comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(TextCell, _extends({}, this.props, {
              dataList: this.props.dataList
            }));
          }

          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_ICON_CALL_BACK"]:
          comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(IconCallBackCell, _extends({}, this.props, {
            dataList: this.props.dataList
          }));
          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_CLICKABLE"]:
          comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ClickableCell, _extends({}, this.props, {
            dataList: this.props.dataList
          }));
          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_PURE_CLICKABLE"]:
          comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(PureClickableCell, _extends({}, this.props, {
            dataList: this.props.dataList
          }));
          break;

        case _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_HTML_LIST"]:
          //only using listView if not expanded
          if (collapsedRows.has(rowIndex)) {
            comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HtmlListCell, _extends({}, this.props, {
              dataList: this.props.dataList,
              columnWidth: columnConfig.width
            }));
          } else {
            if (this.props.onListItemClick) {
              comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HtmlListExpandedCell, _extends({}, this.props, {
                dataList: this.props.dataList,
                columnWidth: columnConfig.width
              }));
            } else {
              comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HtmlCell, _extends({}, this.props, {
                dataList: this.props.dataList
              }));
            }
          }

          break;
      }

      return comp;
    }
  }]);

  return CellWrapper;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var MoreOptionCell = /*#__PURE__*/function (_React$PureComponent2) {
  _inherits(MoreOptionCell, _React$PureComponent2);

  var _super2 = _createSuper(MoreOptionCell);

  function MoreOptionCell() {
    var _this;

    _classCallCheck(this, MoreOptionCell);

    _this = _super2.call(this);
    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));
    _this.close = _this.close.bind(_assertThisInitialized(_this));
    _this.toggleOpen = _this.toggleOpen.bind(_assertThisInitialized(_this));
    _this.row = null;
    _this.state = {
      open: false,
      optionItems: [],
      theme: "light"
    };
    _this.optionItems = null;
    return _this;
  }

  _createClass(MoreOptionCell, [{
    key: "toggleOpen",
    value: function toggleOpen(e) {
      // if there are other popups open, close them
      if (document.querySelector(".dvClPopUpWrapper")) {
        this.store.closeAllPopUp();
      }

      if (e) e.stopPropagation();
      this.state.theme = this.store.getState().config.theme;
      this.setState({
        open: !this.state.open
      });
    }
  }, {
    key: "onClick",
    value: function onClick(e) {
      if (this.props.onMoreOptionItemClicked) {
        this.props.onMoreOptionItemClicked(this.row, this.optionItems.findByValue(e.target.getAttribute("data-value")));
      }

      this.close();
    }
  }, {
    key: "close",
    value: function close() {
      this.setState({
        open: false
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this._updateState();

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unsubscriberCloseAllPopUp = this.store.subscribeTo(this.store.CLOSE_ALL_POPUP, function () {
        _this2.close();
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriberCloseAllPopUp();
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) this._updateState();
    }
  }, {
    key: "_updateState",
    value: function _updateState() {
      var _this3 = this;

      setTimeout(function () {
        var dataList = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this3.props.appId).getState().dataList;
        if (dataList.length === 0) return; //here, cellValue should be options

        _this3.row = dataList[_this3.props.rowIndex];
        var cellValue = _this3.row[_this3.props.columnKey];
        _this3.optionItems = new _entities_more_option__WEBPACK_IMPORTED_MODULE_5__["default"](cellValue);

        _this3.setState({
          optionItems: _this3.optionItems.moreOptionItems
        });
      }, 0);
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var items = [];
      this.state.optionItems.forEach(function (option) {
        items.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("li", {
          key: option.value,
          onClick: _this4.onClick,
          "data-value": option.value,
          className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
            optionItem: true
          })
        }, option.title));
      });
      var iconPart = null,
          content = null;

      if (items.length > 0) {
        iconPart = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
          className: "material-icons",
          onClick: this.toggleOpen
        }, "more_horiz");
        content = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          className: "moreOptionDock moreOptionDockHTML"
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_8__["BoundedTetherComp"], {
          attachment: "top right",
          appId: this.props.appId
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
          className: "moreOptionAttachPoint"
        }), this.state.open && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          className: "moreOptionsWrapperInner"
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
            dvClPopUpWrapper: true,
            noir: this.state.theme === "noir",
            light: this.state.theme === "light"
          })
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", null, items)))));
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "moreOptionsWrapper"
      }, iconPart, content));
    }
  }]);

  return MoreOptionCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var IconCallBackCell = /*#__PURE__*/function (_React$PureComponent3) {
  _inherits(IconCallBackCell, _React$PureComponent3);

  var _super3 = _createSuper(IconCallBackCell);

  function IconCallBackCell() {
    var _this5;

    _classCallCheck(this, IconCallBackCell);

    _this5 = _super3.call(this);
    _this5.onClick = _this5.onClick.bind(_assertThisInitialized(_this5));
    _this5.close = _this5.close.bind(_assertThisInitialized(_this5));
    _this5._onIconDataUpdate = _this5._onIconDataUpdate.bind(_assertThisInitialized(_this5));
    _this5.state = {
      showDetail: false,
      popUpContent: "",
      theme: "light"
    };
    return _this5;
  }

  _createClass(IconCallBackCell, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      var _this6 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.state.theme = this.store.getState().config.theme;
      this.unsubscriberCloseAllPopUp = this.store.subscribeTo(this.store.CLOSE_ALL_POPUP, function () {
        _this6.setState({
          showDetail: false
        });
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriberCloseAllPopUp();
      if (this.subscriber) this.subscriber();
    }
  }, {
    key: "onClick",
    value: function onClick(e) {
      var _this7 = this;

      e.stopPropagation();

      if (this.state.showDetail) {
        this.close();
      } else {
        this.subscriber = this.store.subscribeTo(this.store.ICON_CELL_CLICKED_ACTION, function (htmlContent) {
          _this7._onIconDataUpdate(htmlContent);
        });

        if (this.props.onIconClicked) {
          this.state.theme = this.store.getState().config.theme;
          this.props.onIconClicked(this.props.dataList[this.props.rowIndex], this.props.columnKey);
        }
      }
    }
  }, {
    key: "close",
    value: function close() {
      this.setState({
        showDetail: false,
        popUpContent: ""
      });
    }
  }, {
    key: "_onIconDataUpdate",
    value: function _onIconDataUpdate(htmlContent) {
      this.setState({
        showDetail: true,
        popUpContent: htmlContent
      }); // //now remove it

      this.subscriber();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          rowIndex = _this$props2.rowIndex,
          columnKey = _this$props2.columnKey;
      var cellValue = this.props.dataList[rowIndex][columnKey];
      var comp = null;
      var colPositionObj = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]().getColumnPosition(Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState(), columnKey);
      var position = 'center';

      if (colPositionObj.bFirst) {
        position = 'left';
      } else if (colPositionObj.bLast) {
        position = 'right';
      }

      if (cellValue) comp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "iconCallBackCellWrapper",
        onClick: this.onClick
      }, cellValue.includes('/') && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("img", {
        src: cellValue
      }), !cellValue.includes('/') && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons"
      }, cellValue), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_8__["BoundedTetherComp"], {
        attachment: "middle " + position,
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "iconActionAttachPoint"
      }), this.state.showDetail && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          dvClPopUpWrapper: true,
          noir: this.state.theme === "noir",
          light: this.state.theme === "light"
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons closeIcon",
        onClick: this.close
      }, "clear"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: this.state.popUpContent
        }
      }))));
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, comp);
    }
  }]);

  return IconCallBackCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var SingleSelectActionCell = /*#__PURE__*/function (_React$PureComponent4) {
  _inherits(SingleSelectActionCell, _React$PureComponent4);

  var _super4 = _createSuper(SingleSelectActionCell);

  function SingleSelectActionCell() {
    var _this8;

    _classCallCheck(this, SingleSelectActionCell);

    _this8 = _super4.call(this);
    _this8.state = {
      open: false,
      title: "",
      selectedValue: "",
      disabled: false
    };
    _this8.toggleOpen = _this8.toggleOpen.bind(_assertThisInitialized(_this8));
    _this8.selected = _this8.selected.bind(_assertThisInitialized(_this8));
    return _this8;
  }

  _createClass(SingleSelectActionCell, [{
    key: "toggleOpen",
    value: function toggleOpen(e) {
      // if there are other popups open, close them
      if (document.querySelector(".dvClPopUpWrapper")) {
        this.store.closeAllPopUp();
      }

      if (e) e.stopPropagation();

      if (!this.state.disabled) {
        this.setState({
          open: !this.state.open
        });
      }
    }
  }, {
    key: "selected",
    value: function selected(e) {
      this.setState({
        title: this.columnConfig.getActionOptions(e).title,
        selectedValue: e
      });
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).updateSingleSelectAction(this.props.rowIndex, this.props.columnKey, e);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this9 = this;

      this._updateState();

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unsubscriberCloseAllPopUp = this.store.subscribeTo(this.store.CLOSE_ALL_POPUP, function () {
        _this9.setState({
          open: false
        });
      });
      this.unSubscribeCellData = this.store.subscribeTo(this.store.CELL_DATA_UPDATED, function () {
        //this is to set up externally the value for selected items
        var pasedInCellData = _this9.store.getState().passedInCellData;

        var rowKeyVal = pasedInCellData[0];
        var columnKey = pasedInCellData[1];
        var value = pasedInCellData[2];

        var primaryKey = _this9.store.getState().config.getPrimaryColumnKey(); //not current column, do nothing


        if (_this9.props.columnKey !== columnKey) return;

        if (Array.isArray(rowKeyVal) && rowKeyVal.includes(_this9.store.getState().dataList[_this9.props.rowIndex][primaryKey]) || _this9.store.getState().dataList[_this9.props.rowIndex][primaryKey] === rowKeyVal) {
          var option = _this9.columnConfig.getActionOptions(value);

          _this9.setState({
            title: option ? option.title : "",
            selectedValue: option ? option.value : ""
          });
        }
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unSubscribeCellData();
      this.unsubscriberCloseAllPopUp();
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) this._updateState();
    }
  }, {
    key: "_updateState",
    value: function _updateState() {
      var _this10 = this;

      setTimeout(function () {
        _this10.columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this10.props.appId).getState().config.getColumnConfig(_this10.props.columnKey);
        var dataList = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this10.props.appId).getState().dataList;
        if (dataList.length === 0) return;
        var cellValue = dataList[_this10.props.rowIndex][_this10.props.columnKey];

        var option = _this10.columnConfig.getActionOptions(cellValue);

        var disabled = 'controllers' in _this10.columnConfig && 'disabled' in _this10.columnConfig.controllers && _this10.columnConfig.controllers.disabled(cellValue, dataList[_this10.props.rowIndex]);

        _this10.setState({
          title: option ? option.title : "",
          selectedValue: option ? option.value : "",
          disabled: disabled
        });
      }, 0);
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          "dropDownActionWrapper": true,
          "dropDownActionWrapperDisabled": this.state.disabled
        }),
        onClick: this.toggleOpen
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "title"
      }, this.state.title), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          "material-icons": true,
          open: this.state.open,
          hidden: this.state.disabled
        })
      }, "arrow_drop_down"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("hr", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          "dropdownSelectUnderline": true,
          hidden: this.state.disabled
        })
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_8__["BoundedTetherComp"], {
        attachment: "top left",
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "actionDropDownAttachPoint"
      }), this.state.open && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(SingleSelectOptions, _extends({
        close: this.toggleOpen,
        selected: this.selected,
        selectedValue: this.state.selectedValue
      }, this.props, {
        dataList: this.props.dataList
      })))));
    }
  }]);

  return SingleSelectActionCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var SingleSelectOptions = /*#__PURE__*/function (_React$PureComponent5) {
  _inherits(SingleSelectOptions, _React$PureComponent5);

  var _super5 = _createSuper(SingleSelectOptions);

  function SingleSelectOptions() {
    var _this11;

    _classCallCheck(this, SingleSelectOptions);

    _this11 = _super5.call(this);
    _this11.close = _this11.close.bind(_assertThisInitialized(_this11));
    _this11.click = _this11.click.bind(_assertThisInitialized(_this11));
    _this11.state = {
      theme: "light"
    };
    return _this11;
  }

  _createClass(SingleSelectOptions, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.state.theme = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.theme;
    }
  }, {
    key: "close",
    value: function close() {
      this.props.close();
    }
  }, {
    key: "click",
    value: function click(e) {
      this.props.selected(e.target.getAttribute("data-value"));
      this.close();
    }
  }, {
    key: "render",
    value: function render() {
      var _this12 = this;

      var items = [];
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);
      var selectedValue = this.props.selectedValue;
      columnConfig.actionOptions.forEach(function (option) {
        items.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("li", {
          key: option.value,
          onClick: _this12.click,
          "data-value": option.value,
          className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
            selectable: true,
            selected: option.value === selectedValue
          })
        }, option.title));
      });
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          dvClPopUpWrapper: true,
          noir: this.state.theme == "noir",
          light: this.state.theme == "light"
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", null, items));
    }
  }]);

  return SingleSelectOptions;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var HtmlListExpandedCell = /*#__PURE__*/function (_React$PureComponent6) {
  _inherits(HtmlListExpandedCell, _React$PureComponent6);

  var _super6 = _createSuper(HtmlListExpandedCell);

  function HtmlListExpandedCell(props) {
    var _this13;

    _classCallCheck(this, HtmlListExpandedCell);

    _this13 = _super6.call(this, props);
    _this13.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this13.props.appId);
    _this13.update = _this13.update.bind(_assertThisInitialized(_this13));
    _this13.state = {};
    return _this13;
  }

  _createClass(HtmlListExpandedCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.update(this.props.rowIndex);
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) this.update(nextProps.rowIndex);
    }
  }, {
    key: "update",
    value: function update(rowIndex) {
      var columnKey = this.props.columnKey;
      var service = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]();
      var checkingResults = service.analyzeHTMLListContent(this.props.dataList[rowIndex][columnKey]);
      var outerDiv = checkingResults.outerDiv;
      var innerDivs = checkingResults.innerDivs;
      var htmlComps = [];

      for (var i = 0; i < innerDivs.length; i++) {
        htmlComps.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HtmlListSingleClickableItem, _extends({
          key: i,
          contents: innerDivs[i]
        }, this.props)));
      }

      this.setState({
        htmlComps: htmlComps
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "htmlListCellWrapper"
      }, this.state.htmlComps));
    }
  }]);

  return HtmlListExpandedCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var HtmlListCell = /*#__PURE__*/function (_React$PureComponent7) {
  _inherits(HtmlListCell, _React$PureComponent7);

  var _super7 = _createSuper(HtmlListCell);

  function HtmlListCell(props) {
    var _this14;

    _classCallCheck(this, HtmlListCell);

    _this14 = _super7.call(this, props);
    _this14.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this14.props.appId);
    _this14.toggleMore = _this14.toggleMore.bind(_assertThisInitialized(_this14));
    _this14.state = {
      showMore: false,
      htmlCnt: '',
      remainingCount: 0,
      position: 'center'
    };
    _this14.update = _this14.update.bind(_assertThisInitialized(_this14));
    return _this14;
  }

  _createClass(HtmlListCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this15 = this;

      this.unsubscriberCloseAllPopUp = this.store.subscribeTo(this.store.CLOSE_ALL_POPUP, function () {
        _this15.setState({
          showMore: false
        });
      }); //now, let's set up listener to customConfigUpdate

      this.unsubscriber = this.store.subscribeTo(this.store.CUSTOM_CONFIG_UPDATE, function (state) {
        _this15.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this15.props.appId);
        var innerDivCounts = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]().calCountForInerDivs(_this15.state.innerDivs, _this15.store.getState().config.getColumnConfig(_this15.props.columnKey).width - 100);
        var htmlCnt = _this15.state.outerDiv;

        for (var i = 0; i < innerDivCounts; i++) {
          if (_this15.state.innerDivs[i]) {
            htmlCnt += '<span style="float:left;margin-right:5px">' + _this15.state.innerDivs[i] + '</span>';
          }
        }

        htmlCnt += '</div>';
        var remainingCount = _this15.state.innerDivs.length - innerDivCounts;

        _this15.setState({
          htmlCnt: htmlCnt,
          remainingCount: remainingCount
        });
      });
      this.update(this.props.rowIndex);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriber();
      this.unsubscriberCloseAllPopUp();
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) this.update(nextProps.rowIndex);
    }
  }, {
    key: "toggleMore",
    value: function toggleMore(e) {
      if (document.querySelector(".dvClPopUpWrapper")) {
        this.store.closeAllPopUp();
      }

      if (e) e.stopPropagation();
      this.setState({
        showMore: !this.state.showMore
      });
    }
  }, {
    key: "update",
    value: function update(rowIndex) {
      var columnKey = this.props.columnKey;
      var service = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]();
      var checkingResults = service.analyzeHTMLListContent(this.props.dataList[rowIndex][columnKey]);
      var outerDiv = checkingResults.outerDiv;
      var innerDivs = checkingResults.innerDivs;
      var colPositionObj = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]().getColumnPosition(Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState(), columnKey);
      var position = 'center';

      if (colPositionObj.bFirst) {
        position = 'left';
      } else if (colPositionObj.bLast) {
        position = 'right';
      } //here, we need to leve same extra space for +/-2


      var innerDivCounts = service.calCountForInerDivs(innerDivs, this.props.columnWidth - 50);
      var htmlCnt = outerDiv;

      for (var i = 0; i < innerDivCounts; i++) {
        if (innerDivs[i]) {
          htmlCnt += '<span style="float:left;margin-right:5px">' + innerDivs[i] + '</span>';
        }
      }

      htmlCnt += '</div>';
      var remainingCount = innerDivs.length - innerDivCounts;
      var htmlComps = [];

      for (var _i = 0; _i < innerDivCounts; _i++) {
        htmlComps.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HtmlListSingleClickableItem, _extends({
          key: _i,
          contents: innerDivs[_i]
        }, this.props)));
      }

      this.setState({
        htmlCnt: htmlCnt,
        htmlComps: htmlComps,
        remainingCount: remainingCount,
        outerDiv: outerDiv,
        innerDivs: innerDivs,
        position: position
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "htmlListCellWrapper"
      }, this.props.onListItemClick ? this.state.htmlComps : null, !this.props.onListItemClick ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: this.state.htmlCnt
        }
      }) : null, this.state.remainingCount > 0 ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        onClick: this.toggleMore,
        className: "moreHook tooltipWrapper htmlListToggler"
      }, this.state.showMore ? "-" : "+", this.state.remainingCount) : null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "toolTipDock toolTipDockHTML"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_8__["BoundedTetherComp"], {
        attachment: "middle " + this.state.position,
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "tooltipAttachPoint"
      }), this.state.showMore && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HtmlListCellItems, _extends({}, this.props, {
        close: this.toggleMore,
        htmlDivs: this.state.innerDivs
      }))))));
    }
  }]);

  return HtmlListCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var HtmlListSingleClickableItem = /*#__PURE__*/function (_React$PureComponent8) {
  _inherits(HtmlListSingleClickableItem, _React$PureComponent8);

  var _super8 = _createSuper(HtmlListSingleClickableItem);

  function HtmlListSingleClickableItem() {
    var _this16;

    _classCallCheck(this, HtmlListSingleClickableItem);

    _this16 = _super8.call(this);
    _this16.onClick = _this16.onClick.bind(_assertThisInitialized(_this16));
    return _this16;
  }

  _createClass(HtmlListSingleClickableItem, [{
    key: "onClick",
    value: function onClick(e) {
      e.preventDefault();
      e.stopPropagation();
      this.props.onListItemClick(this.props.contents);
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "clickable",
        onClick: this.onClick,
        dangerouslySetInnerHTML: {
          __html: this.props.contents
        }
      });
    }
  }]);

  return HtmlListSingleClickableItem;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var HtmlListCellItems = /*#__PURE__*/function (_React$PureComponent9) {
  _inherits(HtmlListCellItems, _React$PureComponent9);

  var _super9 = _createSuper(HtmlListCellItems);

  function HtmlListCellItems() {
    var _this17;

    _classCallCheck(this, HtmlListCellItems);

    _this17 = _super9.call(this);
    _this17.close = _this17.close.bind(_assertThisInitialized(_this17));
    _this17.state = {
      theme: "light"
    };
    return _this17;
  }

  _createClass(HtmlListCellItems, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.state.theme = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.theme;
    }
  }, {
    key: "close",
    value: function close() {
      this.props.close();
    }
  }, {
    key: "render",
    value: function render() {
      var items = [];
      this.props.htmlDivs.map(function (item, index) {
        items.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("li", {
          key: index,
          className: "listItem"
        }, " ", /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
          dangerouslySetInnerHTML: {
            __html: item
          }
        }), " "));
      });
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          dvClPopUpWrapper: true,
          htmlList: true,
          noir: this.state.theme == "noir",
          light: this.state.theme == "light"
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons closeIcon",
        onClick: this.close
      }, "clear"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", null, items));
    }
  }]);

  return HtmlListCellItems;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var ListCell = /*#__PURE__*/function (_React$PureComponent10) {
  _inherits(ListCell, _React$PureComponent10);

  var _super10 = _createSuper(ListCell);

  function ListCell(props) {
    var _this18;

    _classCallCheck(this, ListCell);

    _this18 = _super10.call(this, props);
    _this18.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this18.props.appId);
    _this18.toggleMore = _this18.toggleMore.bind(_assertThisInitialized(_this18));
    _this18.state = {
      showMore: false,
      textCnt: '',
      remainingCount: 0,
      position: 'center'
    };
    _this18.update = _this18.update.bind(_assertThisInitialized(_this18));
    return _this18;
  }

  _createClass(ListCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this19 = this;

      this.unsubscriberCloseAllPopUp = this.store.subscribeTo(this.store.CLOSE_ALL_POPUP, function () {
        _this19.setState({
          showMore: false
        });
      }); //now, let's set up listener to customConfigUpdate

      this.unsubscriber = this.store.subscribeTo(this.store.CUSTOM_CONFIG_UPDATE, function (state) {
        _this19.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this19.props.appId);
        var service = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]();
        var innerDivCounts = service.calCountForInerDivs(_this19.state.innerDivs, _this19.store.getState().config.getColumnConfig(_this19.props.columnKey).width - 70);
        var textCnts = [];

        for (var i = 0; i < innerDivCounts; i++) {
          textCnts.push(_this19.state.innerDivs[i]);
        }

        var remainingCount = _this19.state.innerDivs.length - innerDivCounts;

        _this19.setState({
          textCnt: textCnts.join(","),
          remainingCount: remainingCount
        });
      });
      this.update(this.props.rowIndex);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriber();
      this.unsubscriberCloseAllPopUp();
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) this.update(nextProps.rowIndex);
    }
  }, {
    key: "toggleMore",
    value: function toggleMore(e) {
      // if there are other popups open, close them
      if (document.querySelector(".dvClPopUpWrapper")) {
        this.store.closeAllPopUp();
      }

      if (e) e.stopPropagation();
      this.setState({
        showMore: !this.state.showMore
      });
    }
  }, {
    key: "update",
    value: function update(rowIndex) {
      var columnKey = this.props.columnKey;
      var service = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]();
      var innerDivs = service.analyzeTextListContent(this.props.dataList[rowIndex][columnKey]);
      var colPositionObj = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]().getColumnPosition(Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState(), columnKey);
      var position = 'center';

      if (colPositionObj.bFirst) {
        position = 'left';
      } else if (colPositionObj.bLast) {
        position = 'right';
      } //here, we need to leve same extra space for +/-2


      var innerDivCounts = service.calCountForInerDivs(innerDivs, this.props.columnWidth - 70);
      var textCnts = [];

      for (var i = 0; i < innerDivCounts; i++) {
        textCnts.push(innerDivs[i]);
      }

      var remainingCount = innerDivs.length - innerDivCounts;
      this.setState({
        textCnt: textCnts.join(","),
        remainingCount: remainingCount,
        position: position,
        innerDivs: innerDivs
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          rowIndex = _this$props3.rowIndex,
          columnKey = _this$props3.columnKey;
      var items = [];
      var deliminator = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.listDeliminator;
      if (this.props.dataList[rowIndex][columnKey]) items = this.props.dataList[rowIndex][columnKey].split(deliminator);
      var colPositionObj = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]().getColumnPosition(Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState(), columnKey);
      var position = 'center';

      if (colPositionObj.bFirst) {
        position = 'left';
      } else if (colPositionObj.bLast) {
        position = 'right';
      }

      var partialListText = this.state.remainingCount > 1 ? this.state.textCnt + "," : this.state.textCnt;
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "hookCell"
      }, partialListText, this.state.remainingCount >= 1 ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        onClick: this.toggleMore,
        className: "moreHook tooltipWrapper"
      }, this.state.showMore ? "-" : "+", this.state.remainingCount) : null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "toolTipDock"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_8__["BoundedTetherComp"], {
        attachment: "middle left",
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "tooltipAttachPoint"
      }), this.state.showMore && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ListCellItems, _extends({}, this.props, {
        close: this.toggleMore,
        items: this.props.dataList[rowIndex][columnKey]
      }))))));
    }
  }]);

  return ListCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var ListCellItems = /*#__PURE__*/function (_React$PureComponent11) {
  _inherits(ListCellItems, _React$PureComponent11);

  var _super11 = _createSuper(ListCellItems);

  function ListCellItems() {
    var _this20;

    _classCallCheck(this, ListCellItems);

    _this20 = _super11.call(this);
    _this20.close = _this20.close.bind(_assertThisInitialized(_this20));
    _this20.state = {
      theme: "light"
    };
    return _this20;
  }

  _createClass(ListCellItems, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.state.theme = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.theme;
    }
  }, {
    key: "close",
    value: function close() {
      this.props.close();
    }
  }, {
    key: "render",
    value: function render() {
      var items = [];
      this.props.items.split(",").map(function (item, index) {
        items.push( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("li", {
          key: index
        }, item));
      });
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          dvClPopUpWrapper: true,
          noir: this.state.theme === "noir",
          light: this.state.theme === "light"
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons closeIcon",
        onClick: this.close
      }, "clear"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", null, items));
    }
  }]);

  return ListCellItems;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var ToolTipTextCell = /*#__PURE__*/function (_React$PureComponent12) {
  _inherits(ToolTipTextCell, _React$PureComponent12);

  var _super12 = _createSuper(ToolTipTextCell);

  function ToolTipTextCell() {
    var _this21;

    _classCallCheck(this, ToolTipTextCell);

    _this21 = _super12.call(this);
    _this21.showToolTip = _this21.showToolTip.bind(_assertThisInitialized(_this21));
    _this21.hideToolTip = _this21.hideToolTip.bind(_assertThisInitialized(_this21));
    _this21.state = {
      openTooltip: false
    };
    return _this21;
  }

  _createClass(ToolTipTextCell, [{
    key: "showToolTip",
    value: function showToolTip() {
      this.setState({
        openTooltip: true
      });
    }
  }, {
    key: "hideToolTip",
    value: function hideToolTip() {
      this.setState({
        openTooltip: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          rowIndex = _this$props4.rowIndex,
          columnKey = _this$props4.columnKey;
      var colPositionObj = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]().getColumnPosition(Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState(), columnKey);
      var position = 'center';

      if (colPositionObj.bFirst) {
        position = 'left';
      } else if (colPositionObj.bLast) {
        position = 'right';
      }

      var textClass = classnames__WEBPACK_IMPORTED_MODULE_7___default()({
        autoEllipse: true,
        tooltipWrapper: true
      });
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "textCell textTooltipCell"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: textClass,
        onMouseEnter: this.showToolTip,
        onMouseLeave: this.hideToolTip
      }, this.props.dataList[rowIndex][columnKey], /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "toolTipDock"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_8__["BoundedTetherComp"], {
        className: "dvTetheredToolTip",
        attachment: "middle " + position,
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "tooltipAttachPoint"
      }), this.state.openTooltip && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ToolTipComp, _extends({}, this.props, {
        content: this.props.dataList[rowIndex][columnKey]
      })))))));
    }
  }]);

  return ToolTipTextCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var ToolTipComp = /*#__PURE__*/function (_React$PureComponent13) {
  _inherits(ToolTipComp, _React$PureComponent13);

  var _super13 = _createSuper(ToolTipComp);

  function ToolTipComp() {
    _classCallCheck(this, ToolTipComp);

    return _super13.apply(this, arguments);
  }

  _createClass(ToolTipComp, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          dvClPopUpWrapper: true,
          htmlList: true,
          dvTooltipText: true,
          noir: Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.theme == "noir",
          light: Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.theme == "light"
        }),
        dangerouslySetInnerHTML: {
          __html: this.props.content
        }
      });
    }
  }]);

  return ToolTipComp;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var TextCell = /*#__PURE__*/function (_React$PureComponent14) {
  _inherits(TextCell, _React$PureComponent14);

  var _super14 = _createSuper(TextCell);

  function TextCell() {
    var _this22;

    _classCallCheck(this, TextCell);

    _this22 = _super14.call(this);
    _this22.state = {
      editing: false
    };
    return _this22;
  }

  _createClass(TextCell, [{
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
          rowIndex = _this$props5.rowIndex,
          columnKey = _this$props5.columnKey;
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, !columnConfig.editable && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "textCell"
      }, this.props.dataList[rowIndex][columnKey]), columnConfig.editable && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "editableCellWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "textCell"
      }, this.props.dataList[rowIndex][columnKey])));
    }
  }]);

  return TextCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var NumberCell = /*#__PURE__*/function (_React$PureComponent15) {
  _inherits(NumberCell, _React$PureComponent15);

  var _super15 = _createSuper(NumberCell);

  function NumberCell() {
    _classCallCheck(this, NumberCell);

    return _super15.call(this);
  }

  _createClass(NumberCell, [{
    key: "render",
    value: function render() {
      var _this$props6 = this.props,
          rowIndex = _this$props6.rowIndex,
          columnKey = _this$props6.columnKey;
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);
      var svc = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]();
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "textCell"
      }, this.props.dataList[rowIndex][columnKey] ? svc.formatNumber(this.props.dataList[rowIndex][columnKey], columnConfig) : 0));
    }
  }]);

  return NumberCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var ToolTipHtmlCell = /*#__PURE__*/function (_React$PureComponent16) {
  _inherits(ToolTipHtmlCell, _React$PureComponent16);

  var _super16 = _createSuper(ToolTipHtmlCell);

  function ToolTipHtmlCell() {
    var _this23;

    _classCallCheck(this, ToolTipHtmlCell);

    _this23 = _super16.call(this);
    _this23.showToolTip = _this23.showToolTip.bind(_assertThisInitialized(_this23));
    _this23.hideToolTip = _this23.hideToolTip.bind(_assertThisInitialized(_this23));
    _this23.state = {
      openTooltip: false
    };
    return _this23;
  }

  _createClass(ToolTipHtmlCell, [{
    key: "showToolTip",
    value: function showToolTip() {
      this.setState({
        openTooltip: true
      });
    }
  }, {
    key: "hideToolTip",
    value: function hideToolTip() {
      this.setState({
        openTooltip: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props7 = this.props,
          rowIndex = _this$props7.rowIndex,
          columnKey = _this$props7.columnKey;
      var colPositionObj = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]().getColumnPosition(Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState(), columnKey);
      var position = 'center';

      if (colPositionObj.bFirst) {
        position = 'left';
      } else if (colPositionObj.bLast) {
        position = 'right';
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "htmlCell htmlTooltipCell"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          autoEllipse: true,
          tooltipWrapper: true
        }),
        onMouseEnter: this.showToolTip,
        onMouseLeave: this.hideToolTip
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: this.props.dataList[rowIndex][columnKey]
        }
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "toolTipDock"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_8__["BoundedTetherComp"], {
        className: "dvTetheredToolTip",
        attachment: "middle " + position,
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "tooltipAttachPoint"
      }), this.state.openTooltip && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(ToolTipComp, _extends({}, this.props, {
        content: this.props.dataList[rowIndex][columnKey]
      })))))));
    }
  }]);

  return ToolTipHtmlCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var HtmlCell = /*#__PURE__*/function (_React$PureComponent17) {
  _inherits(HtmlCell, _React$PureComponent17);

  var _super17 = _createSuper(HtmlCell);

  function HtmlCell() {
    _classCallCheck(this, HtmlCell);

    return _super17.apply(this, arguments);
  }

  _createClass(HtmlCell, [{
    key: "render",
    value: function render() {
      var _this$props8 = this.props,
          rowIndex = _this$props8.rowIndex,
          columnKey = _this$props8.columnKey;
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "htmlCell",
        dangerouslySetInnerHTML: {
          __html: this.props.dataList[rowIndex][columnKey]
        }
      }));
    }
  }]);

  return HtmlCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var PureClickableCell = /*#__PURE__*/function (_React$PureComponent18) {
  _inherits(PureClickableCell, _React$PureComponent18);

  var _super18 = _createSuper(PureClickableCell);

  function PureClickableCell() {
    var _this24;

    _classCallCheck(this, PureClickableCell);

    _this24 = _super18.call(this);
    _this24.onClick = _this24.onClick.bind(_assertThisInitialized(_this24));
    _this24.updateClickable = _this24.updateClickable.bind(_assertThisInitialized(_this24));
    _this24.state = {
      unClickable: false
    };
    _this24.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]();
    return _this24;
  }

  _createClass(PureClickableCell, [{
    key: "onClick",
    value: function onClick(e) {
      e.stopPropagation();

      if (this.props.onCellClicked && !this.state.unClickable) {
        this.props.onCellClicked(this.props.dataList[this.props.rowIndex], this.props.columnKey);
      }
    }
  }, {
    key: "updateClickable",
    value: function updateClickable() {
      var unClickableCells = this.store.getState().unClickableCells;
      this.setState({
        unClickable: this.props.columnKey in unClickableCells && unClickableCells[this.props.columnKey].includes(this.service.getRowKeyValFromIndex(this.props.rowIndex, this.store.getState()))
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this25 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unsubscriber = this.store.subscribeTo(this.store.UNCLICKABLE_CELLS_UPDATED, function () {
        _this25.updateClickable();
      });
      this.updateClickable();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriber();
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) {
        // using nextProps.rowIndex as real rowIndex
        var unClickableCells = this.store.getState().unClickableCells;
        this.setState({
          unClickable: this.props.columnKey in unClickableCells && unClickableCells[this.props.columnKey].includes(this.service.getRowKeyValFromIndex(nextProps.rowIndex, this.store.getState()))
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props9 = this.props,
          rowIndex = _this$props9.rowIndex,
          columnKey = _this$props9.columnKey;
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        onClick: this.onClick,
        dangerouslySetInnerHTML: {
          __html: this.props.dataList[rowIndex][columnKey]
        }
      }));
    }
  }]);

  return PureClickableCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var ClickableCell = /*#__PURE__*/function (_React$PureComponent19) {
  _inherits(ClickableCell, _React$PureComponent19);

  var _super19 = _createSuper(ClickableCell);

  function ClickableCell() {
    var _this26;

    _classCallCheck(this, ClickableCell);

    _this26 = _super19.call(this);
    _this26.onClick = _this26.onClick.bind(_assertThisInitialized(_this26));
    _this26.updateClickable = _this26.updateClickable.bind(_assertThisInitialized(_this26));
    _this26.state = {
      unClickable: false
    };
    _this26.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]();
    return _this26;
  }

  _createClass(ClickableCell, [{
    key: "onClick",
    value: function onClick(e) {
      e.stopPropagation();

      if (this.props.onCellClicked && !this.state.unClickable) {
        this.props.onCellClicked(this.props.dataList[this.props.rowIndex], this.props.columnKey);
      }
    }
  }, {
    key: "updateClickable",
    value: function updateClickable() {
      var unClickableCells = this.store.getState().unClickableCells;
      this.setState({
        unClickable: this.props.columnKey in unClickableCells && unClickableCells[this.props.columnKey].includes(this.service.getRowKeyValFromIndex(this.props.rowIndex, this.store.getState()))
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this27 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unsubscriber = this.store.subscribeTo(this.store.UNCLICKABLE_CELLS_UPDATED, function () {
        _this27.updateClickable();
      });
      this.updateClickable();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriber();
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) {
        // using nextProps.rowIndex as real rowIndex
        var unClickableCells = this.store.getState().unClickableCells;
        this.setState({
          unClickable: this.props.columnKey in unClickableCells && unClickableCells[this.props.columnKey].includes(this.service.getRowKeyValFromIndex(nextProps.rowIndex, this.store.getState()))
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props10 = this.props,
          rowIndex = _this$props10.rowIndex,
          columnKey = _this$props10.columnKey;
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          "autoEllipse": true,
          "clickableCell": !this.state.unClickable
        }),
        onClick: this.onClick,
        dangerouslySetInnerHTML: {
          __html: this.props.dataList[rowIndex][columnKey]
        }
      }));
    }
  }]);

  return ClickableCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var CollapseHeaderCell = /*#__PURE__*/function (_React$PureComponent20) {
  _inherits(CollapseHeaderCell, _React$PureComponent20);

  var _super20 = _createSuper(CollapseHeaderCell);

  function CollapseHeaderCell() {
    var _this28;

    _classCallCheck(this, CollapseHeaderCell);

    _this28 = _super20.call(this);
    _this28.state = {
      allOpened: false
    };
    _this28._toggle = _this28._toggle.bind(_assertThisInitialized(_this28));
    return _this28;
  }

  _createClass(CollapseHeaderCell, [{
    key: "_toggle",
    value: function _toggle() {
      this.props.callback(!this.state.allOpened);
      this.setState({
        allOpened: !this.state.allOpened
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this29 = this;

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        onClick: function onClick(e) {
          e.stopPropagation();

          _this29._toggle();
        },
        className: "collapseToggler headerControllerIcon"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          "material-icons": true,
          array_right: !this.state.allOpened,
          array_right_down: this.state.allOpened
        })
      }, "arrow_right")));
    }
  }]);

  return CollapseHeaderCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var CollapseCell = /*#__PURE__*/function (_React$PureComponent21) {
  _inherits(CollapseCell, _React$PureComponent21);

  var _super21 = _createSuper(CollapseCell);

  function CollapseCell() {
    var _this30;

    _classCallCheck(this, CollapseCell);

    _this30 = _super21.call(this);
    _this30.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]();
    _this30._toggleRow = _this30._toggleRow.bind(_assertThisInitialized(_this30));
    return _this30;
  }

  _createClass(CollapseCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this31 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unsubscriber = this.store.subscribeTo(this.store.TOGGLE_ALL_ROWS, function () {
        if (_this31.service.isRowSelected(_this31.props.rowIndex, _this31.store.getState())) _this31._toggleRow();
      });
    }
  }, {
    key: "_toggleRow",
    value: function _toggleRow() {
      this.props.callback(this.props.rowIndex);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriber();
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {// if(this.props.rowIndex !== nextProps.rowIndex &&
      //     this.store.getState().allOpened){
      //     this._toggleRow();
      // }
    }
  }, {
    key: "render",
    value: function render() {
      var _this32 = this;

      var _this$props11 = this.props,
          collapsedRows = _this$props11.collapsedRows,
          rowIndex = _this$props11.rowIndex,
          callback = _this$props11.callback;
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        onClick: function onClick(e) {
          e.stopPropagation();

          _this32._toggleRow();
        },
        className: "collapseToggler"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          "material-icons": true,
          array_right: !collapsedRows.has(rowIndex),
          array_right_down: collapsedRows.has(rowIndex)
        })
      }, "arrow_right")));
    }
  }]);

  return CollapseCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);
var ColumnCheckBoxCell = /*#__PURE__*/function (_Component) {
  _inherits(ColumnCheckBoxCell, _Component);

  var _super22 = _createSuper(ColumnCheckBoxCell);

  function ColumnCheckBoxCell() {
    var _this33;

    _classCallCheck(this, ColumnCheckBoxCell);

    _this33 = _super22.call(this);
    _this33.state = {
      checked: false
    };
    _this33._onChange = _this33._onChange.bind(_assertThisInitialized(_this33));
    _this33.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]();
    return _this33;
  }

  _createClass(ColumnCheckBoxCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this34 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unSubscribeSelectAll = this.store.subscribeTo(this.store.ROW_ALL_SELECTED, function () {
        var stateObj = {};
        stateObj["checked"] = _this34.store.getState().rowAllSelected;

        _this34.setState(stateObj);
      });

      if (!this.store.getState().config.deCoupleRowSelectAndCheckbox) {
        this.setState({
          checked: this.service.isRowSelected(this.props.rowIndex, this.store.getState())
        });
        this.unSubscribRowSelected = this.store.subscribeTo(this.store.ROW_SELECTED, function () {
          _this34.setState({
            checked: _this34.service.isRowSelected(_this34.props.rowIndex, Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this34.props.appId).getState())
          });
        });
        this.unSubscribeSingleRowSelected = this.store.subscribeTo(this.store.SINGLE_ROW_SELECTED, function () {
          _this34.setState({
            checked: _this34.service.isRowSelected(_this34.props.rowIndex, Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this34.props.appId).getState())
          });
        });
      }
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) {
        // using nextProps.rowIndex as real rowIndex
        this.setState({
          checked: this.service.isRowSelected(nextProps.rowIndex, Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState())
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unSubscribeSelectAll();

      if (!this.store.getState().config.deCoupleRowSelectAndCheckbox) {
        this.unSubscribRowSelected();
        this.unSubscribeSingleRowSelected();
      }
    }
  }, {
    key: "_onChange",
    value: function _onChange(e) {
      this.setState({
        checked: e.target.checked
      });

      if (!this.store.getState().config.deCoupleRowSelectAndCheckbox) {
        //we only toggle here if no decouple
        this.store.toggleRowSelected(this.props.rowIndex);
      } else {
        //otherwise, we will dispatch different event
        this.store.toggleCheckBoxChanged(this.props.rowIndex, e.target.checked);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(muicss_lib_react_checkbox__WEBPACK_IMPORTED_MODULE_3___default.a, {
        key: this.props.rowIndex,
        onChange: this._onChange
      }));
    }
  }]);

  return ColumnCheckBoxCell;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]);
var ColumnRadioButtonCell = /*#__PURE__*/function (_Component2) {
  _inherits(ColumnRadioButtonCell, _Component2);

  var _super23 = _createSuper(ColumnRadioButtonCell);

  function ColumnRadioButtonCell() {
    var _this35;

    _classCallCheck(this, ColumnRadioButtonCell);

    _this35 = _super23.call(this);
    _this35.state = {
      checked: false
    };
    _this35._onChange = _this35._onChange.bind(_assertThisInitialized(_this35));
    _this35.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]();
    return _this35;
  }

  _createClass(ColumnRadioButtonCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this36 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);

      if (!this.store.getState().config.deCoupleRowSelectAndCheckbox) {
        this.setState({
          checked: this.service.isRowSelected(this.props.rowIndex, this.store.getState())
        });
        this.unSubscribeRowSelected = this.store.subscribeTo(this.store.ROW_SELECTED, function () {
          _this36.setState({
            checked: _this36.service.isRowSelected(_this36.props.rowIndex, Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this36.props.appId).getState())
          });
        });
        this.unSubscribeSingleRowSelected = this.store.subscribeTo(this.store.SINGLE_ROW_SELECTED, function () {
          _this36.setState({
            checked: _this36.service.isRowSelected(_this36.props.rowIndex, Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this36.props.appId).getState())
          });
        });
      } else if (this.store.getState().config.enableRadioButton) {
        this.unSubscribeCheckBoxChecked = this.store.subscribeTo(this.store.CHECKBOX_CHECKED, function () {
          _this36.setState({
            checked: _this36.service.isRowChecked(_this36.props.rowIndex, Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this36.props.appId).getState())
          });
        });
      }
    } //must put here to prevent repeated display of checkbox, it is because reusing...

  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.rowIndex !== nextProps.rowIndex) {
        // using nextProps.rowIndex as real rowIndex
        this.setState({
          checked: this.service.isRowSelected(nextProps.rowIndex, Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState())
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (!this.store.getState().config.deCoupleRowSelectAndCheckbox) {
        this.unSubscribeRowSelected();
        this.unSubscribeSingleRowSelected();
      } else if (this.store.getState().config.enableRadioButton) {
        this.unSubscribeCheckBoxChecked();
      }
    }
  }, {
    key: "_onChange",
    value: function _onChange(e) {
      this.setState({
        checked: e.target.checked
      });

      if (!this.store.getState().config.deCoupleRowSelectAndCheckbox) {
        //we only toggle here if no decouple
        this.store.toggleRowSelected(this.props.rowIndex);
      } else {
        //otherwise, we will dispatch different event
        this.store.toggleCheckBoxChanged(this.props.rowIndex, e.target.checked);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this37 = this;

      var decoupleSelection = function decoupleSelection(e) {
        if (_this37.store.getState().config.deCoupleRowSelectAndCheckbox) {
          e.stopPropagation();
        }
      };

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        onClick: function onClick(e) {
          return decoupleSelection(e);
        }
      }, "Radio"));
    }
  }]);

  return ColumnRadioButtonCell;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]); // <Radio key={this.props.rowIndex} checked={this.state.checked} value="null" onChange={this._onChange} />

var ColumnHeaderCheckBoxCell = /*#__PURE__*/function (_Component3) {
  _inherits(ColumnHeaderCheckBoxCell, _Component3);

  var _super24 = _createSuper(ColumnHeaderCheckBoxCell);

  function ColumnHeaderCheckBoxCell() {
    var _this38;

    _classCallCheck(this, ColumnHeaderCheckBoxCell);

    _this38 = _super24.call(this);
    _this38.state = {
      checked: false
    };
    _this38.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]();
    _this38._onChange = _this38._onChange.bind(_assertThisInitialized(_this38));
    _this38._rowChecked = _this38._rowChecked.bind(_assertThisInitialized(_this38));
    return _this38;
  }

  _createClass(ColumnHeaderCheckBoxCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this39 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unSubscriberSelectOne = this.store.subscribeTo(this.store.ROW_SELECTED, function (state) {
        _this39._rowChecked();
      }); //UI-2976-Clearn

      this.unSubscriberSelectAll = this.store.subscribeTo(this.store.ROW_ALL_SELECTED, function (state) {
        _this39._rowChecked();
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unSubscriberSelectOne();
      this.unSubscriberSelectAll();
    }
  }, {
    key: "_rowChecked",
    value: function _rowChecked() {
      this.setState({
        checked: this.service.isAllRowSelected(this.store.getState().dataList, this.store.getState().config, this.store.getState().selectedRowKeys)
      });
    }
  }, {
    key: "_onChange",
    value: function _onChange() {
      var newChecked = !this.state.checked;
      this.setState({
        checked: newChecked
      });
      this.store.setRowAllSelected(newChecked); //this is to enable row hight

      setTimeout(function () {
        window.dispatchEvent(new Event("resize"));
      }, 0);
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(muicss_lib_react_checkbox__WEBPACK_IMPORTED_MODULE_3___default.a, {
        className: "headerCellCheckbox headerControllerIcon",
        key: this.props.rowIndex,
        checked: this.state.checked,
        onChange: this._onChange
      }));
    }
  }]);

  return ColumnHeaderCheckBoxCell;
}(react__WEBPACK_IMPORTED_MODULE_1__["Component"]);
var NavigateCell = /*#__PURE__*/function (_React$PureComponent22) {
  _inherits(NavigateCell, _React$PureComponent22);

  var _super25 = _createSuper(NavigateCell);

  function NavigateCell() {
    var _this40;

    _classCallCheck(this, NavigateCell);

    _this40 = _super25.call(this);
    _this40._click = _this40._click.bind(_assertThisInitialized(_this40));
    _this40.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_4__["default"]();
    _this40._rowChecked = _this40._rowChecked.bind(_assertThisInitialized(_this40));
    _this40.state = {
      rowSelected: false,
      height: 0,
      width: 0
    };
    return _this40;
  }

  _createClass(NavigateCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this41 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.setState({
        width: 50,
        height: this.store.getState().config.rowHeight
      });
      this.unSubscriberSelectRow = this.store.subscribeTo(this.store.ROW_SELECTED, function (state) {
        _this41._rowChecked();
      });
      this.unSubscriberSelectAllRow = this.store.subscribeTo(this.store.ROW_ALL_SELECTED, function (state) {
        _this41._rowChecked();
      });

      this._rowChecked();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unSubscriberSelectRow();
      this.unSubscriberSelectAllRow();
    }
  }, {
    key: "_rowChecked",
    value: function _rowChecked() {
      this.setState({
        rowSelected: this.service.isRowSelected(this.props.rowIndex, this.store.getState())
      });
    }
  }, {
    key: "_click",
    value: function _click(e) {
      e.stopPropagation();

      if ("onNavigate" in this.props) {
        this.props.onNavigate(this.props.dataList[this.props.rowIndex]);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        style: {
          width: this.state.width,
          height: this.state.height
        },
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          navWrapper: true,
          navWrapperSelected: this.state.rowSelected
        }),
        onClick: this._click
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons"
      }, "arrow_forward")));
    }
  }]);

  return NavigateCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

/***/ }),

/***/ "./src/components/data_table/comps/cells/headercell.js":
/*!*************************************************************!*\
  !*** ./src/components/data_table/comps/cells/headercell.js ***!
  \*************************************************************/
/*! exports provided: HeaderCell */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderCell", function() { return HeaderCell; });
/* harmony import */ var fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fixed-data-table-2 */ "./node_modules/fixed-data-table-2/main.js");
/* harmony import */ var fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _redux_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../redux/store */ "./src/components/data_table/redux/store.js");
/* harmony import */ var _services_table_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/table_service */ "./src/components/data_table/services/table_service.js");
/* harmony import */ var _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../entities/custom_config */ "./src/components/data_table/entities/custom_config.js");
/* harmony import */ var react_tether__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-tether */ "./node_modules/react-tether/lib/react-tether.js");
/* harmony import */ var react_tether__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_tether__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _entities_column__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../entities/column */ "./src/components/data_table/entities/column.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! classnames */ "./node_modules/classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var muicss_lib_react_checkbox__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! muicss/lib/react/checkbox */ "./node_modules/muicss/lib/react/checkbox.js");
/* harmony import */ var muicss_lib_react_checkbox__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(muicss_lib_react_checkbox__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _cells__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./cells */ "./src/components/data_table/comps/cells/cells.js");
/* harmony import */ var _BoundedTetherComp__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../BoundedTetherComp */ "./src/components/data_table/comps/BoundedTetherComp.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }













var Datetime = __webpack_require__(/*! react-datetime */ "./node_modules/react-datetime/DateTime.js");


var HeaderCell = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(HeaderCell, _React$PureComponent);

  var _super = _createSuper(HeaderCell);

  function HeaderCell() {
    var _this;

    _classCallCheck(this, HeaderCell);

    _this = _super.call(this);
    _this.state = {
      columnConfig: null,
      openFilter: false,
      mouseHover: false,
      currentFiltered: false
    };
    _this.service = new _services_table_service__WEBPACK_IMPORTED_MODULE_3__["default"]();
    _this._setCfg = _this._setCfg.bind(_assertThisInitialized(_this));
    _this._setFilterCfg = _this._setFilterCfg.bind(_assertThisInitialized(_this));
    _this.sort = _this.sort.bind(_assertThisInitialized(_this));
    _this.filter = _this.filter.bind(_assertThisInitialized(_this));
    _this.onClose = _this.onClose.bind(_assertThisInitialized(_this));
    _this.onMouseEnterSort = _this.onMouseEnterSort.bind(_assertThisInitialized(_this));
    _this.onMouseLeaveSort = _this.onMouseLeaveSort.bind(_assertThisInitialized(_this));
    _this.onFilterUpdate = _this.onFilterUpdate.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(HeaderCell, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.store = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId);
      this.unsubscriberCloseAllPopUp = this.store.subscribeTo(this.store.CLOSE_ALL_FILTER_POPUP, function () {
        _this2.onClose();
      });
      this.unsubsriberSortColumn = this.store.subscribeTo(this.store.SORT_COLUMN, function () {
        _this2._setCfg();
      });
      this.unsubsriberFilterColumn = this.store.subscribeTo(this.store.FILTER_UPDATE, function () {
        _this2._setFilterCfg();
      });

      this._setCfg();

      this._setFilterCfg();

      this.setState({
        currentSorted: false
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unsubscriberCloseAllPopUp();
      this.unsubsriberSortColumn();
      this.unsubsriberFilterColumn();
    }
  }, {
    key: "_setCfg",
    value: function _setCfg() {
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);
      var customConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().customConfig;
      var sortIcon;

      if (columnConfig.sortable && customConfig) {
        if (customConfig.getColumnSortOrder(this.props.columnKey) !== _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["ORDER_NONE"]) {
          sortIcon = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
            className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
              "material-icons": true,
              "sortIconUp": true,
              "sortIconDown": customConfig.sorter.order === _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["ORDER_DESC"]
            })
          }, "arrow_upward");
        }
      } else {
        sortIcon = null;
      }

      this.setState({
        columnConfig: columnConfig,
        sortIcon: sortIcon
      });
    }
  }, {
    key: "_setFilterCfg",
    value: function _setFilterCfg() {
      var customConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().customConfig;
      var currentFiltered = false;

      if (customConfig && customConfig.getFilterFor(this.props.columnKey)) {
        currentFiltered = true;
      }

      this.setState({
        currentFiltered: currentFiltered
      });
    }
  }, {
    key: "sort",
    value: function sort() {
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);

      if (columnConfig.sortable) {
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setColumnSort(this.props.columnKey);
      }
    }
  }, {
    key: "filter",
    value: function filter(event) {
      if (event) {
        event.stopPropagation();
      }

      this.store.closeAllFilterPopUp();
      this.setState({
        openFilter: !this.state.openFilter
      });
    }
  }, {
    key: "onClose",
    value: function onClose() {
      this.setState({
        openFilter: false
      });
    }
  }, {
    key: "onFilterUpdate",
    value: function onFilterUpdate(filter) {
      this.store.setFilter(filter);
    }
  }, {
    key: "onMouseEnterSort",
    value: function onMouseEnterSort() {
      this.setState({
        mouseHover: true
      });
    }
  }, {
    key: "onMouseLeaveSort",
    value: function onMouseLeaveSort() {
      this.setState({
        mouseHover: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      if (this.state.columnConfig == null) return null;
      var filterIcon;
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);

      if (columnConfig.filterable) {
        filterIcon = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
          className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
            "material-icons": true,
            up: !this.state.openFilter,
            down: this.state.openFilter
          })
        }, "filter_list");
      } else {
        filterIcon = null;
      }

      var sortIcon = null;

      if (columnConfig.sortable && this.state.mouseHover) {
        sortIcon = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
          className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
            "material-icons": true,
            "sortIconUp": true
          })
        }, "arrow_upward");
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(fixed_data_table_2__WEBPACK_IMPORTED_MODULE_0__["Cell"], null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "headerTitle",
        onClick: this.sort,
        onMouseEnter: this.onMouseEnterSort,
        onMouseLeave: this.onMouseLeaveSort
      }, this.state.columnConfig.title, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_10__["BoundedTetherComp"], {
        className: "dvTetheredToolTip",
        attachment: "top center",
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "headerTooltipAttachPoint"
      }), this.state.mouseHover && this.state.columnConfig.tooltip && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_cells__WEBPACK_IMPORTED_MODULE_9__["ToolTipComp"], _extends({}, this.props, {
        content: this.state.columnConfig.tooltip
      })))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          sortIconWrapper: true,
          hoverSort: this.state.mouseHover && !this.state.sortIcon
        }),
        onMouseEnter: this.onMouseEnterSort,
        onMouseLeave: this.onMouseLeaveSort,
        onClick: this.sort
      }, " ", this.state.sortIcon || sortIcon, " "), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          filterIconWrapper: true,
          selectedFilter: this.state.currentFiltered
        }),
        onClick: function onClick(e) {
          return _this3.filter(e);
        }
      }, " ", filterIcon, " "), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_BoundedTetherComp__WEBPACK_IMPORTED_MODULE_10__["BoundedTetherComp"], {
        attachment: "top left",
        appId: this.props.appId
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "filterAttachPoint"
      }), this.state.openFilter && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HeaderFilterComp, _extends({}, this.props, {
        onClose: this.onClose
      })))));
    }
  }]);

  return HeaderCell;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var HeaderFilterComp = /*#__PURE__*/function (_React$PureComponent2) {
  _inherits(HeaderFilterComp, _React$PureComponent2);

  var _super2 = _createSuper(HeaderFilterComp);

  function HeaderFilterComp(props) {
    _classCallCheck(this, HeaderFilterComp);

    return _super2.call(this, props);
  }

  _createClass(HeaderFilterComp, [{
    key: "render",
    value: function render() {
      var columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).getState().config.getColumnConfig(this.props.columnKey);
      var filterComp = null;

      if (columnConfig.type === _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["TYPE_NUMBER"]) {
        filterComp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HeaderFilterNumberComp, this.props);
      } else if (columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_SINGLE_SELECT_ACTIONS"] || columnConfig.filterOptions.length > 0) {
        filterComp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HeaderFilterListComp, this.props);
      } else if (columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_TEXT"] || columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_PURE_TEXT"] || columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_HTML"] || columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_LIST"] || columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_CLICKABLE"]) {
        filterComp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HeaderFilterCompTextHtml, this.props);
      } else if (columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_DATE"] || columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_DATETIME"]) {
        filterComp = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(HeaderFilterDateTimeComp, this.props);
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          "headerFilterWrapper": true,
          "normaFilterlWrapper": !(columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_DATE"] || columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_DATETIME"]),
          "dateTimePickerWrapper": columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_DATE"] || columnConfig.type === _entities_column__WEBPACK_IMPORTED_MODULE_6__["TYPE_DATETIME"]
        }),
        onClick: function onClick(e) {
          return e.stopPropagation();
        }
      }, filterComp);
    }
  }]);

  return HeaderFilterComp;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var HeaderFilterNumberComp = /*#__PURE__*/function (_React$PureComponent3) {
  _inherits(HeaderFilterNumberComp, _React$PureComponent3);

  var _super3 = _createSuper(HeaderFilterNumberComp);

  function HeaderFilterNumberComp(props) {
    var _this4;

    _classCallCheck(this, HeaderFilterNumberComp);

    _this4 = _super3.call(this, props);
    _this4.updateStartNum = _this4.updateStartNum.bind(_assertThisInitialized(_this4));
    _this4.updateEndNum = _this4.updateEndNum.bind(_assertThisInitialized(_this4));
    _this4.confirm = _this4.confirm.bind(_assertThisInitialized(_this4));
    _this4.closeme = _this4.closeme.bind(_assertThisInitialized(_this4));
    _this4.customConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this4.props.appId).getState().customConfig;
    _this4.currentFilter = null;

    if (_this4.customConfig) {
      _this4.currentFilter = _this4.customConfig.getFilterFor(_this4.props.columnKey);
    }

    if (_this4.currentFilter) {
      _this4.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: _this4.props.columnKey,
        operator: _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["TYPE_BETWEEN"],
        value1: _this4.currentFilter.value1,
        value2: _this4.currentFilter.value2
      });
    } else {
      _this4.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: _this4.props.columnKey,
        operator: _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["TYPE_BETWEEN"],
        value1: 0,
        value2: 0
      });
    }

    return _this4;
  }

  _createClass(HeaderFilterNumberComp, [{
    key: "updateStartNum",
    value: function updateStartNum(e) {
      this.filter.value1 = e.target.value;
    }
  }, {
    key: "updateEndNum",
    value: function updateEndNum(e) {
      this.filter.value2 = e.target.value;
    }
  }, {
    key: "confirm",
    value: function confirm() {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setFilter(this.filter);
    }
  }, {
    key: "closeme",
    value: function closeme() {
      this.props.onClose();
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerFilerNumber"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerFilerNumberFilters"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", null, "From: "), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
        type: "number",
        onChange: this.updateStartNum
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", null, "To"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
        type: "number",
        onChange: this.updateEndNum
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "cfx"
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerFilterButtons"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          "material-icons": true
        }),
        onClick: this.confirm
      }, "done"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons",
        onClick: this.closeme
      }, "clear")));
    }
  }]);

  return HeaderFilterNumberComp;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var HeaderFilterDateTimeComp = /*#__PURE__*/function (_React$PureComponent4) {
  _inherits(HeaderFilterDateTimeComp, _React$PureComponent4);

  var _super4 = _createSuper(HeaderFilterDateTimeComp);

  function HeaderFilterDateTimeComp(props) {
    var _this5;

    _classCallCheck(this, HeaderFilterDateTimeComp);

    _this5 = _super4.call(this, props);
    _this5.state = {
      invalid: true
    };
    _this5.updateStartDate = _this5.updateStartDate.bind(_assertThisInitialized(_this5));
    _this5.updateEndDate = _this5.updateEndDate.bind(_assertThisInitialized(_this5));
    _this5.confirm = _this5.confirm.bind(_assertThisInitialized(_this5));
    _this5.closeme = _this5.closeme.bind(_assertThisInitialized(_this5));
    _this5.customConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this5.props.appId).getState().customConfig;
    _this5.currentFilter = null;

    if (_this5.customConfig) {
      _this5.currentFilter = _this5.customConfig.getFilterFor(_this5.props.columnKey);
    }

    if (_this5.currentFilter) {
      _this5.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: _this5.props.columnKey,
        operator: _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["TYPE_BETWEEN"],
        value1: new Date(_this5.currentFilter.value1),
        value2: new Date(_this5.currentFilter.value2)
      });
    } else {
      _this5.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: _this5.props.columnKey,
        operator: _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["TYPE_BETWEEN"],
        value1: new Date(),
        value2: new Date()
      });
    } //this.checkValidate();


    return _this5;
  }

  _createClass(HeaderFilterDateTimeComp, [{
    key: "updateStartDate",
    value: function updateStartDate(e) {
      this.filter.value1 = e._d.getTime();
      this.checkValidate();
    }
  }, {
    key: "updateEndDate",
    value: function updateEndDate(e) {
      this.filter.value2 = e._d.getTime();
      this.checkValidate();
    }
  }, {
    key: "checkValidate",
    value: function checkValidate() {
      this.setState({
        invalid: this.filter.inValid()
      });
    }
  }, {
    key: "confirm",
    value: function confirm() {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setFilter(this.filter);
      this.closeme();
    }
  }, {
    key: "closeme",
    value: function closeme() {
      this.props.onClose();
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerFilerDateTime"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerDateTimeFilters"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "startDTWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", null, "From DateTime"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Datetime, {
        dateFormat: "YYYY-MM-DD",
        defaultValue: this.filter.value1,
        onChange: this.updateStartDate
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "endDTWraper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", null, "To DateTime"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Datetime, {
        dateFormat: "YYYY-MM-DD",
        defaultValue: this.filter.value2,
        onChange: this.updateEndDate
      }))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "cfx"
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerFilterButtons"
      }, this.state.invalid && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "error"
      }, this.state.invalid), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          "material-icons": true,
          "hidden": this.state.invalid
        }),
        onClick: this.confirm
      }, "done"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons",
        onClick: this.closeme
      }, "clear")));
    }
  }]);

  return HeaderFilterDateTimeComp;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

var HeaderFilterListCheckBoxComp = /*#__PURE__*/function (_React$PureComponent5) {
  _inherits(HeaderFilterListCheckBoxComp, _React$PureComponent5);

  var _super5 = _createSuper(HeaderFilterListCheckBoxComp);

  function HeaderFilterListCheckBoxComp(props) {
    var _this6;

    _classCallCheck(this, HeaderFilterListCheckBoxComp);

    _this6 = _super5.call(this, props);
    _this6.filter = _this6.filter.bind(_assertThisInitialized(_this6));
    _this6.state = {
      checked: _this6.props.currentFilter.value1.includes(_this6.props.item.value)
    };
    return _this6;
  }

  _createClass(HeaderFilterListCheckBoxComp, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        checked: nextProps.currentFilter.value1.includes(this.props.item.value)
      });
    }
  }, {
    key: "filter",
    value: function filter() {
      var _this7 = this;

      this.setState({
        checked: !this.state.checked
      }, function () {
        _this7.props.updateFilter(_this7.props.item, !_this7.state.checked);
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "checkBoxRowWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(muicss_lib_react_checkbox__WEBPACK_IMPORTED_MODULE_8___default.a, {
        key: this.props.item.value,
        checked: this.state.checked,
        onChange: this.filter
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
        className: "title",
        onClick: this.filter
      }, this.props.item.title));
    }
  }]);

  return HeaderFilterListCheckBoxComp;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent); // <Checkbox key={this.props.item.value} checked={this.state.checked} onChange={this.filter} />


var HeaderFilterListComp = /*#__PURE__*/function (_React$PureComponent6) {
  _inherits(HeaderFilterListComp, _React$PureComponent6);

  var _super6 = _createSuper(HeaderFilterListComp);

  function HeaderFilterListComp(props) {
    var _this8;

    _classCallCheck(this, HeaderFilterListComp);

    _this8 = _super6.call(this, props);
    _this8.closeme = _this8.closeme.bind(_assertThisInitialized(_this8));
    _this8.customConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this8.props.appId).getState().customConfig;
    _this8.currentFilter = null;
    _this8.columnConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this8.props.appId).getState().config.getColumnConfig(_this8.props.columnKey);
    _this8.keysMap = [];
    _this8.checkList = [];
    _this8.filterObj = {
      by: _this8.props.columnKey,
      operator: "in",
      value1: []
    };

    if (_this8.columnConfig.filterOptions.length !== 0) {
      _this8.columnConfig.filterOptions.forEach(function (item) {
        _this8.keysMap.push({
          title: item.title,
          value: item.value
        });
      });
    }

    if (_this8.columnConfig.actionOptions.length !== 0) {
      _this8.columnConfig.actionOptions.forEach(function (item) {
        _this8.keysMap.push({
          title: item.title,
          value: item.value
        });
      });
    }

    _this8.filterObj.value1 = _toConsumableArray(_this8.keysMap);

    _this8.keysMap.unshift({
      title: 'All',
      value: 'all'
    });

    if (_this8.customConfig) {
      _this8.currentFilter = _this8.customConfig.getFilterFor(_this8.props.columnKey);
    }

    if (_this8.currentFilter) {
      _this8.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: _this8.props.columnKey,
        operator: _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["TYPE_EQUALS"],
        value1: _this8.currentFilter.value1
      });
      _this8.checkList = _this8.keysMap.map(function (ele, key) {
        return {
          title: ele.title,
          key: ele.title === 'All' ? "".concat(_this8.props.columnKey, "_all") : "".concat(ele.title, "_").concat(key),
          value: ele.value,
          checked: ele.title === 'All' ? _this8.currentFilter.value1.length + 1 === _this8.keysMap.length : _this8.currentFilter.value1.includes(ele.value)
        };
      });
    } else {
      _this8.checkList = _this8.keysMap.map(function (ele, key) {
        return {
          title: ele.title,
          key: ele.title === 'All' ? "".concat(_this8.props.columnKey, "_all") : "".concat(ele.title, "_").concat(key),
          value: ele.value,
          checked: true
        };
      });
      _this8.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"](_this8.filterObj);
      _this8.currentFilter = _this8.filter;
    }

    _this8.state = {
      checkList: _this8.checkList
    };
    return _this8;
  }

  _createClass(HeaderFilterListComp, [{
    key: "closeme",
    value: function closeme() {
      this.props.onClose();
    }
  }, {
    key: "checkThis",
    value: function checkThis(item) {
      var _this9 = this;

      if (item.title === 'All') {
        if (item.checked) {
          this.checkList.forEach(function (i) {
            i.checked = false;
          });
        } else {
          this.checkList.forEach(function (i) {
            i.checked = true;
          });
        }
      }

      var filterValue = [];
      this.checkList.forEach(function (j) {
        if (item.title !== 'All' && j.title === item.title) {
          j.checked = !j.checked;
        }

        if (item.title !== 'All' && j.checked) {
          filterValue.push(j.value);
        }
      });
      var uncheck = this.checkList.find(function (ele, index) {
        return index !== 0 && ele.checked === false;
      });
      this.checkList[0].checked = !uncheck;
      this.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: this.props.columnKey,
        operator: "in",
        value1: filterValue
      });
      this.setState({
        checkList: _toConsumableArray(this.checkList)
      }, function () {
        _this9.currentFilter = _this9.filter;
        Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this9.props.appId).setFilter(_this9.filter);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this10 = this;

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerListWrapper"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerFilterButtons"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons",
        onClick: this.closeme
      }, "clear")), this.state.checkList.length !== 0 && this.state.checkList.map(function (item, index) {
        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: item.key,
          className: "checkBoxRowWrapper"
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(muicss_lib_react_checkbox__WEBPACK_IMPORTED_MODULE_8___default.a, {
          checked: item.checked,
          onChange: function onChange() {
            return _this10.checkThis(item);
          }
        }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
          className: "title",
          onClick: function onClick() {
            return _this10.checkThis(item);
          }
        }, item.title));
      }));
    }
  }]);

  return HeaderFilterListComp;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent); // <Checkbox checked={item.checked} onChange={() => this.checkThis(item)} />


var HeaderFilterCompTextHtml = /*#__PURE__*/function (_React$PureComponent7) {
  _inherits(HeaderFilterCompTextHtml, _React$PureComponent7);

  var _super7 = _createSuper(HeaderFilterCompTextHtml);

  function HeaderFilterCompTextHtml(props) {
    var _this11;

    _classCallCheck(this, HeaderFilterCompTextHtml);

    _this11 = _super7.call(this, props);
    _this11.confirm = _this11.confirm.bind(_assertThisInitialized(_this11));
    _this11.closeme = _this11.closeme.bind(_assertThisInitialized(_this11));
    _this11.onFocus = _this11.onFocus.bind(_assertThisInitialized(_this11));
    _this11.onBlur = _this11.onBlur.bind(_assertThisInitialized(_this11));
    _this11.customConfig = Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(_this11.props.appId).getState().customConfig;
    _this11.currentFilter = null;

    if (_this11.customConfig) {
      _this11.currentFilter = _this11.customConfig.getFilterFor(_this11.props.columnKey);
    }

    if (_this11.currentFilter) {
      _this11.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: _this11.props.columnKey,
        operator: "contains",
        value1: _this11.currentFilter.value1
      });
    } else {
      _this11.filter = new _entities_custom_config__WEBPACK_IMPORTED_MODULE_4__["Filter"]({
        by: _this11.props.columnKey,
        operator: "contains",
        value1: ""
      });
    }

    _this11.state = {
      focused: false
    };
    return _this11;
  }

  _createClass(HeaderFilterCompTextHtml, [{
    key: "onFilterUpdate",
    value: function onFilterUpdate(filter) {
      Object(_redux_store__WEBPACK_IMPORTED_MODULE_2__["default"])(this.props.appId).setFilter(this.filter);
    }
  }, {
    key: "confirm",
    value: function confirm() {// this.filter.value1 = this.refs.columnInputBox.value;
      // S(this.props.appId).setFilter(this.filter);
      // this.closeme();
    }
  }, {
    key: "closeme",
    value: function closeme() {
      this.props.onClose();
    }
  }, {
    key: "onFocus",
    value: function onFocus() {
      this.setState({
        focused: true
      });
    }
  }, {
    key: "onBlur",
    value: function onBlur() {
      this.setState({
        focused: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "filterSearchTitle"
      }, "Please enter content to search:"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_7___default()({
          filterSearchWrapper: true,
          focused: this.state.focused
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
        ref: "columnInputBox",
        placeholder: "Search",
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        type: "text",
        defaultValue: this.filter.value1
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons"
      }, "search")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        className: "headerFilterButtons"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons",
        onClick: this.confirm
      }, "done"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
        className: "material-icons",
        onClick: this.closeme
      }, "clear")));
    }
  }]);

  return HeaderFilterCompTextHtml;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);

/***/ }),

/***/ "./src/components/data_table/datatable.scss":
/*!**************************************************!*\
  !*** ./src/components/data_table/datatable.scss ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/lib/loader.js!./datatable.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/lib/loader.js!./src/components/data_table/datatable.scss");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = "head";
options.singleton = false;

var update = api(content, options);



module.exports = content.locals || {};

/***/ }),

/***/ "./src/components/data_table/entities/column.js":
/*!******************************************************!*\
  !*** ./src/components/data_table/entities/column.js ***!
  \******************************************************/
/*! exports provided: TYPE_TEXT, TYPE_PURE_TEXT, TYPE_HTML, TYPE_CLICKABLE, TYPE_PURE_CLICKABLE, TYPE_SINGLE_SELECT_ACTIONS, TYPE_ICON_CALL_BACK, TYPE_LIST, TYPE_NUMBER, TYPE_HTML_LIST, TYPE_MORE_OPTIONS, DOWNLOAD_STANDARD_ALWAYS, DOWNLOAD_STANDARD_NEVER, TYPE_DATE, TYPE_DATETIME, TYPE_NUMBER_FORMAT_COMMASEPERATED, TYPE_NUMBER_FORMAT_SHORTENED, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_TEXT", function() { return TYPE_TEXT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_PURE_TEXT", function() { return TYPE_PURE_TEXT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_HTML", function() { return TYPE_HTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_CLICKABLE", function() { return TYPE_CLICKABLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_PURE_CLICKABLE", function() { return TYPE_PURE_CLICKABLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_SINGLE_SELECT_ACTIONS", function() { return TYPE_SINGLE_SELECT_ACTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_ICON_CALL_BACK", function() { return TYPE_ICON_CALL_BACK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_LIST", function() { return TYPE_LIST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_NUMBER", function() { return TYPE_NUMBER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_HTML_LIST", function() { return TYPE_HTML_LIST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_MORE_OPTIONS", function() { return TYPE_MORE_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOWNLOAD_STANDARD_ALWAYS", function() { return DOWNLOAD_STANDARD_ALWAYS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOWNLOAD_STANDARD_NEVER", function() { return DOWNLOAD_STANDARD_NEVER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_DATE", function() { return TYPE_DATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_DATETIME", function() { return TYPE_DATETIME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_NUMBER_FORMAT_COMMASEPERATED", function() { return TYPE_NUMBER_FORMAT_COMMASEPERATED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_NUMBER_FORMAT_SHORTENED", function() { return TYPE_NUMBER_FORMAT_SHORTENED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Column; });


function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TYPE_TEXT = 'text';
var TYPE_PURE_TEXT = 'pure_text';
var TYPE_HTML = 'html';
var TYPE_CLICKABLE = 'clickable';
var TYPE_PURE_CLICKABLE = 'pure_clickable';
var TYPE_SINGLE_SELECT_ACTIONS = 'single_select_actions';
var TYPE_ICON_CALL_BACK = 'icon_call_back';
var TYPE_LIST = 'list';
var TYPE_NUMBER = 'number';
var TYPE_HTML_LIST = 'html_list';
var TYPE_MORE_OPTIONS = 'more_options';
var DOWNLOAD_STANDARD_ALWAYS = 'always';
var DOWNLOAD_STANDARD_NEVER = 'never';
var TYPE_DATE = 'date';
var TYPE_DATETIME = 'date_time';
var TYPE_NUMBER_FORMAT_COMMASEPERATED = 'COMMASEPERATED';
var TYPE_NUMBER_FORMAT_SHORTENED = 'SHORTENED';

var ColumnActionOption = function ColumnActionOption(data) {
  _classCallCheck(this, ColumnActionOption);

  this['value'] = 'value' in data ? data.value : '';
  this['title'] = 'title' in data ? data.title : '';
};

var Column = /*#__PURE__*/function () {
  function Column(data, index) {
    _classCallCheck(this, Column);

    this["key"] = data["key"] || "";
    this["title"] = data["title"] || "";
    this["type"] = data["type"] || TYPE_HTML; // text | html

    this["width"] = data["width"] || 100;
    this["resizable"] = "resizable" in data ? data.resizable : false;
    this["reordable"] = "reordable" in data ? data.reordable : false;
    this["flexGrow"] = "flexGrow" in data ? data.flexGrow : 1;
    this["fixed"] = "fixed" in data ? data.fixed : false;
    this["fixedRight"] = "fixedRight" in data ? data.fixedRight : false;
    this['format'] = 'format' in data ? data.format : '';
    this['editable'] = 'editable' in data ? data.editable : false;
    var actionOptions = [];

    if ('actionOptions' in data) {
      data.actionOptions.forEach(function (option) {
        actionOptions.push(new ColumnActionOption(option));
      });
    }

    this['actionOptions'] = actionOptions;
    this['hidden'] = 'hidden' in data ? data.hidden : false;
    this['sortable'] = 'sortable' in data ? data.sortable : false;
    this['filterable'] = 'filterable' in data ? data.filterable : false;
    this["primaryKey"] = "primaryKey" in data ? data.primaryKey : index === 0;
    this['filterOptions'] = 'filterOptions' in data ? data.filterOptions : [];
    this['controllers'] = 'controllers' in data ? data.controllers : {};
    this['downloadStandard'] = 'downloadStandard' in data ? data.downloadStandard : '';
    this['tooltip'] = 'tooltip' in data ? data.tooltip : '';
    this['disableTooltip'] = 'disableTooltip' in data ? data.disableTooltip : false; //dynamically adjust column minwidth, so that header is fully view

    if (this["title"] !== '') {
      if (this['width'] > 20) {
        //for some column, such as spacer, we need it to be small
        this['minWidth'] = this['hidden'] ? 0 : this.getWidthOfText(this["title"]) + 100;

        if (this['minWidth'] > this['width']) {
          this['width'] = this['minWidth'];
        }
      } else {
        this['minWidth'] = 0;
      }
    } else {
      this['minWidth'] = 0;
    }
  }

  _createClass(Column, [{
    key: "getActionOptions",
    value: function getActionOptions(optionValue) {
      var option = this.actionOptions.find(function (item) {
        return item.value.toLowerCase() === optionValue.toLowerCase();
      });
      return option ? option : {
        title: optionValue,
        value: optionValue
      };
    }
  }, {
    key: "getWidthOfText",
    value: function getWidthOfText(txt) {
      var fontName = 'Roboto, "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif';
      var fontSize = '14px';

      if (this.getWidthOfText.c === undefined) {
        this.getWidthOfText.c = document.createElement("canvas");
        this.getWidthOfText.ctx = this.getWidthOfText.c.getContext("2d");
      }

      this.getWidthOfText.ctx.font = fontSize + " " + fontName;
      return this.getWidthOfText.ctx.measureText(txt).width;
    }
  }]);

  return Column;
}();



/***/ }),

/***/ "./src/components/data_table/entities/custom_config.js":
/*!*************************************************************!*\
  !*** ./src/components/data_table/entities/custom_config.js ***!
  \*************************************************************/
/*! exports provided: default, ORDER_ASC, ORDER_DESC, ORDER_NONE, Sorter, TYPE_CONTAINS, TYPE_EQUALS, TYPE_GREATER_OR_EQUAL, TYPE_LESS_OR_EQUAL, TYPE_BETWEEN, TYPE_NUMBER, TYPE_IN, Filter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CustomConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ORDER_ASC", function() { return ORDER_ASC; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ORDER_DESC", function() { return ORDER_DESC; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ORDER_NONE", function() { return ORDER_NONE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sorter", function() { return Sorter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_CONTAINS", function() { return TYPE_CONTAINS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_EQUALS", function() { return TYPE_EQUALS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_GREATER_OR_EQUAL", function() { return TYPE_GREATER_OR_EQUAL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_LESS_OR_EQUAL", function() { return TYPE_LESS_OR_EQUAL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_BETWEEN", function() { return TYPE_BETWEEN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_NUMBER", function() { return TYPE_NUMBER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TYPE_IN", function() { return TYPE_IN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Filter", function() { return Filter; });


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CustomConfig = /*#__PURE__*/function () {
  function CustomConfig(data) {
    var _this = this;

    _classCallCheck(this, CustomConfig);

    this["columnsOrder"] = [];
    this["hiddenColumns"] = [];
    this["sorter"] = {};
    this["filters"] = [];
    this["columnWidths"] = {};

    if (data) {
      if ("columnsOrder" in data) this["columnsOrder"] = data["columnsOrder"];
      if ("hiddenColumns" in data) this["hiddenColumns"] = data["hiddenColumns"];
      if ("sorter" in data) this["sorter"] = new Sorter(data.sorter);
      if ("columnWidths" in data) this['columnWidths'] = data['columnWidths'];
      if ("filters" in data) data["filters"].forEach(function (filter) {
        _this.filters.push(new Filter(filter));
      });
    }
  }

  _createClass(CustomConfig, [{
    key: "setColumnWidths",
    value: function setColumnWidths(widths) {
      this['columnWidths'] = widths;
    }
  }, {
    key: "setColumnsOrder",
    value: function setColumnsOrder(columns) {
      this["columnsOrder"] = columns;
    }
  }, {
    key: "setHiddenColumns",
    value: function setHiddenColumns(columns) {
      this["hiddenColumns"] = columns;
    }
  }, {
    key: "getColumnSortOrder",
    value: function getColumnSortOrder(columnKey) {
      if (Object.keys(this.sorter).length === 0) {
        return ORDER_NONE;
      } else {
        if (this.sorter.by === columnKey) {
          return this.sorter.order;
        } else {
          return ORDER_NONE;
        }
      }
    }
  }, {
    key: "updateSorter",
    value: function updateSorter(columnKey) {
      //if sorter is empty, create it
      if (Object.keys(this.sorter).length === 0) {
        this.sorter = new Sorter();
      }

      this.sorter.toggle(columnKey);
    }
  }, {
    key: "updateFilter",
    value: function updateFilter(filter) {
      var index = -1;

      for (var i = this.filters.length - 1; i >= 0; i--) {
        if (this.filters[i].by === filter.by) {
          index = i;
          break;
        }
      } //1. if not exist, we just add


      if (index === -1) {
        this.filters.push(filter);
      } else {
        //2. if exist, we need to update
        //2.1, if value is empty, we remove it1
        var toRemove = false;

        if (filter.operator === TYPE_CONTAINS || filter.operator === TYPE_EQUALS || filter.operator === TYPE_GREATER_OR_EQUAL || filter.operator === TYPE_LESS_OR_EQUAL) {
          if (filter.value1 === "" || filter.value1 === undefined || filter.value1 == null) {
            //remove this
            toRemove = true;
          }
        } else {
          if (filter.operator === TYPE_IN) {
            if (filter.value1.length === 0) {
              //if empty list item, let's just remove it
              toRemove = true;
            } else {
              //let's remove filter
              this.filters.splice(index, 1);
              toRemove = false;
            }
          } else if (filter.value1 === "" || filter.value1 === undefined || filter.value1 == null || filter.value2 === "" || filter.value2 === undefined || filter.value2 == null) toRemove = true;
        }

        if (toRemove) {
          this.filters.splice(index, 1);
        } else {
          //toUpdate
          this.filters[index] = filter;
        }
      }
    }
  }, {
    key: "getFilterFor",
    value: function getFilterFor(colKey) {
      return this.filters.find(function (filter) {
        return filter.by === colKey;
      });
    }
  }]);

  return CustomConfig;
}();


var ORDER_ASC = "asc";
var ORDER_DESC = "desc";
var ORDER_NONE = "none";
var Sorter = /*#__PURE__*/function () {
  function Sorter(data) {
    _classCallCheck(this, Sorter);

    if (data) {
      this.by = "by" in data ? data["by"] : "";
      this.order = "order" in data ? data["order"] : ORDER_ASC;
    } else {
      this.by = "";
      this.order = "";
    }
  }

  _createClass(Sorter, [{
    key: "toggle",
    value: function toggle(columnKey) {
      if (this.by !== columnKey) {
        this.resetSort(columnKey);
      } else {
        this.toggleSort();
      }
    }
  }, {
    key: "resetSort",
    value: function resetSort(columnKey) {
      this.by = columnKey;
      this.order = ORDER_ASC;
    }
  }, {
    key: "toggleSort",
    value: function toggleSort() {
      var nextOrder;

      if (this.order === ORDER_ASC) {
        nextOrder = ORDER_DESC;
      } else if (this.order === ORDER_DESC) {
        nextOrder = ORDER_NONE;
      } else {
        nextOrder = ORDER_ASC;
      }

      this.order = nextOrder;
    }
  }]);

  return Sorter;
}();
var TYPE_CONTAINS = "contains";
var TYPE_EQUALS = "equals";
var TYPE_GREATER_OR_EQUAL = "greater_or_equal";
var TYPE_LESS_OR_EQUAL = "less_or_equal";
var TYPE_BETWEEN = "between";
var TYPE_NUMBER = "number";
var TYPE_IN = "in";
var Filter = /*#__PURE__*/function () {
  function Filter(data) {
    _classCallCheck(this, Filter);

    this.by = "by" in data ? data.by : "";
    this.operator = "operator" in data ? data.operator : "";
    this.value1 = "value1" in data ? data["value1"] : "";
    this.value2 = "value2" in data ? data["value2"] : "";
  }

  _createClass(Filter, [{
    key: "inValid",
    value: function inValid() {
      if (this.operator === TYPE_BETWEEN) {
        var errorCode = false;

        if (!this.value1) {
          errorCode = 'Start datetime missing';
        } else if (!this.value2) {
          errorCode = 'End datetime missing';
        } else if (this.value1 > this.value2) {
          errorCode = 'End datetime before start datetime';
        }

        return errorCode;
      }
    }
  }]);

  return Filter;
}();

/***/ }),

/***/ "./src/components/data_table/entities/more_option.js":
/*!***********************************************************!*\
  !*** ./src/components/data_table/entities/more_option.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MoreOptionItems; });
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MoreOptionItem = function MoreOptionItem(item) {
  _classCallCheck(this, MoreOptionItem);

  if (typeof item === 'string') {
    this['value'] = item;
    this['title'] = item;
  } else {
    this['value'] = item['value'];
    this['title'] = item['title'];
  }
};

var MoreOptionItems = /*#__PURE__*/function () {
  function MoreOptionItems(list) {
    var _this = this;

    _classCallCheck(this, MoreOptionItems);

    this['moreOptionItems'] = [];

    if (list) {
      list.forEach(function (item) {
        _this['moreOptionItems'].push(new MoreOptionItem(item));
      });
    }
  }

  _createClass(MoreOptionItems, [{
    key: "findByValue",
    value: function findByValue(value) {
      var foundItem = null;
      this['moreOptionItems'].forEach(function (item) {
        if (item.value == value) {
          foundItem = item;
        }
      });
      return foundItem;
    }
  }]);

  return MoreOptionItems;
}();



/***/ }),

/***/ "./src/components/data_table/entities/page.js":
/*!****************************************************!*\
  !*** ./src/components/data_table/entities/page.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Page; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Page = /*#__PURE__*/function () {
  function Page(data) {
    _classCallCheck(this, Page);

    if (data) {
      this["total"] = "total" in data ? data["total"] : 0;
      this["pageSize"] = "pageSize" in data ? data["pageSize"] : 20;
      this["currentPage"] = "currentPage" in data ? data["currentPage"] : 1;
      this["totalPage"] = 0;
    } else {
      this["total"] = 0;
      this["pageSize"] = 20;
      this["currentPage"] = 1;
      this["totalPage"] = 0;
    }
  }

  _createClass(Page, [{
    key: "reset",
    value: function reset() {
      this.total = 0;
      this.currentPage = 1;
      this.totalPage = 0;
    }
  }, {
    key: "setTotal",
    value: function setTotal(total) {
      this.total = total;

      if (total % this.pageSize === 0) {
        this.totalPage = total / this.pageSize;
      } else {
        this.totalPage = Math.ceil(total / this.pageSize);
      }
    }
  }, {
    key: "setCurrentPage",
    value: function setCurrentPage(page) {
      this.currentPage = page;
    }
  }, {
    key: "getPageRange",
    value: function getPageRange() {
      var start = this.pageSize * (this.currentPage - 1) + 1;
      var end = Math.min(this.pageSize * this.currentPage, this.total);
      return [start, end];
    }
  }, {
    key: "isFirstEnabled",
    value: function isFirstEnabled() {
      return this.currentPage !== 1;
    }
  }, {
    key: "isPreEnabled",
    value: function isPreEnabled() {
      return this.currentPage > 1;
    }
  }, {
    key: "isNextEnabled",
    value: function isNextEnabled() {
      return this.currentPage < this.totalPage;
    }
  }, {
    key: "isLastEnabled",
    value: function isLastEnabled() {
      return this.currentPage !== this.totalPage;
    }
  }, {
    key: "first",
    value: function first() {
      this.currentPage = 1;
    }
  }, {
    key: "pre",
    value: function pre() {
      this.currentPage--;
    }
  }, {
    key: "next",
    value: function next() {
      if (this.currentPage < this.totalPage) this.currentPage++;
    }
  }, {
    key: "last",
    value: function last() {
      this.currentPage = this.totalPage;
    }
  }]);

  return Page;
}();



/***/ }),

/***/ "./src/components/data_table/entities/table.js":
/*!*****************************************************!*\
  !*** ./src/components/data_table/entities/table.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Table; });
/* harmony import */ var _column__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./column */ "./src/components/data_table/entities/column.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var Table = /*#__PURE__*/function () {
  function Table(data) {
    var _this = this;

    _classCallCheck(this, Table);

    this['rowHeight'] = 'rowHeight' in data ? data.rowHeight : 50;
    this['headerHeight'] = 'headerHeight' in data ? data.headerHeight : 60;
    this['width'] = 'width' in data ? data.width : 800;
    this['height'] = 'height' in data ? data.height : 400;
    this["enableCheckBox"] = "enableCheckBox" in data ? data["enableCheckBox"] : false;
    this['enableRadioButton'] = 'enableRadioButton' in data ? data.enableRadioButton : false;
    this["enablePaginator"] = "enablePaginator" in data ? data["enablePaginator"] : false;
    this['pageSize'] = 'pageSize' in data ? data.pageSize : 20;
    this["rowExpandable"] = "rowExpandable" in data ? data.rowExpandable : false;
    this["rowCollapseable"] = "rowCollapseable" in data ? data["rowCollapseable"] : false;
    this["collapseRowHeight"] = "collapseRowHeight" in data ? data["collapseRowHeight"] : 50;
    this["singleRowToggleable"] = "singleRowToggleable" in data ? data.singleRowToggleable : false;
    this["theme"] = "theme" in data ? data.theme : "light";
    this["global"] = "global" in data ? data.global : false;

    if (this["global"] === false) {
      this['tableSearch'] = 'tableSearch' in data ? data.tableSearch : false;
    } else {
      this['tableSearch'] = false;
    }

    this['hideSetting'] = 'hideSetting' in data ? data['hideSetting'] : false;
    this["navigateable"] = "navigateable" in data ? data.navigateable : false;
    this["columns"] = [];
    var index = 0;
    data["columns"].forEach(function (col) {
      _this["columns"].push(new _column__WEBPACK_IMPORTED_MODULE_0__["default"](col, index));

      index++;
    });
    this['downloadable'] = 'downloadable' in data ? data.downloadable : false;
    this['listDeliminator'] = 'listDeliminator' in data ? data.listDeliminator : ',';
    this['totalTitle'] = 'totalTitle' in data ? data.totalTitle : '';
    this['enableAllGlobalSelector'] = 'enableAllGlobalSelector' in data ? data.enableAllGlobalSelector : false;
    this['deCoupleRowSelectAndCheckbox'] = 'deCoupleRowSelectAndCheckbox' in data ? data.deCoupleRowSelectAndCheckbox : false;
    this['listView'] = 'listView' in data ? data.listView : false;

    if (this['listView']) {
      this["rowHeight"] += 10;
    }

    this['hideTotal'] = 'hideTotal' in data ? data.hideTotal : false;
    this['enforceResetFilterBtn'] = 'enforceResetFilterBtn' in data ? data.enforceResetFilterBtn : false;
  }

  _createClass(Table, [{
    key: "getColumnsOrder",
    value: function getColumnsOrder() {
      var columnKeys = [];
      this.columns.forEach(function (column) {
        columnKeys.push(column.key);
      });
      return columnKeys;
    }
  }, {
    key: "getVisibleColumnsOrder",
    value: function getVisibleColumnsOrder() {
      var columnKeys = [];
      this.columns.forEach(function (column) {
        if (!column.hidden) columnKeys.push(column.key);
      });
      return columnKeys;
    }
  }, {
    key: "getColumnConfig",
    value: function getColumnConfig(key) {
      var config = null;
      this.columns.forEach(function (column) {
        if (column.key === key) {
          config = column;
        }
      });
      return config;
    }
  }, {
    key: "getPrimaryColumnKey",
    value: function getPrimaryColumnKey() {
      var key = "";
      this["columns"].forEach(function (col) {
        if (col.primaryKey) {
          key = col.key;
        }
      });
      return key;
    }
  }, {
    key: "columnHidden",
    value: function columnHidden(columnKey) {
      return this.getColumnConfig(columnKey) ? this.getColumnConfig(columnKey).hidden : true;
    }
  }, {
    key: "columnToBeDownloaded",
    value: function columnToBeDownloaded(columnKey) {
      var cfg = this.getColumnConfig(columnKey);

      if (!cfg) {
        // TODO: Check the logic: column is not there, then don't download
        return false;
      }

      if ('downloadStandard' in cfg && cfg.downloadStandard !== '') {
        if (cfg.downloadStandard === 'never') {
          return false;
        } else if (cfg.downloadStandard === 'always') {
          return true;
        }
      }

      if (cfg.type === 'text' || cfg.type === 'html' || cfg.type === 'pure_text') {
        return !this.columnHidden(columnKey);
      } else {
        return false;
      }
    }
  }, {
    key: "getHiddenColumnKeys",
    value: function getHiddenColumnKeys() {
      var keys = [];
      this["columns"].forEach(function (col) {
        if (col.hidden) {
          keys.push(col.key);
        }
      });
      return keys;
    }
  }, {
    key: "updateColumnWidth",
    value: function updateColumnWidth(colKey, width) {
      this["columns"].forEach(function (col) {
        if (col.key === colKey) {
          col.width = width;
        }
      });
    }
  }]);

  return Table;
}();



/***/ }),

/***/ "./src/components/data_table/redux/ActionType.js":
/*!*******************************************************!*\
  !*** ./src/components/data_table/redux/ActionType.js ***!
  \*******************************************************/
/*! exports provided: DATA_UPDATED, CELL_DATA_UPDATED, RESIZING, CONFIG_UPDATE, CUSTOM_CONFIG_UPDATE, ROW_ALL_SELECTED, ROW_SELECTED, SINGLE_ROW_SELECTED, RAW_ACTION_SELECTED, SET_COLUMN_HIDDEN, SET_COLUMNS_HIDDEN, SORT_COLUMN, FILTER_UPDATE, UPDATE_THEME, TOGGLE_ALL_ROWS, PAGE_UPDATE, UPDATE_SINGLE_SELECTED_ACTION, SELECT_ALL_LEVEL, RESET_FILTER, SINGLE_ROW_SELECTED_WITH_KEY, SET_DOWNLOAD_DATA, TABLE_SEARCH, CHECKBOX_CHECKED, CLOSE_ALL_POPUP, CLOSE_ALL_FILTER_POPUP, UNCLICKABLE_CELLS_UPDATED, ORIGINAL_CONFIG_UPDATE, SCROLL_POSITION_UPDATE, GOTO_SCROLL_POSITION, SET_COLUMNS_HIDDEN_TEMP */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DATA_UPDATED", function() { return DATA_UPDATED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CELL_DATA_UPDATED", function() { return CELL_DATA_UPDATED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RESIZING", function() { return RESIZING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONFIG_UPDATE", function() { return CONFIG_UPDATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CUSTOM_CONFIG_UPDATE", function() { return CUSTOM_CONFIG_UPDATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ROW_ALL_SELECTED", function() { return ROW_ALL_SELECTED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ROW_SELECTED", function() { return ROW_SELECTED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SINGLE_ROW_SELECTED", function() { return SINGLE_ROW_SELECTED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RAW_ACTION_SELECTED", function() { return RAW_ACTION_SELECTED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SET_COLUMN_HIDDEN", function() { return SET_COLUMN_HIDDEN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SET_COLUMNS_HIDDEN", function() { return SET_COLUMNS_HIDDEN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SORT_COLUMN", function() { return SORT_COLUMN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FILTER_UPDATE", function() { return FILTER_UPDATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UPDATE_THEME", function() { return UPDATE_THEME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOGGLE_ALL_ROWS", function() { return TOGGLE_ALL_ROWS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_UPDATE", function() { return PAGE_UPDATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UPDATE_SINGLE_SELECTED_ACTION", function() { return UPDATE_SINGLE_SELECTED_ACTION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELECT_ALL_LEVEL", function() { return SELECT_ALL_LEVEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RESET_FILTER", function() { return RESET_FILTER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SINGLE_ROW_SELECTED_WITH_KEY", function() { return SINGLE_ROW_SELECTED_WITH_KEY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SET_DOWNLOAD_DATA", function() { return SET_DOWNLOAD_DATA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TABLE_SEARCH", function() { return TABLE_SEARCH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHECKBOX_CHECKED", function() { return CHECKBOX_CHECKED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CLOSE_ALL_POPUP", function() { return CLOSE_ALL_POPUP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CLOSE_ALL_FILTER_POPUP", function() { return CLOSE_ALL_FILTER_POPUP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UNCLICKABLE_CELLS_UPDATED", function() { return UNCLICKABLE_CELLS_UPDATED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ORIGINAL_CONFIG_UPDATE", function() { return ORIGINAL_CONFIG_UPDATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SCROLL_POSITION_UPDATE", function() { return SCROLL_POSITION_UPDATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GOTO_SCROLL_POSITION", function() { return GOTO_SCROLL_POSITION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SET_COLUMNS_HIDDEN_TEMP", function() { return SET_COLUMNS_HIDDEN_TEMP; });
var DATA_UPDATED = "DATA_UPDATED";
var CELL_DATA_UPDATED = "CELL_DATA_UPDATED";
var RESIZING = "RESIZING";
var CONFIG_UPDATE = "CONFIG_UPDATE";
var CUSTOM_CONFIG_UPDATE = "CUSTOM_CONFIG_UPDATE";
var ROW_ALL_SELECTED = "ROW_ALL_SELECTED";
var ROW_SELECTED = "ROW_SELECTED";
var SINGLE_ROW_SELECTED = "SINGLE_ROW_SELECTED";
var RAW_ACTION_SELECTED = "RAW_ACTION_SELECTED";
var SET_COLUMN_HIDDEN = "SET_COLUMN_HIDDEN";
var SET_COLUMNS_HIDDEN = "SET_COLUMNS_HIDDEN";
var SORT_COLUMN = "SORT_COLUMN";
var FILTER_UPDATE = "FILTER_UPDATE";
var UPDATE_THEME = "UPDATE_THEME";
var TOGGLE_ALL_ROWS = "TOGGLE_ALL_ROWS";
var PAGE_UPDATE = "PAGE_UPDATE";
var UPDATE_SINGLE_SELECTED_ACTION = "UPDATE_SINGLE_SELECTED_ACTION";
var SELECT_ALL_LEVEL = "SELECT_ALL_LEVEL";
var RESET_FILTER = "RESET_FILTER";
var SINGLE_ROW_SELECTED_WITH_KEY = "SINGLE_ROW_SELECTED_WITH_KEY";
var SET_DOWNLOAD_DATA = 'SET_DOWNLOAD_DATA';
var TABLE_SEARCH = "TABLE_SEARCH";
var CHECKBOX_CHECKED = "CHECKBOX_CHECKED";
var CLOSE_ALL_POPUP = 'CLOSE_ALL_POPUP';
var CLOSE_ALL_FILTER_POPUP = 'CLOSE_ALL_FILTER_POPUP';
var UNCLICKABLE_CELLS_UPDATED = 'UNCLICKABLE_CELLS_UPDATED';
var ORIGINAL_CONFIG_UPDATE = 'ORIGINAL_CONFIG_UPDATE';
var SCROLL_POSITION_UPDATE = 'SCROLL_POSITION_UPDATE';
var GOTO_SCROLL_POSITION = 'GOTO_SCROLL_POSITION';
var SET_COLUMNS_HIDDEN_TEMP = 'SET_COLUMNS_HIDDEN_TEMP';

/***/ }),

/***/ "./src/components/data_table/redux/actions.js":
/*!****************************************************!*\
  !*** ./src/components/data_table/redux/actions.js ***!
  \****************************************************/
/*! exports provided: tableSearched, gotoScrollPosition, setUpdatedScrollPosition, setOriginalConfig, setDownloadData, setUpdatedData, setUpdatedCellData, resizingTable, setUpdatedConfig, setCustomConfig, setRowAllSelected, setRowSelected, setSingleRowSelected, setSingleRowSelectedWithKey, setSingleSelectedAction, setRowActionSelected, setColumnHidden, setColumnsHidden, setColumnSort, updateFilter, resetFilter, udpateTheme, toggleAllRows, updatePage, setSelectAllLevel, setTableSearchTerm, rowCheckboxChanged, closeAllPopUp, closeAllFilterPopUp, updateUnClickableCells, updateColumnHiddenTemp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tableSearched", function() { return tableSearched; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gotoScrollPosition", function() { return gotoScrollPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setUpdatedScrollPosition", function() { return setUpdatedScrollPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setOriginalConfig", function() { return setOriginalConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setDownloadData", function() { return setDownloadData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setUpdatedData", function() { return setUpdatedData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setUpdatedCellData", function() { return setUpdatedCellData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resizingTable", function() { return resizingTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setUpdatedConfig", function() { return setUpdatedConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setCustomConfig", function() { return setCustomConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setRowAllSelected", function() { return setRowAllSelected; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setRowSelected", function() { return setRowSelected; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setSingleRowSelected", function() { return setSingleRowSelected; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setSingleRowSelectedWithKey", function() { return setSingleRowSelectedWithKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setSingleSelectedAction", function() { return setSingleSelectedAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setRowActionSelected", function() { return setRowActionSelected; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setColumnHidden", function() { return setColumnHidden; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setColumnsHidden", function() { return setColumnsHidden; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setColumnSort", function() { return setColumnSort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateFilter", function() { return updateFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resetFilter", function() { return resetFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "udpateTheme", function() { return udpateTheme; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toggleAllRows", function() { return toggleAllRows; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updatePage", function() { return updatePage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setSelectAllLevel", function() { return setSelectAllLevel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setTableSearchTerm", function() { return setTableSearchTerm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rowCheckboxChanged", function() { return rowCheckboxChanged; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closeAllPopUp", function() { return closeAllPopUp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closeAllFilterPopUp", function() { return closeAllFilterPopUp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateUnClickableCells", function() { return updateUnClickableCells; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateColumnHiddenTemp", function() { return updateColumnHiddenTemp; });
/* harmony import */ var _ActionType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ActionType */ "./src/components/data_table/redux/ActionType.js");

var tableSearched = function tableSearched(term) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["TABLE_SEARCH"],
    payload: term
  };
};
var gotoScrollPosition = function gotoScrollPosition(scrollX, scrollY) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["GOTO_SCROLL_POSITION"],
    payload: [scrollX, scrollY]
  };
};
var setUpdatedScrollPosition = function setUpdatedScrollPosition(scrollX, scrollY) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SCROLL_POSITION_UPDATE"],
    payload: [scrollX, scrollY]
  };
};
var setOriginalConfig = function setOriginalConfig(config) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["ORIGINAL_CONFIG_UPDATE"],
    payload: config
  };
};
var setDownloadData = function setDownloadData(dataList) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_DOWNLOAD_DATA"],
    payload: dataList
  };
};
var setUpdatedData = function setUpdatedData(dataList) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["DATA_UPDATED"],
    payload: dataList
  };
};
var setUpdatedCellData = function setUpdatedCellData(rowKeyVal, columnKey, value) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["CELL_DATA_UPDATED"],
    payload: [rowKeyVal, columnKey, value]
  };
};
var resizingTable = function resizingTable(width) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["RESIZING"],
    payload: width
  };
};
var setUpdatedConfig = function setUpdatedConfig(config) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["CONFIG_UPDATE"],
    payload: config
  };
};
var setCustomConfig = function setCustomConfig(config) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["CUSTOM_CONFIG_UPDATE"],
    payload: config
  };
};
var setRowAllSelected = function setRowAllSelected(selected) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["ROW_ALL_SELECTED"],
    payload: selected
  };
};
var setRowSelected = function setRowSelected(rowIndex) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["ROW_SELECTED"],
    payload: rowIndex
  };
};
var setSingleRowSelected = function setSingleRowSelected(rowIndex) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SINGLE_ROW_SELECTED"],
    payload: rowIndex
  };
};
var setSingleRowSelectedWithKey = function setSingleRowSelectedWithKey(rowKey) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SINGLE_ROW_SELECTED_WITH_KEY"],
    payload: rowKey
  };
};
var setSingleSelectedAction = function setSingleSelectedAction(rowIndex, columnKey, newValue) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["UPDATE_SINGLE_SELECTED_ACTION"],
    payload: [rowIndex, columnKey, newValue]
  };
};
var setRowActionSelected = function setRowActionSelected(rowIndex, action) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["RAW_ACTION_SELECTED"],
    payload: [rowIndex, action]
  };
};
var setColumnHidden = function setColumnHidden(columnKey, hidden) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_COLUMN_HIDDEN"],
    payload: [columnKey, hidden]
  };
};
var setColumnsHidden = function setColumnsHidden(object) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_COLUMNS_HIDDEN"],
    payload: object
  };
};
var setColumnSort = function setColumnSort(columnKey) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SORT_COLUMN"],
    payload: columnKey
  };
};
var updateFilter = function updateFilter(filter) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["FILTER_UPDATE"],
    payload: filter
  };
};
var resetFilter = function resetFilter() {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["RESET_FILTER"]
  };
};
var udpateTheme = function udpateTheme(theme) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["UPDATE_THEME"],
    payload: theme
  };
};
var toggleAllRows = function toggleAllRows() {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["TOGGLE_ALL_ROWS"]
  };
};
var updatePage = function updatePage(page) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["PAGE_UPDATE"],
    payload: page
  };
};
var setSelectAllLevel = function setSelectAllLevel(level) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SELECT_ALL_LEVEL"],
    payload: level
  };
};
var setTableSearchTerm = function setTableSearchTerm(term) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["TABLE_SEARCH"],
    payload: term
  };
};
var rowCheckboxChanged = function rowCheckboxChanged(rowIndex, selected) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["CHECKBOX_CHECKED"],
    payload: [rowIndex, selected]
  };
};
var closeAllPopUp = function closeAllPopUp() {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["CLOSE_ALL_POPUP"]
  };
};
var closeAllFilterPopUp = function closeAllFilterPopUp() {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["CLOSE_ALL_FILTER_POPUP"]
  };
};
var updateUnClickableCells = function updateUnClickableCells(obj) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["UNCLICKABLE_CELLS_UPDATED"],
    payload: obj
  };
};
var updateColumnHiddenTemp = function updateColumnHiddenTemp(obj) {
  return {
    type: _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_COLUMNS_HIDDEN_TEMP"],
    payload: obj
  };
};

/***/ }),

/***/ "./src/components/data_table/redux/reducer.js":
/*!****************************************************!*\
  !*** ./src/components/data_table/redux/reducer.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ActionType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ActionType */ "./src/components/data_table/redux/ActionType.js");
/* harmony import */ var _services_table_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/table_service */ "./src/components/data_table/services/table_service.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }




var DataTableReducer = function DataTableReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;
  var newState;
  var service = new _services_table_service__WEBPACK_IMPORTED_MODULE_1__["default"]();
  var config = state.config;
  var customConfig = state.customConfig;

  switch (action.type) {
    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["ORIGINAL_CONFIG_UPDATE"]:
      newState = Object.assign({}, state, {
        originalConfig: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_DOWNLOAD_DATA"]:
      newState = Object.assign({}, state, {
        downloadDataList: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["DATA_UPDATED"]:
      newState = Object.assign({}, state, {
        dataList: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["RESIZING"]:
      newState = Object.assign({}, state, {
        width: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["CONFIG_UPDATE"]:
      newState = Object.assign({}, state, {
        config: action.payload,
        defaultColumns: service.getDefaultColumns(action.payload.columns)
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["CUSTOM_CONFIG_UPDATE"]:
      newState = Object.assign({}, state, {
        //here we need to fix customConfig automatially, as sometimes, customer config saved non-existing columns
        customConfig: service.fixingCustomerConfig(action.payload, state.dataList),
        // once customer config updated, we need to merge back to table config
        config: service.mergeCustomerConfig(state.config, action.payload)
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["ROW_ALL_SELECTED"]:
      newState = Object.assign({}, state, {
        rowAllSelected: action.payload,
        selectedRowKeys: service.generateAllSelectedRowKeys(state.config, state.dataList, action.payload)
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["ROW_SELECTED"]:
      if (action.payload >= 0) {
        newState = Object.assign({}, state, {
          selectedRowKeys: service.generateSelectedRowKeys(state.config, state.dataList, !state.config.enableRadioButton ? state.selectedRowKeys : [], action.payload)
        });
      } else {
        newState = Object.assign({}, state, {
          rowAllSelected: false,
          selectedRowKeys: []
        });
      }

      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SINGLE_ROW_SELECTED"]:
      newState = Object.assign({}, state, {
        selectedRowKeys: service.generateSingleSelectedRowKeys(state.config, state.dataList, !state.config.enableRadioButton ? state.selectedRowKeys : [], action.payload)
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SINGLE_ROW_SELECTED_WITH_KEY"]:
      var currentRowKeys = state.selectedRowKeys;
      currentRowKeys.push(action.payload);
      newState = Object.assign({}, state, {
        selectedRowKeys: currentRowKeys
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["UPDATE_SINGLE_SELECTED_ACTION"]:
      var updatedResults = service.updateSingleSelectedRowAction.apply(service, [state].concat(_toConsumableArray(action.payload)));
      newState = Object.assign({}, state, {
        dataList: updatedResults[0],
        originalDataList: updatedResults[1],
        rowkeyVal: updatedResults[2],
        oldColumnKey: updatedResults[3],
        oldValue: updatedResults[4]
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["RAW_ACTION_SELECTED"]:
      newState = Object.assign({}, state, {
        rowActionSelected: service.updateRowActionSelected(action.payload[0], action.payload[1], state)
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_COLUMN_HIDDEN"]:
      config.columns = service.setColumnHidden(action.payload[0], action.payload[1], config.columns);
      newState = Object.assign({}, state, {
        config: config
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_COLUMNS_HIDDEN"]:
      config.columns = service.setColumnsHidden(action.payload, config.columns);
      newState = Object.assign({}, state, {
        config: config
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SORT_COLUMN"]:
      customConfig.updateSorter(action.payload);
      newState = Object.assign({}, state, {
        customConfig: customConfig
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["FILTER_UPDATE"]:
      customConfig.updateFilter(action.payload);
      newState = Object.assign({}, state, {
        customConfig: customConfig
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["RESET_FILTER"]:
      customConfig.filters = [];
      newState = Object.assign({}, state, {
        customConfig: customConfig
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["UPDATE_THEME"]:
      config.theme = action.payload;
      newState = Object.assign({}, state, {
        config: config
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["TOGGLE_ALL_ROWS"]:
      newState = Object.assign({}, state, {
        allOpened: !state.allOpened
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["PAGE_UPDATE"]:
      newState = Object.assign({}, state, {
        page: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["CELL_DATA_UPDATED"]:
      var updatedResults = service.updateSingleCellValue.apply(service, [state].concat(_toConsumableArray(action.payload)));
      newState = Object.assign({}, state, {
        dataList: updatedResults[0],
        originalDataList: updatedResults[1],
        passedInCellData: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SELECT_ALL_LEVEL"]:
      newState = Object.assign({}, state, {
        selectAllLevel: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["CHECKBOX_CHECKED"]:
      var checkedRows = service.generateCheckedRowKeys(state.config, state.dataList, !state.config.enableRadioButton ? state.checkedRowKeys : [], action.payload);
      newState = Object.assign({}, state, {
        checkedRowKeys: checkedRows
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["UNCLICKABLE_CELLS_UPDATED"]:
      newState = Object.assign({}, state, {
        unClickableCells: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SCROLL_POSITION_UPDATE"]:
      newState = Object.assign({}, state, {
        scrollPosition: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["GOTO_SCROLL_POSITION"]:
      newState = Object.assign({}, state, {
        scrollPosition: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["TABLE_SEARCH"]:
      newState = Object.assign({}, state, {
        tableSearchedTerm: action.payload
      });
      break;

    case _ActionType__WEBPACK_IMPORTED_MODULE_0__["SET_COLUMNS_HIDDEN_TEMP"]:
      newState = Object.assign({}, state, {
        columnHiddenTmp: action.payload
      });
      break;

    default:
      newState = Object.assign({}, state);
  }

  return newState;
};

/* harmony default export */ __webpack_exports__["default"] = (DataTableReducer);

/***/ }),

/***/ "./src/components/data_table/redux/store.js":
/*!**************************************************!*\
  !*** ./src/components/data_table/redux/store.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actions */ "./src/components/data_table/redux/actions.js");
/* harmony import */ var _reducer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./reducer */ "./src/components/data_table/redux/reducer.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




var Store = /*#__PURE__*/function () {
  function Store(appId, reducer) {
    _classCallCheck(this, Store);

    this.CONFIG_UPDATE = "CONFIG_UPDATE";
    this.DATA_UPDATED = "DATA_UPDATED";
    this.CELL_DATA_UPDATED = "CELL_DATA_UPDATED";
    this.RESIZING = "RESIZING";
    this.CUSTOM_CONFIG_UPDATE = "CUSTOM_CONFIG_UPDATE";
    this.ROW_ALL_SELECTED = "ROW_ALL_SELECTED";
    this.ROW_SELECTED = "ROW_SELECTED";
    this.SINGLE_ROW_SELECTED = "SINGLE_ROW_SELECTED";
    this.RESET_DATA = "RESET_DATA";
    this.RAW_ACTION_SELECTED = "RAW_ACTION_SELECTED";
    this.SET_COLUMN_HIDDEN = "SET_COLUMN_HIDDEN";
    this.SET_COLUMNS_HIDDEN = "SET_COLUMNS_HIDDEN";
    this.SORT_COLUMN = "SORT_COLUMN";
    this.FILTER_UPDATE = "FILTER_UPDATE";
    this.UPDATE_THEME = "UPDATE_THEME";
    this.TOGGLE_ALL_ROWS = "TOGGLE_ALL_ROWS";
    this.PAGE_UPDATE = "PAGE_UPDATE";
    this.UPDATE_SINGLE_SELECTED_ACTION = "UPDATE_SINGLE_SELECTED_ACTION";
    this.ICON_CELL_CLICKED_ACTION = "ICON_CELL_CLICKED_ACTION";
    this.SELECT_ALL_LEVEL = 'SELECT_ALL_LEVEL';
    this.SINGLE_ROW_SELECTED_WITH_KEY = 'SINGLE_ROW_SELECTED_WITH_KEY';
    this.SELECT_ALL_COLUMNS = "SELECT_ALL_COLUMNS";
    this.SELECT_DEFAULT_COLUMNS = "DELECT_DEFAULT_COLUMNS";
    this.TABLE_SEARCH = "TABLE_SEARCH";
    this.SET_DOWNLOAD_DATA = "SET_DOWNLOAD_DATA";
    this.CHECKBOX_CHECKED = "CHECKBOX_CHECKED";
    this.CLOSE_ALL_POPUP = 'CLOSE_ALL_POPUP';
    this.CLOSE_ALL_FILTER_POPUP = 'CLOSE_ALL_FILTER_POPUP';
    this.UNCLICKABLE_CELLS_UPDATED = 'UNCLICKABLE_CELLS_UPDATED';
    this.ORIGINAL_CONFIG_UPDATE = 'ORIGINAL_CONFIG_UPDATE';
    this.SCROLL_POSITION_UPDATE = 'SCROLL_POSITION_UPDATE';
    this.GOTO_SCROLL_POSITION = 'GOTO_SCROLL_POSITION';
    this.SET_COLUMNS_HIDDEN_TEMP = 'SET_COLUMNS_HIDDEN_TEMP';
    this._appId = appId;
    this._state = {
      config: null,
      originalDataList: null,
      originalConfig: null,
      //used to save original table config
      dataList: [],
      customConfig: null,
      width: 0,
      rowAllSelected: false,
      selectedRowKeys: [],
      checkedRowKeys: [],
      rowActionSelected: {},
      allOpened: false,
      defaultColumns: [],
      passedInCellData: null,
      //used to save passed in cell data, for resetting purpose
      page: null,
      //this is page object, not number
      globalAll: false,
      selectAllLevel: 0,
      downloadDataList: [],
      globalDownloadConfig: null,
      unClickableCells: {},
      // used to define which cells are NOT clickable, key-columnKey, value-[key list]
      scrollPosition: [0, 0],
      //remember previous scrollPosition
      tableSearchedTerm: '',
      columnHiddenTmp: {} //temprarily save column hidden status before user click save button

    };
    this._listeners = [];
    this._listenersFor = {};
    this._reducer = reducer;
    this.passedBackParams = null;
  }

  _createClass(Store, [{
    key: "getState",
    value: function getState() {
      return this._state;
    }
  }, {
    key: "dispatch",
    value: function dispatch(action) {
      var _this = this;

      this._state = this._reducer(this._state, action);

      this._listeners.forEach(function (listener) {
        return listener(_this._state);
      });
    }
  }, {
    key: "subscribe",
    value: function subscribe(listener) {
      var _this2 = this;

      this._listeners.push(listener); //this return is used for return unsubscrib call back for purpose of removing listeners


      return function () {
        getStore(_this2._appId)._listeners = getStore(_this2._appId)._listeners.filter(function (l) {
          return l !== listener;
        });
      };
    }
  }, {
    key: "dispatchFor",
    value: function dispatchFor(type, action) {
      var _this3 = this;

      this._state = this._reducer(this._state, action);
      if (type in this._listenersFor) this._listenersFor[type].forEach(function (listener) {
        return listener(_this3._state);
      });
    }
  }, {
    key: "subscribeTo",
    value: function subscribeTo(type, listener) {
      var _this4 = this;

      if (!(type in this._listenersFor)) {
        this._listenersFor[type] = [];
      }

      this._listenersFor[type].push(listener);

      return function () {
        getStore(_this4._appId)._listenersFor[type] = getStore(_this4._appId)._listenersFor[type].filter(function (l) {
          return l !== listener;
        });
      };
    }
  }, {
    key: "setTotalRecords",
    value: function setTotalRecords(total) {
      var page = this._state["page"];
      page.setTotal(total);
      this.dispatchFor(this.PAGE_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updatePage"])(page));
    }
  }, {
    key: "setUpdatedData",
    value: function setUpdatedData(resultsObj) {
      var _this5 = this;

      var asOriginal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var overWriteSelectedKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      //UI-2976 - Reset Pre-Selected columns when data is updated
      if (overWriteSelectedKeys) {
        this.setDefaultSelectedRowKeys([]); //clear all pre-selected rowKeys

        setTimeout(function () {
          _this5.setRowAllSelected(false);
        });
      } //handler data input: contains total and dataList field


      if ("total" in resultsObj) {
        var total = resultsObj["total"];
        var page = this._state["page"];
        page.setTotal(total);
        this.dispatchFor(this.PAGE_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updatePage"])(page));
      } else {
        var _page = this._state["page"];
        setTimeout(function () {
          _this5.dispatchFor(_this5.PAGE_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updatePage"])(_page));
        });
      }

      var list = resultsObj["dataList"];

      if (asOriginal) {
        this._state.originalDataList = list;
      }

      this.dispatchFor(this.DATA_UPDATED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setUpdatedData"])(list));
      this.closeAllPopUp();
    }
  }, {
    key: "setUpdatedCellValue",
    value: function setUpdatedCellValue(rowKey, columnKey, value) {
      this.dispatchFor(this.CELL_DATA_UPDATED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setUpdatedCellData"])(rowKey, columnKey, value));
    }
  }, {
    key: "setAppendedData",
    value: function setAppendedData(resultsObj) {
      //handler data input: contains total and dataList field
      if ("total" in resultsObj) {
        var total = resultsObj["total"];
        var page = this._state["page"];
        page.setTotal(total);
        this.dispatchFor(this.PAGE_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updatePage"])(page));
      }

      var list = resultsObj["dataList"];
      this._state.originalDataList = this._state.originalDataList.concat(list);
      list = this._state.dataList.concat(list);
      this.dispatchFor(this.DATA_UPDATED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setUpdatedData"])(list));
      this.closeAllPopUp();
    }
  }, {
    key: "setOriginalTableConfig",
    value: function setOriginalTableConfig(config) {
      this.dispatchFor(this.ORIGINAL_CONFIG_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setOriginalConfig"])(config));
    }
  }, {
    key: "setUpdatedTableConfig",
    value: function setUpdatedTableConfig(config) {
      this.dispatchFor(this.CONFIG_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setUpdatedConfig"])(config));
    }
  }, {
    key: "setNewTableWidth",
    value: function setNewTableWidth(width) {
      this.dispatchFor(this.RESIZING, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["resizingTable"])(width));
    }
  }, {
    key: "setCustomConfig",
    value: function setCustomConfig(config) {
      this.dispatchFor(this.CUSTOM_CONFIG_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setCustomConfig"])(config));
    }
  }, {
    key: "setRowAllSelected",
    value: function setRowAllSelected(allSelected) {
      this.dispatchFor(this.ROW_ALL_SELECTED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setRowAllSelected"])(allSelected));
    }
  }, {
    key: "toggleSingleRowSelected",
    value: function toggleSingleRowSelected(rowIndex) {
      this.dispatchFor(this.SINGLE_ROW_SELECTED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setSingleRowSelected"])(rowIndex));
    }
  }, {
    key: "toggleCheckBoxChanged",
    value: function toggleCheckBoxChanged(rowIndex, selected) {
      this.dispatchFor(this.CHECKBOX_CHECKED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["rowCheckboxChanged"])(rowIndex, selected));
    }
  }, {
    key: "toggleRowSelected",
    value: function toggleRowSelected(rowIndex) {
      this.dispatchFor(this.ROW_SELECTED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setRowSelected"])(rowIndex));
    }
  }, {
    key: "toggleRowSelectedWithKey",
    value: function toggleRowSelectedWithKey(rowKey) {
      this.dispatchFor(this.SINGLE_ROW_SELECTED_WITH_KEY, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setSingleRowSelectedWithKey"])(rowKey));
    }
  }, {
    key: "setRowActionSelected",
    value: function setRowActionSelected(rowIndex, action) {
      this.dispatchFor(this.RAW_ACTION_SELECTED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setRowActionSelected"])(rowIndex, action));
    }
  }, {
    key: "setColumnHidden",
    value: function setColumnHidden(columnKey, hidden) {
      this.dispatchFor(this.SET_COLUMN_HIDDEN, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setColumnHidden"])(columnKey, hidden));
    }
  }, {
    key: "setColumnsHidden",
    value: function setColumnsHidden(configObj) {
      this.dispatchFor(this.SET_COLUMNS_HIDDEN, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setColumnsHidden"])(configObj));
    }
  }, {
    key: "setColumnSort",
    value: function setColumnSort(columnKey) {
      this.dispatchFor(this.SORT_COLUMN, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setColumnSort"])(columnKey));
    }
  }, {
    key: "setFilter",
    value: function setFilter(filter) {
      this.dispatchFor(this.FILTER_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updateFilter"])(filter));
    }
  }, {
    key: "resetFilter",
    value: function resetFilter() {
      this.dispatchFor(this.FILTER_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["resetFilter"])());
    }
  }, {
    key: "setTheme",
    value: function setTheme(theme) {
      this.dispatchFor(this.UPDATE_THEME, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["udpateTheme"])(theme));
    }
  }, {
    key: "toggleAllRows",
    value: function toggleAllRows() {
      this.dispatchFor(this.TOGGLE_ALL_ROWS, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["toggleAllRows"])());
    }
  }, {
    key: "updatePage",
    value: function updatePage(pageObj) {
      this.dispatchFor(this.PAGE_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updatePage"])(pageObj));
    }
  }, {
    key: "updateSingleSelectAction",
    value: function updateSingleSelectAction(rowIndex, columnKey, newValue) {
      //below is to be returned
      this.passedBackParams = {
        rowIndex: rowIndex,
        columnKey: columnKey,
        newValue: newValue
      };
      this.dispatchFor(this.UPDATE_SINGLE_SELECTED_ACTION, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setSingleSelectedAction"])(rowIndex, columnKey, newValue));
    }
  }, {
    key: "updateIconDropDownContent",
    value: function updateIconDropDownContent(htmlContent) {
      if (this.ICON_CELL_CLICKED_ACTION in this._listenersFor) this._listenersFor[this.ICON_CELL_CLICKED_ACTION].forEach(function (listener) {
        return listener(htmlContent);
      });
    }
  }, {
    key: "triggerSelectAllColumns",
    value: function triggerSelectAllColumns(selected) {
      if (this.SELECT_ALL_COLUMNS in this._listenersFor) this._listenersFor[this.SELECT_ALL_COLUMNS].forEach(function (listener) {
        return listener(selected);
      });
    }
  }, {
    key: "triggerDefaultColumns",
    value: function triggerDefaultColumns(selected) {
      if (this.SELECT_DEFAULT_COLUMNS in this._listenersFor) this._listenersFor[this.SELECT_DEFAULT_COLUMNS].forEach(function (listener) {
        return listener(selected);
      });
    }
  }, {
    key: "resetAll",
    value: function resetAll() {
      this._listeners = [];
      this._listenersFor = {};
    }
  }, {
    key: "setSelectAllLevel",
    value: function setSelectAllLevel(level) {
      this.dispatchFor(this.SELECT_ALL_LEVEL, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setSelectAllLevel"])(level));
    }
  }, {
    key: "setGlobalSearchTerm",
    value: function setGlobalSearchTerm(term) {
      this.dispatchFor(this.TABLE_SEARCH, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["tableSearched"])(term));
    }
  }, {
    key: "setDefaultSelectedRowKeys",
    value: function setDefaultSelectedRowKeys(defaultRowKeys) {
      this._state.selectedRowKeys = defaultRowKeys;
    }
  }, {
    key: "setDownloadData",
    value: function setDownloadData(dataList) {
      this.dispatchFor(this.SET_DOWNLOAD_DATA, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setDownloadData"])(dataList));
    }
  }, {
    key: "setGlobalDownloadConfig",
    value: function setGlobalDownloadConfig(cfg) {
      this._state.globalDownloadConfig = cfg;
    }
  }, {
    key: "setUnClickableCells",
    value: function setUnClickableCells(obj) {
      // { colKey: [list of keys] }
      this.dispatchFor(this.UNCLICKABLE_CELLS_UPDATED, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updateUnClickableCells"])(obj));
    }
  }, {
    key: "closeAllPopUp",
    value: function closeAllPopUp() {
      this.dispatchFor(this.CLOSE_ALL_POPUP, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["closeAllPopUp"])());
    }
  }, {
    key: "closeAllFilterPopUp",
    value: function closeAllFilterPopUp() {
      this.dispatchFor(this.CLOSE_ALL_FILTER_POPUP, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["closeAllFilterPopUp"])());
    }
  }, {
    key: "scrollPositionUpdated",
    value: function scrollPositionUpdated(scrollX, scrollY) {
      this.dispatchFor(this.SCROLL_POSITION_UPDATE, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["setUpdatedScrollPosition"])(scrollX, scrollY));
    }
  }, {
    key: "gotoScrollPosition",
    value: function gotoScrollPosition(scrollX, scrollY) {
      this.dispatchFor(this.GOTO_SCROLL_POSITION, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["gotoScrollPosition"])(scrollX, scrollY));
    }
  }, {
    key: "setColumnTempHiddenStatus",
    value: function setColumnTempHiddenStatus(obj) {
      this.dispatchFor(this.SET_COLUMNS_HIDDEN_TEMP, Object(_actions__WEBPACK_IMPORTED_MODULE_0__["updateColumnHiddenTemp"])(obj));
    }
  }]);

  return Store;
}();

var store;

var getStore = function getStore(appId) {
  if (!store) {
    store = {};
  }

  if (!(appId in store)) store[appId] = new Store(appId, _reducer__WEBPACK_IMPORTED_MODULE_1__["default"]);
  return store[appId];
};

/* harmony default export */ __webpack_exports__["default"] = (getStore);

/***/ }),

/***/ "./src/components/data_table/services/table_service.js":
/*!*************************************************************!*\
  !*** ./src/components/data_table/services/table_service.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TableService; });
/* harmony import */ var _entities_table__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../entities/table */ "./src/components/data_table/entities/table.js");
/* harmony import */ var _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../entities/custom_config */ "./src/components/data_table/entities/custom_config.js");
/* harmony import */ var _entities_column__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../entities/column */ "./src/components/data_table/entities/column.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }






var TableService = /*#__PURE__*/function () {
  function TableService() {
    _classCallCheck(this, TableService);
  }

  _createClass(TableService, [{
    key: "getAvailableListResult",
    value: function getAvailableListResult(dataList, tableConfig) {
      if (tableConfig.global) return {};
      var colListObj = {};
      tableConfig.columns.forEach(function (column) {
        console.log(column.type);

        if (column.type === _entities_column__WEBPACK_IMPORTED_MODULE_2__["TYPE_LIST"]) {
          var options = [];
          dataList.forEach(function (row) {
            if (!options.includes(row[column.key])) {
              options.push(row[column.key]);
            }
          });
          colListObj[column.key] = options;
        }
      });
      return colListObj;
    }
  }, {
    key: "genenerateTableConfig",
    value: function genenerateTableConfig(rawConfig) {
      return new _entities_table__WEBPACK_IMPORTED_MODULE_0__["default"](rawConfig);
    }
  }, {
    key: "genenerateCustomConfig",
    value: function genenerateCustomConfig(customConfig) {
      return new _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["default"](customConfig);
    }
  }, {
    key: "getNewColumnOrder",
    value: function getNewColumnOrder(originalColumnOrders, reorderColumn, columnAfter) {
      var columnsOrder = originalColumnOrders.filter(function (key) {
        return key !== reorderColumn;
      });

      if (columnAfter) {
        var index = columnsOrder.indexOf(columnAfter);
        columnsOrder.splice(index, 0, reorderColumn);
      } else {
        columnsOrder.push(reorderColumn);
      }

      return columnsOrder;
    }
  }, {
    key: "getColumnsOrder",
    value: function getColumnsOrder(tableConfig, customConfig) {
      if (customConfig && "columnsOrder" in customConfig && customConfig.columnsOrder.length > 0) {
        return customConfig.columnsOrder;
      } else {
        return tableConfig.getColumnsOrder();
      }
    }
  }, {
    key: "getNoneStickyColumnsOrder",
    value: function getNoneStickyColumnsOrder(tableConfig, customConfig, originalTableConfig) {
      var colOrders = [];

      if (customConfig && "columnsOrder" in customConfig && customConfig.columnsOrder.length > 0) {
        colOrders = customConfig.columnsOrder;
      } else {
        colOrders = tableConfig.getColumnsOrder();
      } //let's remove fixed ones


      colOrders = JSON.parse(JSON.stringify(colOrders));
      tableConfig.columns.forEach(function (col) {
        var originalColumnConfig = originalTableConfig.getColumnConfig(col.key);

        if (!colOrders.includes(col.key)) {
          colOrders.push(col.key);
        }

        if ((col.fixed || col.fixedRight || originalColumnConfig.hidden && originalColumnConfig.primaryKey) && colOrders.includes(col.key)) {
          colOrders.splice(colOrders.indexOf(col.key), 1);
        }
      });
      return colOrders;
    }
  }, {
    key: "getVisibleColumnsOrder",
    value: function getVisibleColumnsOrder(tableConfig, customConfig) {
      if (customConfig && "columnsOrder" in customConfig && customConfig.columnsOrder.length > 0) {
        return customConfig.columnsOrder;
      } else {
        return tableConfig.getVisibleColumnsOrder();
      }
    }
  }, {
    key: "getColumnsOrderFromState",
    value: function getColumnsOrderFromState(state) {
      return this.getColumnsOrder(state.config, state.customConfig);
    }
  }, {
    key: "getNoneStickyColumnsOrderFromState",
    value: function getNoneStickyColumnsOrderFromState(state) {
      return this.getNoneStickyColumnsOrder(state.config, state.customConfig, state.originalConfig);
    }
  }, {
    key: "restoreStickyColumnsFromState",
    value: function restoreStickyColumnsFromState(state, columns) {
      state.config.columns.forEach(function (col) {
        if (col.fixed) {
          //this is left fix
          columns.unshift(col.key);
        }

        if (col.fixedRight) {
          columns.push(col.key);
        }
      });
      return columns;
    }
  }, {
    key: "getVisibleColumnsOrderFromState",
    value: function getVisibleColumnsOrderFromState(state) {
      return this.getVisibleColumnsOrder(state.config, state.customConfig);
    }
  }, {
    key: "generateAllSelectedRowKeys",
    value: function generateAllSelectedRowKeys(tableConfig, dataList, allSelected) {
      var selectedRowKeys = [];

      if (allSelected) {
        var keyColumnKey = tableConfig.getPrimaryColumnKey();
        dataList.forEach(function (row) {
          selectedRowKeys.push(row[keyColumnKey]);
        });
      }

      return selectedRowKeys;
    }
  }, {
    key: "generateSelectedRowKeys",
    value: function generateSelectedRowKeys(tableConfig, dataList, currentSelectedKeys, index) {
      var selectedRowKey = dataList[index][tableConfig.getPrimaryColumnKey()];

      if (currentSelectedKeys.includes(selectedRowKey)) {
        //remove it
        currentSelectedKeys.splice(currentSelectedKeys.indexOf(selectedRowKey), 1);
      } else {
        //add it
        currentSelectedKeys.push(selectedRowKey);
      }

      currentSelectedKeys.sort();
      return currentSelectedKeys;
    }
  }, {
    key: "generateCheckedRowKeys",
    value: function generateCheckedRowKeys(tableConfig, dataList, currentSelectedKeys, payload) {
      var index = payload[0];
      var selected = payload[1];
      var selectedRowKey = dataList[index][tableConfig.getPrimaryColumnKey()];

      if (currentSelectedKeys.includes(selectedRowKey)) {
        //remove it
        currentSelectedKeys.splice(currentSelectedKeys.indexOf(selectedRowKey), 1);
      } else {
        //add it
        currentSelectedKeys.push(selectedRowKey);
      }

      currentSelectedKeys.sort();
      return currentSelectedKeys;
    }
  }, {
    key: "generateSingleSelectedRowKeys",
    value: function generateSingleSelectedRowKeys(tableConfig, dataList, currentSelectedKeys, index) {
      var selectedRowKey = dataList[index][tableConfig.getPrimaryColumnKey()];

      if (currentSelectedKeys.length == 1) {
        if (currentSelectedKeys[0] == selectedRowKey) {
          //untoggle it
          currentSelectedKeys = [];
        } else {
          currentSelectedKeys[0] = selectedRowKey;
        }
      } else {
        currentSelectedKeys = [selectedRowKey];
      }

      return currentSelectedKeys;
    }
  }, {
    key: "isAllRowSelected",
    value: function isAllRowSelected(dataList, tableConfig, selectedRowKeys) {
      var allSelected = dataList.length > 0; // if table has no data, should be false

      dataList.forEach(function (row) {
        if (!selectedRowKeys.includes(row[tableConfig.getPrimaryColumnKey()])) {
          allSelected = false;
        }
      });
      return allSelected;
    }
  }, {
    key: "isRowSelected",
    value: function isRowSelected(rowIndex, state) {
      var _this2 = this;

      var selected = false;
      state.selectedRowKeys.forEach(function (key) {
        if (key === _this2.getRowKeyValFromIndex(rowIndex, state)) selected = true;
      });
      return selected;
    }
  }, {
    key: "isRowChecked",
    value: function isRowChecked(rowIndex, state) {
      var _this3 = this;

      var checked = false;
      state.checkedRowKeys.forEach(function (key) {
        if (key === _this3.getRowKeyValFromIndex(rowIndex, state)) checked = true;
      });
      return checked;
    }
  }, {
    key: "getRowKeyValFromIndex",
    value: function getRowKeyValFromIndex(rowIndex, state) {
      var rowData = state.dataList[rowIndex];
      var keyColumnKey = state.config.getPrimaryColumnKey();
      return rowData ? rowData[keyColumnKey] : '';
    }
  }, {
    key: "findRowIndexFromRowKeyValue",
    value: function findRowIndexFromRowKeyValue(keyVal, state) {
      var rowIndex = 0;

      for (var i = 0; i < state.dataList.length; i++) {
        if (keyVal === this.getRowKeyValFromIndex(i, state)) {
          rowIndex = i;
          break;
        }
      }

      return rowIndex;
    }
  }, {
    key: "updateRowActionSelected",
    value: function updateRowActionSelected(rowIndex, action, state) {
      var rowKeyVal = this.getRowKeyValFromIndex(rowIndex, state);
      var currentRowActionSelected = state.rowActionSelected;
      currentRowActionSelected[rowKeyVal] = action;
      return currentRowActionSelected;
    }
  }, {
    key: "getRowActionSelectedFromIndex",
    value: function getRowActionSelectedFromIndex(rowIndex, state) {
      var rowKeyVal = this.getRowKeyValFromIndex(rowIndex, state);

      if (rowKeyVal in state.rowActionSelected) {
        return state.rowActionSelected[rowKeyVal];
      } else {
        return "";
      }
    }
  }, {
    key: "setColumnHidden",
    value: function setColumnHidden(columnKey, hidden, columns) {
      columns.forEach(function (column) {
        if (column.key == columnKey) {
          column.hidden = hidden;
        }
      });
      return columns;
    }
  }, {
    key: "setColumnsHidden",
    value: function setColumnsHidden(configObj, columns) {
      Object.keys(configObj).forEach(function (key) {
        columns.forEach(function (column) {
          if (column.key == key) {
            column.hidden = configObj[key];
          }
        });
      });
      return columns;
    }
  }, {
    key: "mergeCustomerConfig",
    value: function mergeCustomerConfig(tableConfig, customerConfig) {
      //step 1, merge hidden column status
      if (customerConfig["hiddenColumns"]) {
        tableConfig.columns.forEach(function (column) {
          if (customerConfig["hiddenColumns"].includes(column.key)) {
            column.hidden = true;
          }
        });
      } //step 2. merge columnWidths


      if (customerConfig['columnWidths']) {
        tableConfig.columns.forEach(function (column) {
          var columnKey = column.key;

          if (columnKey in customerConfig['columnWidths']) {
            column['width'] = customerConfig['columnWidths'][columnKey];
          }
        });
      }

      return tableConfig;
    }
  }, {
    key: "searchWholeData",
    value: function searchWholeData(state, term) {
      var originalDataList = JSON.parse(JSON.stringify(state.originalDataList));
      var sorter = state.customConfig.sorter;

      var _this = this;

      var _filter = function _filter(list, filter) {
        var filterResults = [];

        for (var i = 0; i < list.length; i++) {
          var bMatch = false;
          var row = list[i]; //we need to filer all the columns

          var colKeys = Object.keys(row);

          for (var j = 0; j < colKeys.length; j++) {
            if (row[colKeys[j]] && ('' + row[colKeys[j]]).toLowerCase().includes(('' + term).toLowerCase())) {
              bMatch = true;
              break;
            }
          }

          if (bMatch) filterResults.push(row);
        }

        return filterResults;
      };

      if (sorter.order == _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["ORDER_ASC"] || sorter.order == _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["ORDER_DESC"]) {
        originalDataList.sort(function (a, b) {
          if (sorter.order == _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["ORDER_ASC"]) {
            if (typeof a[sorter.by] === "string") {
              return _this.stripHtml(a[sorter.by]) > _this.stripHtml(b[sorter.by]) ? 1 : -1;
            } else if (typeof a[sorter.by] === "number") {
              return Number(a[sorter.by]) > Number(b[sorter.by]) ? 1 : -1;
            } else {
              return -1;
            }
          } else {
            if (typeof a[sorter.by] === "string") {
              return _this.stripHtml(a[sorter.by]) > _this.stripHtml(b[sorter.by]) ? -1 : 1;
            } else if (typeof a[sorter.by] === "number") {
              return Number(a[sorter.by]) > Number(b[sorter.by]) ? -1 : 1;
            } else {
              return -1;
            }
          }
        });
      } //now let's filter


      originalDataList = _filter(originalDataList, term);
      return originalDataList;
    }
  }, {
    key: "sortFilterData",
    value: function sortFilterData(state) {
      var originalDataList = JSON.parse(JSON.stringify(state.originalDataList));
      var sorter = state.customConfig.sorter;
      var filters = state.customConfig.filters;

      var _this = this;

      var tableConfig = state.config;

      if (state.tableSearchedTerm !== '') {
        originalDataList = this.searchWholeData(state, state.tableSearchedTerm);
      }

      var _filter = function _filter(list, filter) {
        var filterResults = [];
        list.forEach(function (item) {
          var bMatch = false;

          switch (filter.operator) {
            case _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["TYPE_CONTAINS"]:
              if (_this.stripHtml(item[filter.by]).toLowerCase().includes(filter.value1.toLowerCase())) {
                bMatch = true;
              }

              break;

            case _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["TYPE_EQUALS"]:
              if (Array.isArray(filter.value1)) {
                var _iterator = _createForOfIteratorHelper(filter.value1),
                    _step;

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var filterVal = _step.value;

                    if (_this.stripHtml(item[filter.by]).toLowerCase() === filterVal.toLowerCase()) {
                      bMatch = true;
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }
              } else {
                bMatch = _this.stripHtml(item[filter.by]).toLowerCase() === filter.value1.toLowerCase();
              }

              break;

            case _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["TYPE_IN"]:
              var filteredValues = [];
              filter.value1.forEach(function (v) {
                filteredValues.push(v.toLowerCase());
              });
              if (filteredValues.includes(_this.stripHtml(item[filter.by]).toLowerCase())) bMatch = true;else {
                filter.value1.forEach(function (f) {
                  if (_this.stripHtml(item[filter.by]).toLowerCase().includes(f.toLowerCase())) {
                    bMatch = true;
                  }
                });
              }
              break;

            case _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["TYPE_BETWEEN"]:
              var columnType = tableConfig.getColumnConfig(filter.by).type;
              var value = item[filter.by];
              var start = filter.value1;
              var end = filter.value2;

              if (columnType === 'date' || columnType === 'date_time') {
                if (!isNaN(filter.value1)) {
                  start = new Date(start);
                }

                if (!isNaN(filter.value2)) {
                  end = new Date(end);
                }
              }

              var valueDate = new Date(value);
              bMatch = valueDate >= start && valueDate <= end;
          }

          if (bMatch) filterResults.push(item);
        });
        return filterResults;
      };

      if (sorter.by && (sorter.order == _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["ORDER_ASC"] || sorter.order == _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["ORDER_DESC"])) {
        originalDataList.sort(function (a, b) {
          if (sorter.order == _entities_custom_config__WEBPACK_IMPORTED_MODULE_1__["ORDER_ASC"]) {
            if (typeof a[sorter.by] === 'string') {
              return _this.stripHtml(a[sorter.by]) > _this.stripHtml(b[sorter.by]) ? 1 : -1;
            } else if (typeof a[sorter.by] === 'number') {
              return Number(a[sorter.by]) > Number(b[sorter.by]) ? 1 : -1;
            } else {
              return -1;
            }
          } else {
            if (typeof a[sorter.by] === 'string') {
              return _this.stripHtml(a[sorter.by]) > _this.stripHtml(b[sorter.by]) ? -1 : 1;
            } else if (typeof a[sorter.by] === 'number') {
              return Number(a[sorter.by]) > Number(b[sorter.by]) ? -1 : 1;
            } else {
              return -1;
            }
          }
        });
      } //now let's filter


      filters.forEach(function (filter) {
        originalDataList = _filter(originalDataList, filter);
      });
      return originalDataList;
    }
  }, {
    key: "updateSingleSelectedRowAction",
    value: function updateSingleSelectedRowAction(state, rowIndex, columnKey, newValue) {
      var dataList = JSON.parse(JSON.stringify(state.dataList));
      var oldValue = dataList[rowIndex][columnKey];
      dataList[rowIndex][columnKey] = newValue; //here we need to udpate originalDataList as well as dataList

      var rowKeyVal = this.getRowKeyValFromIndex(rowIndex, state);
      var originalDataList = JSON.parse(JSON.stringify(state.originalDataList));
      var primaryKey = state.config.getPrimaryColumnKey();

      for (var i = 0; i < originalDataList.length; i++) {
        if (originalDataList[i][primaryKey] == rowKeyVal) {
          originalDataList[i][columnKey] = newValue;
          break;
        }
      }

      return [dataList, originalDataList, rowKeyVal, columnKey, oldValue];
    }
  }, {
    key: "updateSingleCellValue",
    value: function updateSingleCellValue(state, rowKeyVal, columnKey, value) {
      //1. we need to use rowKeyVal to find out rowIndex
      var dataList = JSON.parse(JSON.stringify(state.dataList));
      var primaryKey = state.config.getPrimaryColumnKey();
      var originalDataList = JSON.parse(JSON.stringify(state.originalDataList));

      if (Array.isArray(rowKeyVal)) {
        for (var i = 0; i < dataList.length; i++) {
          if (Array.isArray(rowKeyVal) && rowKeyVal.includes(dataList[i][primaryKey])) {
            dataList[i][columnKey] = value;
          }
        }

        for (var i = 0; i < originalDataList.length; i++) {
          if (Array.isArray(rowKeyVal) && rowKeyVal.includes(originalDataList[i][primaryKey])) {
            originalDataList[i][columnKey] = value;
          }
        }
      } else {
        for (var i = 0; i < dataList.length; i++) {
          if (dataList[i][primaryKey] == rowKeyVal) {
            dataList[i][columnKey] = value;
            break;
          }
        }

        for (var i = 0; i < originalDataList.length; i++) {
          if (originalDataList[i][primaryKey] == rowKeyVal) {
            originalDataList[i][columnKey] = value;
            break;
          }
        }
      }

      return [dataList, originalDataList];
    }
  }, {
    key: "upgradeConfig",
    value: function upgradeConfig(table, rows) {
      var _this4 = this;

      table.columns.forEach(function (column) {
        if (column.type == _entities_column__WEBPACK_IMPORTED_MODULE_2__["TYPE_TEXT"] && _this4.isDataListType(column.key, rows, table.listDeliminator)) {
          column.type = _entities_column__WEBPACK_IMPORTED_MODULE_2__["TYPE_LIST"];
        }

        if (column.type == _entities_column__WEBPACK_IMPORTED_MODULE_2__["TYPE_HTML"] && _this4.isDataHTMLListType(column.key, rows)) {
          column.type = _entities_column__WEBPACK_IMPORTED_MODULE_2__["TYPE_HTML_LIST"];
        }
      });
    }
  }, {
    key: "isDataListType",
    value: function isDataListType(colKey, rows) {
      var deliminator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ",";
      //1 check length of each cell, exclude 'UNKNOWN'
      //2. we only check 10 records here, if neighbour two items has length differene more than 5, then not a list
      var lengthThreshold = 10;
      var checkingCount = 5;
      var bList = true;
      var commaRows = 0;

      for (var i = 0; i < rows.length; i++) {
        var row = rows[i];

        if (isNaN(row[colKey]) && row[colKey] && row[colKey].includes(deliminator)) {
          var avgLength = 0;
          commaRows++;
          var items = row[colKey].split(deliminator);

          for (var j = 0; j < items.length - 1; j++) {
            var item = items[j];

            if (item.toLowerCase() != "unknown" && item.toLowerCase() != "" && items[j + 1].toLowerCase() != "unknown" && items[j + 1].toLowerCase() != "") {
              if (Math.abs(items[j + 1].trim().length - item.trim().length) > lengthThreshold) {
                bList = false;
              }
            }
          }
        }

        if (i > checkingCount || !bList) break;
      }

      if (commaRows == 0) return false;
      return bList;
    }
  }, {
    key: "getWidthOfText",
    value: function getWidthOfText(txt, fontname, fontsize) {
      if (!fontname) fontname = 'Roboto, "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif';
      if (!fontsize) fontsize = '14px';

      if (this.getWidthOfText.c === undefined) {
        this.getWidthOfText.c = document.createElement("canvas");
        this.getWidthOfText.ctx = this.getWidthOfText.c.getContext("2d");
      }

      this.getWidthOfText.ctx.font = fontsize + " " + fontname;
      return this.getWidthOfText.ctx.measureText(txt).width + 20;
    }
  }, {
    key: "getWidthOfHTML",
    value: function getWidthOfHTML(html, fontname, fontsize) {
      //assuming only first character is used to decide html.
      var content = html;

      if (html.indexOf("<") === 0) {
        var x = html.indexOf(">");
        var y = html.lastIndexOf("<");
        content = html.substring(x + 1, y);
      }

      return this.getWidthOfText(content, fontname, fontsize);
    }
  }, {
    key: "getColumnConfig",
    value: function getColumnConfig(config, colKey) {
      var cfg = '';
      config.columns.forEach(function (item) {
        if (item.key === colKey) cfg = item;
      });
      return cfg;
    }
  }, {
    key: "getRowActualHeight",
    value: function getRowActualHeight(colWidths, rowIndex, dataList, rowHeight, config) {
      var _this5 = this;

      var rowData = dataList[rowIndex];
      var lines = 1;
      Object.keys(colWidths).forEach(function (colKey) {
        if (typeof rowData[colKey] === "string" && !_this5.getColumnConfig(config, colKey).hidden && _this5.getColumnConfig(config, colKey).type === 'text') {
          var contentLength = _this5.getWidthOfText(rowData[colKey]);

          var colWidth = colWidths[colKey];
          lines = Math.ceil(contentLength / colWidth) > lines ? Math.ceil(contentLength / colWidth) : lines;
        }
      });
      return lines * rowHeight;
    }
  }, {
    key: "getDefaultColumns",
    value: function getDefaultColumns(columns) {
      var columnKeys = [];
      columns.forEach(function (column) {
        if (!column.hidden) columnKeys.push(column.key);
      });
      return columnKeys;
    }
  }, {
    key: "fixingCustomerConfig",
    value: function fixingCustomerConfig(passedConfig, dataList) {
      if (dataList && dataList.length === 0) return passedConfig;
      var currentColumnsOrder = passedConfig.columnsOrder;
      var currentHiddenColumns = passedConfig.hiddenColumns;
      var acturalColumns = Object.keys(dataList[0]);

      for (var i = currentColumnsOrder.length - 1; i >= 0; i--) {
        if (!acturalColumns.includes(currentColumnsOrder[i])) {
          currentColumnsOrder.splice(i, 1);
        }
      } //PI-2216 - data fields and config are different here, so can not do below checking using dataList - for Zendesk
      // for (let i = currentHiddenColumns.length - 1; i >= 0; i--) {
      //     if (!acturalColumns.includes(currentHiddenColumns[i])) {
      //         currentHiddenColumns.splice(i, 1);
      //     }
      // }


      passedConfig.columnsOrder = currentColumnsOrder;
      passedConfig.hiddenColumns = currentHiddenColumns;
      return passedConfig;
    }
  }, {
    key: "getColumnPosition",
    value: function getColumnPosition(state, colKey) {
      var columnsOrder = this.getVisibleColumnsOrderFromState(state);
      var bFirst = false;
      var bLast = false;
      var bMiddle = true;

      for (var i = 0; i < columnsOrder.length; i++) {
        if (i == 0 && columnsOrder[i] == colKey) {
          bFirst = true;
          break;
        } else if (i == columnsOrder.length - 1 && columnsOrder[i] == colKey) {
          bLast = true;
          break;
        }
      }

      if (bFirst || bLast) bMiddle = false;
      return {
        bFirst: bFirst,
        bLast: bLast,
        bMiddle: bMiddle
      };
    }
  }, {
    key: "isDataHTMLListType",
    value: function isDataHTMLListType(colKey, rows) {
      var lengthThreshold = 5;
      var checkingCount = 100;
      var bList = false;

      for (var i = 0; i < rows.length; i++) {
        var row = rows[i];
        var html = row[colKey];
        var checkingResults = this.analyzeHTMLListContent(html);

        if (checkingResults.innerDivs.length > 1) {
          bList = true;
          break;
        }

        if (i > checkingCount++) break;
      }

      return bList;
    } //here all the html content should be provided as <div.><div></div><div></div></div>;

  }, {
    key: "analyzeHTMLListContent",
    value: function analyzeHTMLListContent(html) {
      var outerDiv, innerDivs;

      if (html) {
        //step 1, get outer div
        outerDiv = html.substr(0, html.indexOf('>') + 1);
        innerDivs = [];
        var innerPartStr = html.substr(html.indexOf('>') + 1, html.lastIndexOf('</div>') - 1); //step 2. let's split here

        innerPartStr.split('</div>').forEach(function (part) {
          if (part !== '') {
            innerDivs.push(part + "</div>");
          }
        });
      } else {
        outerDiv = '';
        innerDivs = [];
      }

      return {
        outerDiv: outerDiv,
        innerDivs: innerDivs
      };
    }
  }, {
    key: "analyzeTextListContent",
    value: function analyzeTextListContent(text) {
      return typeof text == 'string' ? text.split(",") : [];
    }
  }, {
    key: "calCountForInerDivs",
    value: function calCountForInerDivs(innerDivs, colWidth) {
      var text = '',
          i;
      if (colWidth > 200) colWidth = 200;

      for (i = 0; i < innerDivs.length; i++) {
        var newText = text + this.stripHtml(innerDivs[i]);

        if (this.getWidthOfText(newText) > colWidth) {
          break;
        }

        text = newText;
      }

      return i > 1 ? i : 1; // todo: this logic needs to be double checked
    }
  }, {
    key: "stripHtml",
    value: function stripHtml(html) {
      // Create a new div element
      var temporalDivElement = document.createElement("div"); // Set the HTML content with the providen

      temporalDivElement.innerHTML = html; // Retrieve the text property of the element (cross-browser support)

      return temporalDivElement.textContent || temporalDivElement.innerText || "";
    }
  }, {
    key: "formatNumber",
    value: function formatNumber(number, columnConfig) {
      if (columnConfig.format === 'COMMASEPERATED') {
        return ('' + number).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      } else if (columnConfig.format === 'SHORTENED') {
        if (number > 1000000000) {
          return Math.floor(number / 1000000000) + ' GB';
        } else if (number > 1000000) {
          return Math.floor(number / 1000000) + ' MB';
        } else if (number > 1000) {
          return Math.floor(number / 1000) + ' KB';
        } else {
          return '' + number;
        }
      } else {
        return number;
      }
    }
  }]);

  return TableService;
}();



/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,